{"version":3,"file":"favorites-7Q9RYkW7.js","sources":["../../src/utils/favorites.js"],"sourcesContent":["import { supabase } from '../supabase';\nimport { useStore } from '../store';\nimport { route } from 'preact-router';\nimport toast from '../components/Toast';\n\n/**\n * Adds a show to the user's favorites.\n *\n * @param {object} show - The show object to add.\n * @returns {Promise<void>}\n */\nexport const addFavoriteShow = async (show) => {\n  const { data: { user } } = await supabase.auth.getUser();\n  if (!user) {\n    toast.error('You need to be logged in to save favorites.');\n    // Optionally, you could offer a button inside the toast to redirect to login\n    // For now, just showing the error is a good first step.\n    return;\n  }\n\n  const showId = show.id;\n  const mediaType = show.type || 'tv'; // Default to 'tv' if type is not specified\n  const { getState, setState } = useStore;\n  const state = getState();\n\n  // Prevent adding if already favorited\n  const favoriteKey = `${showId}-${mediaType}`;\n  if (state.favoritedMedia.has(favoriteKey)) {\n    return;\n  }\n\n  // Optimistic update\n  setState((currentState) => ({\n    favorites: [{ ...show, type: mediaType }, ...currentState.favorites],\n    favoritedMedia: new Set(currentState.favoritedMedia).add(favoriteKey),\n  }));\n\n  // Show a notification\n  toast.success(`'${show.name || show.title}' has been added to your Favorites.`);\n  \n  // Add to Supabase\n  const { error } = await supabase.from('favorites').insert({\n    user_id: user.id,\n    media_id: showId,\n    media_type: mediaType,\n  });\n\n  if (error) {\n    console.error('Error adding favorite show:', error);\n    // Revert on error\n    setState((currentState) => {\n        const newFavoritedMedia = new Set(currentState.favoritedMedia);\n        newFavoritedMedia.delete(favoriteKey);\n        return {\n            favoritedMedia: newFavoritedMedia,\n            favorites: currentState.favorites.filter(f => f.id !== showId)\n        };\n    });\n  }\n};\n\n/**\n * Removes a show from the user's favorites after confirmation.\n *\n * @param {object} show - The show object to remove.\n * @returns {Promise<void>}\n */\nexport const removeFavoriteShow = async (show) => {\n  const { data: { user } } = await supabase.auth.getUser();\n  if (!user) return;\n\n  const showId = show.id;\n  const mediaType = show.type || 'tv';\n  const { getState, setState } = useStore;\n  const favoriteKey = `${showId}-${mediaType}`;\n\n  const originalFavorites = getState().favorites;\n  const originalFavoritedMedia = getState().favoritedMedia;\n\n  // Optimistic update\n  setState((currentState) => ({\n    favorites: currentState.favorites.filter(fav => fav.id !== showId),\n    favoritedMedia: new Set([...currentState.favoritedMedia].filter(id => id !== favoriteKey)),\n  }));\n\n  // Show a notification\n  toast.error(`'${show.name || show.title}' has been removed from your Favorites.`);\n\n  // Remove from Supabase\n  const { error } = await supabase.from('favorites').delete().match({\n    user_id: user.id,\n    media_id: showId,\n    media_type: mediaType\n  });\n\n  if (error) {\n      console.error('Error removing favorite show:', error);\n      // Revert on error\n      setState({ favorites: originalFavorites, favoritedMedia: originalFavoritedMedia });\n      toast.error(`Failed to remove '${show.name || show.title}' from favorites.`);\n  }\n};\n\n/**\n * Checks if a show is favorited.\n *\n * @param {number} showId - The ID of the show.\n * @param {string} type - The media type ('tv', 'movie', 'anime').\n * @returns {boolean}\n */\nexport const isShowFavorited = (showId, type = 'tv') => {\n    return useStore.getState().favoritedMedia.has(`${showId}-${type}`);\n};"],"names":["addFavoriteShow","show","user","supabase","toast","showId","mediaType","getState","setState","useStore","state","favoriteKey","currentState","error","newFavoritedMedia","f","removeFavoriteShow","originalFavorites","originalFavoritedMedia","fav","id"],"mappings":"sDAWY,MAACA,EAAkB,MAAOC,GAAS,CAC7C,KAAM,CAAE,KAAM,CAAE,KAAAC,CAAI,CAAE,EAAK,MAAMC,EAAS,KAAK,QAAO,EACtD,GAAI,CAACD,EAAM,CACTE,EAAM,MAAM,6CAA6C,EAGzD,MACF,CAEA,MAAMC,EAASJ,EAAK,GACdK,EAAYL,EAAK,MAAQ,KACzB,CAAE,SAAAM,EAAU,SAAAC,CAAQ,EAAKC,EACzBC,EAAQH,EAAQ,EAGhBI,EAAc,GAAGN,CAAM,IAAIC,CAAS,GAC1C,GAAII,EAAM,eAAe,IAAIC,CAAW,EACtC,OAIFH,EAAUI,IAAkB,CAC1B,UAAW,CAAC,CAAE,GAAGX,EAAM,KAAMK,GAAa,GAAGM,EAAa,SAAS,EACnE,eAAgB,IAAI,IAAIA,EAAa,cAAc,EAAE,IAAID,CAAW,CACxE,EAAI,EAGFP,EAAM,QAAQ,IAAIH,EAAK,MAAQA,EAAK,KAAK,qCAAqC,EAG9E,KAAM,CAAE,MAAAY,CAAK,EAAK,MAAMV,EAAS,KAAK,WAAW,EAAE,OAAO,CACxD,QAASD,EAAK,GACd,SAAUG,EACV,WAAYC,CAChB,CAAG,EAEGO,IACF,QAAQ,MAAM,8BAA+BA,CAAK,EAElDL,EAAUI,GAAiB,CACvB,MAAME,EAAoB,IAAI,IAAIF,EAAa,cAAc,EAC7D,OAAAE,EAAkB,OAAOH,CAAW,EAC7B,CACH,eAAgBG,EAChB,UAAWF,EAAa,UAAU,OAAOG,GAAKA,EAAE,KAAOV,CAAM,CACzE,CACI,CAAC,EAEL,EAQaW,EAAqB,MAAOf,GAAS,CAChD,KAAM,CAAE,KAAM,CAAE,KAAAC,CAAI,CAAE,EAAK,MAAMC,EAAS,KAAK,QAAO,EACtD,GAAI,CAACD,EAAM,OAEX,MAAMG,EAASJ,EAAK,GACdK,EAAYL,EAAK,MAAQ,KACzB,CAAE,SAAAM,EAAU,SAAAC,CAAQ,EAAKC,EACzBE,EAAc,GAAGN,CAAM,IAAIC,CAAS,GAEpCW,EAAoBV,EAAQ,EAAG,UAC/BW,EAAyBX,EAAQ,EAAG,eAG1CC,EAAUI,IAAkB,CAC1B,UAAWA,EAAa,UAAU,OAAOO,GAAOA,EAAI,KAAOd,CAAM,EACjE,eAAgB,IAAI,IAAI,CAAC,GAAGO,EAAa,cAAc,EAAE,OAAOQ,GAAMA,IAAOT,CAAW,CAAC,CAC7F,EAAI,EAGFP,EAAM,MAAM,IAAIH,EAAK,MAAQA,EAAK,KAAK,yCAAyC,EAGhF,KAAM,CAAE,MAAAY,CAAK,EAAK,MAAMV,EAAS,KAAK,WAAW,EAAE,OAAM,EAAG,MAAM,CAChE,QAASD,EAAK,GACd,SAAUG,EACV,WAAYC,CAChB,CAAG,EAEGO,IACA,QAAQ,MAAM,gCAAiCA,CAAK,EAEpDL,EAAS,CAAE,UAAWS,EAAmB,eAAgBC,CAAsB,CAAE,EACjFd,EAAM,MAAM,qBAAqBH,EAAK,MAAQA,EAAK,KAAK,mBAAmB,EAEjF"}