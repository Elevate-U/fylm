{"version":3,"mappings":"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","names":["BlogAdmin","user","session","authLoading","authReady","useAuth","posts","setPosts","useState","categories","setCategories","loading","setLoading","error","setError","showEditor","setShowEditor","editingPost","setEditingPost","stats","setStats","currentPage","setCurrentPage","totalPages","setTotalPages","searchTerm","setSearchTerm","selectedCategory","setSelectedCategory","sortBy","setSortBy","sortOrder","setSortOrder","isAdmin","setIsAdmin","checkingAdmin","setCheckingAdmin","adminChecked","setAdminChecked","selectedPosts","setSelectedPosts","showBulkActions","setShowBulkActions","refreshing","setRefreshing","autoRefresh","setAutoRefresh","lastRefresh","setLastRefresh","postAnalytics","setPostAnalytics","showAnalytics","setShowAnalytics","showExportModal","setShowExportModal","imageProcessor","ImageProcessor","checkAdminStatus","adminStatus","BlogAPI","loadInitialData","err","useEffect","updatePageTitle","updateMetaDescription","loadPosts","editPostId","handleEditPostById","categoriesData","statsData","categorySlug","cat","data","supabase","postsData","searchLower","post","a","b","aVal","bVal","handleCreatePost","handleEditPost","fullPost","postId","handleDeletePost","prev","id","handleSelectPost","newSelected","handleSelectAll","allPostIds","handleBulkDelete","prevPosts","handleBulkStatusChange","newStatus","handleRefresh","interval","loadPostAnalytics","analytics","handleExportPosts","handleDuplicatePost","duplicatedPost","handleTogglePublished","p","handleEditorClose","handleSearch","e","formatDate","dateString","formatTime","formatRelativeTime","now","date","diffInSeconds","jsxs","Fragment","jsx","Header","BlogEditor","category","field","order","sum","_","i","page","ExportModal","onClose","blogAPI","formData","setFormData","saving","setSaving","processingImages","setProcessingImages","slugManuallyEdited","setSlugManuallyEdited","autoSlug","handleInputChange","value","handleContentChange","content","textarea","cursorPosition","processedContent","handleSave","publishNow","authError","cleanContent","postData","tag","result","startTime","reject","duration","errorMessage","ContentEditor","MarkdownGuide","onChange","disabled","isPreview","setIsPreview","fullscreen","setFullscreen","showMovieSearch","setShowMovieSearch","movieSearchQuery","setMovieSearchQuery","movieSearchResults","setMovieSearchResults","searchingMovies","setSearchingMovies","handleChange","insertMarkdown","before","after","start","end","selectedText","newText","insertTemplate","template","templates","searchMovies","query","API_BASE_URL","__vitePreload","n","insertMovieLink","movie","movieTitle","movieUrl","linkText","isOpen","setIsOpen","exportFormat","setExportFormat","exporting","setExporting","handleExport","postsToExport","filename","mimeType","headers","rows","row","cell","blob","url"],"ignoreList":[],"sources":["../../src/pages/BlogAdmin.jsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport { BlogAPI } from '../utils/blogApi.js';\nimport ImageProcessor from '../utils/imageProcessor.js';\nimport { updatePageTitle, updateMetaDescription } from '../utils/seoUtils.js';\nimport { supabase } from '../supabase.js';\nimport { useAuth } from '../context/Auth';\nimport Header from '../components/Header';\nimport './BlogAdmin.css';\n\n\n\nconst BlogAdmin = () => {\n    // Use authentication context\n    const { user, session, loading: authLoading, authReady } = useAuth();\n    \n    const [posts, setPosts] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [showEditor, setShowEditor] = useState(false);\n    const [editingPost, setEditingPost] = useState(null);\n    const [stats, setStats] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [selectedCategory, setSelectedCategory] = useState('');\n    const [sortBy, setSortBy] = useState('created_at');\n    const [sortOrder, setSortOrder] = useState('desc');\n    const [isAdmin, setIsAdmin] = useState(false);\n    const [checkingAdmin, setCheckingAdmin] = useState(true);\n    const [adminChecked, setAdminChecked] = useState(false);\n    const [selectedPosts, setSelectedPosts] = useState([]);\n    const [showBulkActions, setShowBulkActions] = useState(false);\n    const [refreshing, setRefreshing] = useState(false);\n    const [autoRefresh, setAutoRefresh] = useState(false);\n    const [lastRefresh, setLastRefresh] = useState(new Date());\n    const [postAnalytics, setPostAnalytics] = useState({});\n    const [showAnalytics, setShowAnalytics] = useState(false);\n    const [showExportModal, setShowExportModal] = useState(false);\n\n    const blogAPI = new BlogAPI();\n    const imageProcessor = new ImageProcessor();\n\n    // Cache admin status to avoid repeated checks\n    const checkAdminStatus = async () => {\n        if (adminChecked) return isAdmin; // Return cached result\n        \n        try {\n            console.log('Checking admin status...');\n            setCheckingAdmin(true);\n            const adminStatus = await BlogAPI.isAdmin();\n            console.log('Admin status result:', adminStatus);\n            setIsAdmin(adminStatus);\n            setAdminChecked(true);\n            \n            if (adminStatus) {\n                console.log('User is admin, loading data...');\n                await loadInitialData();\n            } else {\n                console.log('User is not admin');\n                setError('Access denied. Admin privileges required.');\n            }\n            return adminStatus;\n        } catch (err) {\n            console.error('Error checking admin status:', err);\n            setError('Failed to verify admin access: ' + err.message);\n            return false;\n        } finally {\n            setCheckingAdmin(false);\n        }\n    };\n\n    useEffect(() => {\n        updatePageTitle('Blog Admin - Manage Posts');\n        updateMetaDescription('Admin panel for managing blog posts, categories, and content.');\n    }, []);\n\n    // Wait for auth to be ready before checking admin status\n    useEffect(() => {\n        if (!authReady || authLoading) {\n            console.log('Auth not ready yet, waiting...', { authReady, authLoading });\n            return;\n        }\n\n        if (!user || !session) {\n            console.log('No user or session, redirecting to login');\n            setError('Please log in to access the admin panel.');\n            setCheckingAdmin(false);\n            return;\n        }\n\n        const initializeAdmin = async () => {\n            console.log('Auth ready, initializing admin with user:', user?.email);\n            const adminStatus = await checkAdminStatus();\n            if (adminStatus) {\n                await loadPosts();\n            }\n        };\n        \n        initializeAdmin();\n        \n        // Check for edit parameter in URL\n        const urlParams = new URLSearchParams(window.location.hash.split('?')[1]);\n        const editPostId = urlParams.get('edit');\n        if (editPostId) {\n            handleEditPostById(editPostId);\n        }\n    }, [authReady, authLoading, user, session]);\n\n    // Separate effect for posts loading that only triggers when necessary\n    useEffect(() => {\n        if (isAdmin && adminChecked) {\n            loadPosts();\n        }\n    }, [currentPage, searchTerm, selectedCategory, sortBy, sortOrder]);\n\n    // Separate effect for admin status changes\n    useEffect(() => {\n        if (adminChecked && isAdmin) {\n            loadPosts();\n        }\n    }, [isAdmin, adminChecked]);\n\n    const loadInitialData = async () => {\n        if (!isAdmin) return;\n        \n        try {\n            const [categoriesData, statsData] = await Promise.all([\n                BlogAPI.getCategories(),\n                BlogAPI.getBlogStats()\n            ]);\n            setCategories(categoriesData);\n            setStats(statsData);\n        } catch (err) {\n            console.error('Error loading initial data:', err);\n            setError('Failed to load admin data');\n        }\n    };\n\n    const loadPosts = async () => {\n        console.log('loadPosts called, isAdmin:', isAdmin);\n        if (!isAdmin || !adminChecked) {\n            console.log('User is not admin or admin status not checked, skipping loadPosts');\n            return;\n        }\n        \n        try {\n            setLoading(true);\n            setError(null);\n            console.log('Loading posts...');\n            \n            // Get category slug for filtering\n            const categorySlug = selectedCategory ? \n                categories.find(cat => cat.id === selectedCategory)?.slug : null;\n            \n            // Use the admin function to get all posts\n            const { data, error } = await supabase\n                .rpc('get_all_blog_posts_admin', {\n                    limit_count: 10,\n                    offset_count: (currentPage - 1) * 10,\n                    filter_status: null, // Show all statuses\n                    filter_category_slug: categorySlug\n                });\n            \n            console.log('Supabase response:', { data, error });\n            if (error) throw error;\n            \n            let postsData = data || [];\n            \n            // Client-side search filtering if search term exists\n            if (searchTerm) {\n                const searchLower = searchTerm.toLowerCase();\n                postsData = postsData.filter(post => \n                    post.title.toLowerCase().includes(searchLower) ||\n                    post.excerpt?.toLowerCase().includes(searchLower) ||\n                    post.category_name?.toLowerCase().includes(searchLower)\n                );\n            }\n            \n            // Client-side sorting\n            postsData.sort((a, b) => {\n                let aVal, bVal;\n                switch (sortBy) {\n                    case 'title':\n                        aVal = a.title.toLowerCase();\n                        bVal = b.title.toLowerCase();\n                        break;\n                    case 'updated_at':\n                        aVal = new Date(a.updated_at);\n                        bVal = new Date(b.updated_at);\n                        break;\n                    case 'created_at':\n                    default:\n                        aVal = new Date(a.created_at);\n                        bVal = new Date(b.created_at);\n                        break;\n                }\n                \n                if (sortOrder === 'asc') {\n                    return aVal > bVal ? 1 : -1;\n                } else {\n                    return aVal < bVal ? 1 : -1;\n                }\n            });\n            \n            setPosts(postsData);\n            // For now, we'll handle pagination client-side\n            setTotalPages(Math.ceil(postsData.length / 10));\n        } catch (err) {\n            console.error('Error loading posts:', err);\n            setError('Failed to load posts: ' + err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleCreatePost = () => {\n        setEditingPost(null);\n        setShowEditor(true);\n    };\n\n    const handleEditPost = async (post) => {\n        try {\n            setLoading(true);\n            // Fetch the complete post data including meta fields\n            const fullPost = await BlogAPI.getPostById(post.id);\n            if (fullPost) {\n                setEditingPost(fullPost);\n                setShowEditor(true);\n            } else {\n                setError('Post not found');\n            }\n        } catch (err) {\n            console.error('Error loading post for editing:', err);\n            setError('Failed to load post for editing');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleEditPostById = async (postId) => {\n        try {\n            setLoading(true);\n            const post = await BlogAPI.getPostById(postId);\n            if (post) {\n                setEditingPost(post);\n                setShowEditor(true);\n            } else {\n                setError('Post not found');\n            }\n        } catch (err) {\n            console.error('Error loading post for editing:', err);\n            setError('Failed to load post for editing');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleDeletePost = async (postId) => {\n        if (!confirm('Are you sure you want to delete this post? This action cannot be undone.')) {\n            return;\n        }\n\n        try {\n            setLoading(true);\n            await BlogAPI.deletePost(postId);\n            await loadPosts();\n            await loadInitialData(); // Refresh stats\n            // Remove from selected posts if it was selected\n            setSelectedPosts(prev => prev.filter(id => id !== postId));\n        } catch (err) {\n            console.error('Error deleting post:', err);\n            setError('Failed to delete post: ' + err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    // Bulk Actions\n    const handleSelectPost = (postId) => {\n        setSelectedPosts(prev => {\n            if (prev.includes(postId)) {\n                const newSelected = prev.filter(id => id !== postId);\n                setShowBulkActions(newSelected.length > 0);\n                return newSelected;\n            } else {\n                const newSelected = [...prev, postId];\n                setShowBulkActions(true);\n                return newSelected;\n            }\n        });\n    };\n\n    const handleSelectAll = () => {\n        if (selectedPosts.length === posts.length) {\n            setSelectedPosts([]);\n            setShowBulkActions(false);\n        } else {\n            const allPostIds = posts.map(post => post.id);\n            setSelectedPosts(allPostIds);\n            setShowBulkActions(true);\n        }\n    };\n\n    const handleBulkDelete = async () => {\n        if (selectedPosts.length === 0) return;\n        \n        if (!confirm(`Are you sure you want to delete ${selectedPosts.length} posts? This action cannot be undone.`)) {\n            return;\n        }\n\n        try {\n            setLoading(true);\n            setError(null);\n\n            // Use the new bulk delete API method\n            await BlogAPI.bulkDeletePosts(selectedPosts);\n\n            // Remove deleted posts from state\n            setPosts(prevPosts => prevPosts.filter(post => !selectedPosts.includes(post.id)));\n            setSelectedPosts([]);\n            setShowBulkActions(false);\n        } catch (err) {\n            console.error('Error bulk deleting posts:', err);\n            setError('Failed to delete selected posts');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleBulkStatusChange = async (newStatus) => {\n        if (selectedPosts.length === 0) return;\n        \n        try {\n            setLoading(true);\n            setError(null);\n            \n            // Use the new bulk update API method\n             await BlogAPI.bulkUpdateStatus(selectedPosts, newStatus);\n            \n            // Update posts in state\n            setPosts(prevPosts => \n                prevPosts.map(post => \n                    selectedPosts.includes(post.id) \n                        ? { ...post, status: newStatus }\n                        : post\n                )\n            );\n            \n            setSelectedPosts([]);\n            setShowBulkActions(false);\n        } catch (err) {\n            console.error('Error updating posts:', err);\n            setError('Failed to update selected posts');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleRefresh = async () => {\n        setRefreshing(true);\n        try {\n            await Promise.all([loadPosts(), loadInitialData()]);\n            setLastRefresh(new Date());\n        } catch (err) {\n            console.error('Error refreshing data:', err);\n            setError('Failed to refresh data');\n        } finally {\n            setRefreshing(false);\n        }\n    };\n\n    // Auto-refresh functionality\n    useEffect(() => {\n        if (!autoRefresh || !isAdmin) return;\n        \n        const interval = setInterval(() => {\n            handleRefresh();\n        }, 30000); // Refresh every 30 seconds\n        \n        return () => clearInterval(interval);\n    }, [autoRefresh, isAdmin]);\n\n    // Load post analytics\n    const loadPostAnalytics = async (postId) => {\n        try {\n            const analytics = await BlogAPI.getPostAnalytics(postId);\n            setPostAnalytics(prev => ({ ...prev, [postId]: analytics }));\n        } catch (err) {\n            console.error('Error loading post analytics:', err);\n        }\n    };\n\n    // Export posts functionality\n    const handleExportPosts = () => {\n        setShowExportModal(true);\n    };\n\n    // Duplicate post functionality\n    const handleDuplicatePost = async (post) => {\n        try {\n            setLoading(true);\n            const duplicatedPost = {\n                ...post,\n                title: `${post.title} (Copy)`,\n                slug: `${post.slug}-copy-${Date.now()}`,\n                status: 'draft',\n                created_at: undefined,\n                updated_at: undefined,\n                id: undefined\n            };\n            \n            await BlogAPI.createPost(duplicatedPost);\n            await loadPosts();\n            await loadInitialData();\n        } catch (err) {\n            console.error('Error duplicating post:', err);\n            setError('Failed to duplicate post');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleTogglePublished = async (post) => {\n        try {\n            setLoading(true);\n            const newStatus = post.status === 'published' ? 'draft' : 'published';\n            await BlogAPI.updatePost(post.id, { status: newStatus });\n            \n            // Update the post in the local state\n            setPosts(prevPosts => \n                prevPosts.map(p => \n                    p.id === post.id \n                        ? { ...p, status: newStatus, updated_at: new Date().toISOString() }\n                        : p\n                )\n            );\n            \n            // Refresh stats after status change\n            await loadInitialData();\n        } catch (err) {\n            console.error('Error updating post status:', err);\n            setError('Failed to update post status');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleEditorClose = () => {\n        setShowEditor(false);\n        setEditingPost(null);\n        loadPosts();\n        loadInitialData(); // Refresh stats\n    };\n\n    const handleSearch = (e) => {\n        e.preventDefault();\n        setCurrentPage(1);\n        loadPosts();\n    };\n\n    const formatDate = (dateString) => {\n        return new Date(dateString).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric'\n        });\n    };\n\n    const formatTime = (dateString) => {\n        return new Date(dateString).toLocaleTimeString('en-US', {\n            hour: '2-digit',\n            minute: '2-digit'\n        });\n    };\n\n    const formatRelativeTime = (dateString) => {\n        const now = new Date();\n        const date = new Date(dateString);\n        const diffInSeconds = Math.floor((now - date) / 1000);\n        \n        if (diffInSeconds < 60) return 'Just now';\n        if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}m ago`;\n        if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)}h ago`;\n        if (diffInSeconds < 604800) return `${Math.floor(diffInSeconds / 86400)}d ago`;\n        return formatDate(dateString);\n    };\n\n    if (checkingAdmin || authLoading || !authReady) {\n        return (\n            <>\n                <Header />\n                <main className=\"blog-admin\">\n                    <div className=\"loading-spinner\">\n                        <div className=\"spinner\"></div>\n                        <p>{authLoading || !authReady ? 'Loading authentication...' : 'Checking admin access...'}</p>\n                    </div>\n                </main>\n            </>\n        );\n    }\n\n    if (!isAdmin) {\n        return (\n            <>\n                <Header />\n                <main className=\"blog-admin\">\n                    <div className=\"access-denied\">\n                        <h1>Access Denied</h1>\n                        <p>You need administrator privileges to access the blog admin panel.</p>\n                        <p>If you believe you should have access, please contact the site administrator.</p>\n                        <a href=\"/blog\" className=\"back-to-blog-btn\">← Back to Blog</a>\n                    </div>\n                </main>\n            </>\n        );\n    }\n\n    if (showEditor) {\n        return (\n            <BlogEditor\n                post={editingPost}\n                categories={categories}\n                onClose={handleEditorClose}\n                blogAPI={BlogAPI}\n                imageProcessor={imageProcessor}\n            />\n        );\n    }\n\n    return (\n        <>\n            <Header />\n            <main className=\"blog-admin\">\n            <div className=\"admin-header\">\n                <h1>Blog Admin</h1>\n                <div className=\"header-actions\">\n                    <button \n                        className=\"refresh-btn\" \n                        onClick={handleRefresh}\n                        disabled={refreshing}\n                        title=\"Refresh Data\"\n                    >\n                        <span className={`icon ${refreshing ? 'spinning' : ''}`}>🔄</span>\n                        {refreshing ? 'Refreshing...' : 'Refresh'}\n                    </button>\n                    \n                    <button\n                        className={`auto-refresh-btn ${autoRefresh ? 'active' : ''}`}\n                        onClick={() => setAutoRefresh(!autoRefresh)}\n                        title=\"Toggle Auto-refresh (30s)\"\n                    >\n                        <span className=\"icon\">{autoRefresh ? '⏸️' : '▶️'}</span>\n                        Auto\n                    </button>\n                    \n                    <button\n                        className=\"analytics-btn\"\n                        onClick={() => setShowAnalytics(!showAnalytics)}\n                        title=\"Toggle Analytics View\"\n                    >\n                        <span className=\"icon\">📊</span>\n                        Analytics\n                    </button>\n                    \n                    <button\n                        className=\"export-btn\"\n                        onClick={handleExportPosts}\n                        title=\"Export Posts\"\n                    >\n                        <span className=\"icon\">📥</span>\n                        Export\n                    </button>\n                    \n                    <button className=\"create-post-btn\" onClick={handleCreatePost}>\n                        <span className=\"icon\">+</span>\n                        Create New Post\n                    </button>\n                    \n                    <span className=\"last-refresh\">\n                        Last updated: {formatRelativeTime(lastRefresh)}\n                    </span>\n                </div>\n            </div>\n\n            {/* Stats Dashboard */}\n            {stats && (\n                <div className=\"stats-dashboard\">\n                    <div className=\"stat-card\">\n                        <h3>Total Posts</h3>\n                        <p className=\"stat-number\">{stats.totalPosts}</p>\n                    </div>\n                    <div className=\"stat-card\">\n                        <h3>Published</h3>\n                        <p className=\"stat-number\">{stats.publishedPosts}</p>\n                    </div>\n                    <div className=\"stat-card\">\n                        <h3>Drafts</h3>\n                        <p className=\"stat-number\">{stats.draftPosts}</p>\n                    </div>\n                    <div className=\"stat-card\">\n                        <h3>Categories</h3>\n                        <p className=\"stat-number\">{categories.length}</p>\n                    </div>\n                </div>\n            )}\n\n            {/* Filters and Search */}\n            <div className=\"admin-controls\">\n                <form className=\"search-form\" onSubmit={handleSearch}>\n                    <input\n                        type=\"text\"\n                        placeholder=\"Search posts...\"\n                        value={searchTerm}\n                        onChange={(e) => setSearchTerm(e.target.value)}\n                        className=\"search-input\"\n                    />\n                    <button type=\"submit\" className=\"search-btn\">Search</button>\n                </form>\n\n                <div className=\"filters\">\n                    <select\n                        value={selectedCategory}\n                        onChange={(e) => {\n                            setSelectedCategory(e.target.value);\n                            setCurrentPage(1);\n                        }}\n                        className=\"filter-select\"\n                    >\n                        <option value=\"\">All Categories</option>\n                        {categories.map(category => (\n                            <option key={category.id} value={category.id}>\n                                {category.name}\n                            </option>\n                        ))}\n                    </select>\n\n                    <select\n                        value={`${sortBy}-${sortOrder}`}\n                        onChange={(e) => {\n                            const [field, order] = e.target.value.split('-');\n                            setSortBy(field);\n                            setSortOrder(order);\n                            setCurrentPage(1);\n                        }}\n                        className=\"filter-select\"\n                    >\n                        <option value=\"created_at-desc\">Newest First</option>\n                        <option value=\"created_at-asc\">Oldest First</option>\n                        <option value=\"title-asc\">Title A-Z</option>\n                        <option value=\"title-desc\">Title Z-A</option>\n                        <option value=\"updated_at-desc\">Recently Updated</option>\n                    </select>\n                </div>\n            </div>\n\n            {/* Bulk Actions Toolbar */}\n            {showBulkActions && (\n                <div className=\"bulk-actions-toolbar\">\n                    <div className=\"bulk-info\">\n                        <span>{selectedPosts.length} post{selectedPosts.length !== 1 ? 's' : ''} selected</span>\n                    </div>\n                    <div className=\"bulk-actions\">\n                        <button \n                            className=\"bulk-btn publish-btn\"\n                            onClick={() => handleBulkStatusChange('published')}\n                            disabled={loading}\n                        >\n                            📢 Publish Selected\n                        </button>\n                        <button \n                            className=\"bulk-btn draft-btn\"\n                            onClick={() => handleBulkStatusChange('draft')}\n                            disabled={loading}\n                        >\n                            📝 Move to Draft\n                        </button>\n                        <button \n                            className=\"bulk-btn delete-btn\"\n                            onClick={handleBulkDelete}\n                            disabled={loading}\n                        >\n                            🗑️ Delete Selected\n                        </button>\n                        <button \n                            className=\"bulk-btn cancel-btn\"\n                            onClick={() => {\n                                setSelectedPosts([]);\n                                setShowBulkActions(false);\n                            }}\n                        >\n                            ✕ Cancel\n                        </button>\n                    </div>\n                </div>\n            )}\n\n            {/* Posts Table */}\n            {error && (\n                <div className=\"error-message\">\n                    <p>{error}</p>\n                    <button onClick={() => setError(null)} className=\"dismiss-error\">✕</button>\n                </div>\n            )}\n\n            {loading ? (\n                <div className=\"loading-spinner\">\n                    <div className=\"spinner\"></div>\n                    <p>Loading posts...</p>\n                </div>\n            ) : (\n                <div className=\"posts-table-container\">\n                    <table className=\"posts-table\">\n                        <thead>\n                            <tr>\n                                <th className=\"checkbox-cell\">\n                                    <input\n                                        type=\"checkbox\"\n                                        checked={posts.length > 0 && selectedPosts.length === posts.length}\n                                        onChange={handleSelectAll}\n                                        title=\"Select All\"\n                                    />\n                                </th>\n                                <th>Title</th>\n                                <th>Category</th>\n                                <th>Status</th>\n                                <th>Created</th>\n                                <th>Updated</th>\n                                <th>Views</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {posts.map(post => (\n                                <tr key={post.id} className={`${post.status === 'published' ? 'published' : 'draft'} ${selectedPosts.includes(post.id) ? 'selected' : ''}`}>\n                                    <td className=\"checkbox-cell\">\n                                        <input\n                                            type=\"checkbox\"\n                                            checked={selectedPosts.includes(post.id)}\n                                            onChange={() => handleSelectPost(post.id)}\n                                        />\n                                    </td>\n                                    <td className=\"post-title-cell\">\n                                        <div className=\"post-title-info\">\n                                            <h4>{post.title}</h4>\n                                            <p className=\"post-excerpt\">{post.excerpt}</p>\n                                        </div>\n                                    </td>\n                                    <td>\n                                        <span \n                                            className=\"category-badge enhanced\"\n                                            style={{ \n                                                backgroundColor: (post.category_color || '#6366f1') + '15',\n                                                borderColor: (post.category_color || '#6366f1') + '40',\n                                                color: post.category_color || '#6366f1'\n                                            }}\n                                        >\n                                            <div \n                                                className=\"category-dot\"\n                                                style={{ backgroundColor: post.category_color || '#6366f1' }}\n                                            ></div>\n                                            {post.category_name || 'Uncategorized'}\n                                        </span>\n                                    </td>\n                                    <td>\n                                        <button\n                                            className={`status-toggle enhanced ${post.status === 'published' ? 'published' : 'draft'}`}\n                                            onClick={() => handleTogglePublished(post)}\n                                            disabled={loading}\n                                        >\n                                            <div className={`status-dot ${post.status === 'published' ? 'published' : 'draft'}`}></div>\n                                            {post.status === 'published' ? 'Published' : 'Draft'}\n                                        </button>\n                                    </td>\n                                    <td className=\"date-cell\">\n                                        <div className=\"date-info\">\n                                            <span className=\"date\">{formatDate(post.created_at)}</span>\n                                            <span className=\"time\">{formatTime(post.created_at)}</span>\n                                        </div>\n                                    </td>\n                                    <td className=\"date-cell\">\n                                        <div className=\"date-info\">\n                                            <span className=\"date\">{formatDate(post.updated_at)}</span>\n                                            <span className=\"time relative\">{formatRelativeTime(post.updated_at)}</span>\n                                        </div>\n                                    </td>\n                                    <td className=\"views-cell\">\n                                        <div className=\"view-count\">\n                                            <span className=\"count\">{post.view_count || 0}</span>\n                                            <span className=\"label\">views</span>\n                                            <svg className=\"view-icon\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15 12a3 3 0 11-6 0 3 3 0 016 0z\" />\n                                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z\" />\n                                            </svg>\n                                            {showAnalytics && postAnalytics[post.id] && (\n                                                <div className=\"analytics-tooltip\">\n                                                    <small>Analytics loaded</small>\n                                                </div>\n                                            )}\n                                        </div>\n                                    </td>\n                                    <td className=\"actions-cell\">\n                                        <div className=\"post-actions\">\n                                            <button\n                                                className=\"action-btn edit\"\n                                                onClick={() => handleEditPost(post)}\n                                                title=\"Edit Post\"\n                                            >\n                                                <span>✏️</span>\n                                                <span>Edit</span>\n                                            </button>\n                                            {post.status === 'published' && (\n                                                <a\n                                                    href={`/#/blog/${post.slug}`}\n                                                    target=\"_blank\"\n                                                    className=\"action-btn view\"\n                                                    title=\"View Post\"\n                                                >\n                                                    <span>👁️</span>\n                                                    <span>View</span>\n                                                </a>\n                                            )}\n                                            <button\n                                                className=\"action-btn duplicate\"\n                                                onClick={() => handleDuplicatePost(post)}\n                                                title=\"Duplicate Post\"\n                                                disabled={loading}\n                                            >\n                                                <span>📋</span>\n                                                <span>Copy</span>\n                                            </button>\n                                            {showAnalytics && (\n                                                <button\n                                                    className=\"action-btn analytics\"\n                                                    onClick={() => loadPostAnalytics(post.id)}\n                                                    title=\"Load Analytics\"\n                                                >\n                                                    <span>📊</span>\n                                                    <span>Stats</span>\n                                                </button>\n                                            )}\n                                            <button\n                                                className=\"action-btn delete\"\n                                                onClick={() => handleDeletePost(post.id)}\n                                                title=\"Delete Post\"\n                                            >\n                                                <span>🗑️</span>\n                                                <span>Delete</span>\n                                            </button>\n                                        </div>\n                                    </td>\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n\n                    {posts.length === 0 && (\n                        <div className=\"no-posts\">\n                            <p>No posts found. Create your first post to get started!</p>\n                        </div>\n                    )}\n                </div>\n            )}\n\n            {/* Analytics Section */}\n            {showAnalytics && (\n                <div className=\"analytics-section\">\n                    <div className=\"analytics-header\">\n                        <h3>Post Analytics Overview</h3>\n                        <button \n                            onClick={() => setShowAnalytics(false)}\n                            className=\"btn btn-secondary\"\n                        >\n                            Hide Analytics\n                        </button>\n                    </div>\n                    <div className=\"analytics-grid\">\n                        <div className=\"analytics-card\">\n                            <h4>Total Posts with Analytics</h4>\n                            <div className=\"analytics-value\">\n                                {Object.keys(postAnalytics).length}\n                            </div>\n                        </div>\n                        <div className=\"analytics-card\">\n                            <h4>Average Views</h4>\n                            <div className=\"analytics-value\">\n                                {Object.keys(postAnalytics).length > 0 \n                                    ? Math.round(Object.values(postAnalytics).reduce((sum, analytics) => sum + (analytics.views || 0), 0) / Object.keys(postAnalytics).length)\n                                    : 0\n                                }\n                            </div>\n                        </div>\n                        <div className=\"analytics-card\">\n                            <h4>Total Engagement</h4>\n                            <div className=\"analytics-value\">\n                                {Object.values(postAnalytics).reduce((sum, analytics) => sum + (analytics.engagement || 0), 0)}\n                            </div>\n                        </div>\n                        <div className=\"analytics-card\">\n                            <h4>Analytics Last Updated</h4>\n                            <div className=\"analytics-value\">\n                                {new Date().toLocaleTimeString()}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            )}\n\n            {/* Pagination */}\n            {totalPages > 1 && (\n                <div className=\"pagination\">\n                    <button\n                        className=\"page-btn\"\n                        onClick={() => setCurrentPage(prev => Math.max(1, prev - 1))}\n                        disabled={currentPage === 1}\n                    >\n                        Previous\n                    </button>\n                    \n                    <div className=\"page-numbers\">\n                        {Array.from({ length: totalPages }, (_, i) => i + 1).map(page => (\n                            <button\n                                key={page}\n                                className={`page-btn ${page === currentPage ? 'active' : ''}`}\n                                onClick={() => setCurrentPage(page)}\n                            >\n                                {page}\n                            </button>\n                        ))}\n                    </div>\n                    \n                    <button\n                        className=\"page-btn\"\n                        onClick={() => setCurrentPage(prev => Math.min(totalPages, prev + 1))}\n                        disabled={currentPage === totalPages}\n                    >\n                        Next\n                    </button>\n                </div>\n            )}\n\n            {/* Export Modal */}\n            {showExportModal && (\n                <ExportModal\n                    isOpen={showExportModal}\n                    posts={posts}\n                    onClose={() => setShowExportModal(false)}\n                />\n            )}\n            </main>\n        </>\n    );\n};\n\n// Blog Editor Component\nconst BlogEditor = ({ post, categories, onClose, blogAPI, imageProcessor }) => {\n    const [formData, setFormData] = useState({\n        title: '',\n        slug: '',\n        excerpt: '',\n        content: '',\n        category_id: categories[0]?.id || '',\n        featured_image: '',\n        tags: '',\n        status: 'draft',\n        meta_title: '',\n        meta_description: ''\n    });\n    const [saving, setSaving] = useState(false);\n    const [processingImages, setProcessingImages] = useState(false);\n    const [slugManuallyEdited, setSlugManuallyEdited] = useState(false);\n    const [loading, setLoading] = useState(false);\n\n    // Load post data when editing\n    useEffect(() => {\n        if (post) {\n            console.log('Loading post data for editing:', post);\n            console.log('Post meta_title:', post.meta_title);\n            console.log('Post meta_description:', post.meta_description);\n            setLoading(true);\n            setFormData({\n                title: post.title || '',\n                slug: post.slug || '',\n                excerpt: post.excerpt || '',\n                content: post.content || '',\n                category_id: post.category_id || (categories[0]?.id || ''),\n                featured_image: post.featured_image_url || '',\n                tags: Array.isArray(post.tags) ? post.tags.join(', ') : (post.tags || ''),\n                status: post.status || 'draft',\n                meta_title: post.meta_title || '',\n                meta_description: post.meta_description || ''\n            });\n            setSlugManuallyEdited(!!post.slug);\n            setLoading(false);\n        } else {\n            // Reset form for new post\n            setFormData({\n                title: '',\n                slug: '',\n                excerpt: '',\n                content: '',\n                category_id: categories[0]?.id || '',\n                featured_image: '',\n                tags: '',\n                status: 'draft',\n                meta_title: '',\n                meta_description: ''\n            });\n            setSlugManuallyEdited(false);\n        }\n    }, [post, categories]);\n\n    // Auto-generate slug from title\n    useEffect(() => {\n        if (!slugManuallyEdited && formData.title) {\n            const autoSlug = formData.title\n                .toLowerCase()\n                .replace(/[^a-z0-9\\s-]/g, '')\n                .replace(/\\s+/g, '-')\n                .replace(/-+/g, '-')\n                .trim();\n            setFormData(prev => ({ ...prev, slug: autoSlug }));\n        }\n    }, [formData.title, slugManuallyEdited]);\n\n    const handleInputChange = (field, value) => {\n        setFormData(prev => ({ ...prev, [field]: value }));\n        \n        if (field === 'slug') {\n            setSlugManuallyEdited(true);\n        }\n    };\n\n    const handleContentChange = async (content) => {\n        // Store cursor position before processing\n        const textarea = document.getElementById('content-editor');\n        const cursorPosition = textarea ? textarea.selectionStart : 0;\n        \n        // Update content immediately to prevent cursor jumping\n        setFormData(prev => ({ ...prev, content }));\n        \n        setProcessingImages(true);\n        try {\n            // Process any image URLs in the content\n            const processedContent = await imageProcessor.processContentImages(content);\n            // Only update if content actually changed during processing\n            if (processedContent !== content) {\n                setFormData(prev => ({ ...prev, content: processedContent }));\n                // Restore cursor position after processing\n                setTimeout(() => {\n                    if (textarea) {\n                        textarea.focus();\n                        textarea.setSelectionRange(cursorPosition, cursorPosition);\n                    }\n                }, 0);\n            }\n        } catch (err) {\n            console.error('Error processing images:', err);\n            // Content is already set above, no need to set again\n        } finally {\n            setProcessingImages(false);\n        }\n    };\n\n    const handleSave = async (publishNow = false) => {\n        // Validation\n        if (!formData.title.trim()) {\n            alert('Please enter a title');\n            return;\n        }\n\n        if (!formData.content.trim()) {\n            alert('Please enter some content');\n            return;\n        }\n\n        // Prevent multiple simultaneous saves\n        if (saving) {\n            console.log('Save already in progress, ignoring duplicate request');\n            return;\n        }\n\n        setSaving(true);\n        console.log(`Starting ${publishNow ? 'publish' : 'save'} operation...`);\n        \n        try {\n            // Verify user authentication before proceeding\n            const { data: { user }, error: authError } = await supabase.auth.getUser();\n            if (authError || !user) {\n                throw new Error('Authentication required. Please sign in again.');\n            }\n\n            // Verify admin status\n            const isUserAdmin = await BlogAPI.isAdmin();\n            if (!isUserAdmin) {\n                throw new Error('Admin privileges required to save posts.');\n            }\n\n            // Clean and format content\n            const cleanContent = formData.content\n                .replace(/\\n{3,}/g, '\\n\\n') // Remove excessive line breaks\n                .trim();\n\n            const postData = {\n                ...formData,\n                content: cleanContent,\n                featured_image_url: formData.featured_image, // Map to correct database field\n                tags: formData.tags.split(',').map(tag => tag.trim()).filter(Boolean),\n                status: publishNow ? 'published' : (formData.status || 'draft'),\n                // Ensure meta fields are included\n                meta_title: formData.meta_title || formData.title,\n                meta_description: formData.meta_description || formData.excerpt\n            };\n            delete postData.featured_image; // Remove the form field name\n\n            console.log('Saving post data:', { ...postData, content: '[content truncated]' });\n\n            let result;\n            const startTime = Date.now();\n            \n            if (post) {\n                console.log('Updating existing post:', post.id);\n                result = await Promise.race([\n                    BlogAPI.updatePost(post.id, postData),\n                    new Promise((_, reject) => \n                        setTimeout(() => reject(new Error('Save operation timed out')), 30000)\n                    )\n                ]);\n            } else {\n                console.log('Creating new post');\n                result = await Promise.race([\n                    BlogAPI.createPost(postData),\n                    new Promise((_, reject) => \n                        setTimeout(() => reject(new Error('Save operation timed out')), 30000)\n                    )\n                ]);\n            }\n\n            const duration = Date.now() - startTime;\n            console.log(`Save operation completed in ${duration}ms`);\n\n            if (!result) {\n                throw new Error('No response received from server');\n            }\n\n            if (result.error) {\n                throw new Error(result.error.message || 'Failed to save post');\n            }\n\n            console.log('Post saved successfully:', result.id);\n            alert(publishNow ? 'Post published successfully!' : 'Post saved as draft!');\n            onClose();\n        } catch (err) {\n            console.error('Error saving post:', err);\n            \n            // Provide more specific error messages\n            let errorMessage = err.message;\n            if (err.message.includes('timeout')) {\n                errorMessage = 'The save operation timed out. Please check your connection and try again.';\n            } else if (err.message.includes('Authentication')) {\n                errorMessage = 'Please sign in again to continue.';\n            } else if (err.message.includes('Admin privileges')) {\n                errorMessage = 'You need admin privileges to save posts.';\n            }\n            \n            alert(`Failed to ${publishNow ? 'publish' : 'save'} post: ${errorMessage}`);\n        } finally {\n            setSaving(false);\n            console.log('Save operation finished, saving state reset');\n        }\n    };\n\n    if (loading) {\n        return (\n            <div className=\"editor-modal\">\n                <div className=\"editor-container\">\n                    <div className=\"loading-container\">\n                        <div className=\"loading-spinner\"></div>\n                        <p>Loading post data...</p>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"editor-modal\">\n            <div className=\"editor-container\">\n                <div className=\"editor-header\">\n                    <h2>{post ? 'Edit Post' : 'Create New Post'}</h2>\n                    <button className=\"close-btn\" onClick={onClose} disabled={saving}>\n                        ×\n                    </button>\n                </div>\n\n                <div className=\"editor-form\">\n                    <div className=\"form-grid\">\n                        <div className=\"form-group\">\n                            <label htmlFor=\"title\">Title *</label>\n                            <input\n                                id=\"title\"\n                                type=\"text\"\n                                value={formData.title}\n                                onChange={(e) => handleInputChange('title', e.target.value)}\n                                placeholder=\"Enter post title...\"\n                                className=\"form-input\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"slug\">URL Slug</label>\n                            <input\n                                id=\"slug\"\n                                type=\"text\"\n                                value={formData.slug}\n                                onChange={(e) => handleInputChange('slug', e.target.value)}\n                                placeholder=\"url-friendly-slug\"\n                                className=\"form-input\"\n                            />\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"category\">Category</label>\n                            <select\n                                id=\"category\"\n                                value={formData.category_id}\n                                onChange={(e) => handleInputChange('category_id', e.target.value)}\n                                className=\"form-select\"\n                            >\n                                {categories.map(category => (\n                                    <option key={category.id} value={category.id}>\n                                        {category.name}\n                                    </option>\n                                ))}\n                            </select>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"status\">Status</label>\n                            <select\n                                id=\"status\"\n                                value={formData.status}\n                                onChange={(e) => handleInputChange('status', e.target.value)}\n                                className=\"form-select status-select\"\n                            >\n                                <option value=\"draft\">Draft</option>\n                                <option value=\"published\">Published</option>\n                            </select>\n                        </div>\n\n                        <div className=\"form-group full-width\">\n                            <label htmlFor=\"excerpt\">Excerpt</label>\n                            <textarea\n                                id=\"excerpt\"\n                                value={formData.excerpt}\n                                onChange={(e) => handleInputChange('excerpt', e.target.value)}\n                                placeholder=\"Brief description of the post...\"\n                                className=\"form-textarea\"\n                                rows=\"3\"\n                            />\n                        </div>\n\n                        <div className=\"form-group full-width\">\n                            <label htmlFor=\"featured-image\">Featured Image URL</label>\n                            <input\n                                id=\"featured-image\"\n                                type=\"url\"\n                                value={formData.featured_image}\n                                onChange={(e) => handleInputChange('featured_image', e.target.value)}\n                                placeholder=\"https://example.com/image.jpg\"\n                                className=\"form-input\"\n                            />\n                            {formData.featured_image && (\n                                <div className=\"image-preview\" style={{marginTop: '0.5rem'}}>\n                                    <img \n                                        src={formData.featured_image} \n                                        alt=\"Featured image preview\" \n                                        style={{maxWidth: '200px', maxHeight: '120px', borderRadius: '8px', objectFit: 'cover'}}\n                                    />\n                                </div>\n                            )}\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"tags\">Tags</label>\n                            <input\n                                id=\"tags\"\n                                type=\"text\"\n                                value={formData.tags}\n                                onChange={(e) => handleInputChange('tags', e.target.value)}\n                                placeholder=\"tag1, tag2, tag3\"\n                                className=\"form-input\"\n                            />\n                            <small style={{color: 'var(--text-secondary)', fontSize: '0.8rem'}}>Separate tags with commas</small>\n                        </div>\n\n                        <div className=\"form-group\">\n                            <label htmlFor=\"meta-title\">SEO Title</label>\n                            <input\n                                id=\"meta-title\"\n                                type=\"text\"\n                                value={formData.meta_title}\n                                onChange={(e) => handleInputChange('meta_title', e.target.value)}\n                                placeholder=\"SEO optimized title...\"\n                                className=\"form-input\"\n                            />\n                        </div>\n\n                        <div className=\"form-group full-width\">\n                            <label htmlFor=\"meta-description\">SEO Description</label>\n                            <textarea\n                                id=\"meta-description\"\n                                value={formData.meta_description}\n                                onChange={(e) => handleInputChange('meta_description', e.target.value)}\n                                placeholder=\"SEO meta description...\"\n                                className=\"form-textarea\"\n                                rows=\"2\"\n                            />\n                        </div>\n\n                        <div className=\"form-group full-width\">\n                            <label htmlFor=\"content\">Content *</label>\n                            {processingImages && (\n                                <div style={{padding: '0.5rem', background: 'var(--bg-tertiary)', borderRadius: '8px', marginBottom: '0.5rem', color: 'var(--text-secondary)'}}>\n                                    Processing images... Please wait.\n                                </div>\n                            )}\n                            <ContentEditor\n                                value={formData.content}\n                                onChange={handleContentChange}\n                                disabled={processingImages}\n                            />\n                            <MarkdownGuide />\n                        </div>\n                    </div>\n\n                    <div className=\"form-actions\">\n                        <button \n                            className=\"form-btn secondary\" \n                            onClick={onClose} \n                            disabled={saving}\n                        >\n                            Cancel\n                        </button>\n                        <button \n                            className=\"form-btn secondary\" \n                            onClick={() => handleSave(false)}\n                            disabled={saving || processingImages}\n                        >\n                            {saving ? 'Saving...' : 'Save Draft'}\n                        </button>\n                        <button \n                            className=\"form-btn primary\" \n                            onClick={() => handleSave(true)}\n                            disabled={saving || processingImages}\n                        >\n                            {saving ? 'Publishing...' : 'Publish'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n// Simple Content Editor Component\nconst ContentEditor = ({ value, onChange, disabled }) => {\n    const [isPreview, setIsPreview] = useState(false);\n    const [fullscreen, setFullscreen] = useState(false);\n    const [showMovieSearch, setShowMovieSearch] = useState(false);\n    const [movieSearchQuery, setMovieSearchQuery] = useState('');\n    const [movieSearchResults, setMovieSearchResults] = useState([]);\n    const [searchingMovies, setSearchingMovies] = useState(false);\n\n    const handleChange = (e) => {\n        if (!disabled) {\n            onChange(e.target.value);\n        }\n    };\n\n    const insertMarkdown = (before, after = '') => {\n        const textarea = document.getElementById('content-editor');\n        if (!textarea) return;\n        \n        const start = textarea.selectionStart;\n        const end = textarea.selectionEnd;\n        const selectedText = value.substring(start, end);\n        const newText = value.substring(0, start) + before + selectedText + after + value.substring(end);\n        onChange(newText);\n        \n        // Restore cursor position\n        setTimeout(() => {\n            textarea.focus();\n            textarea.setSelectionRange(start + before.length, end + before.length);\n        }, 0);\n    };\n\n    const insertTemplate = (template) => {\n        const templates = {\n            table: '| Header 1 | Header 2 | Header 3 |\\n|----------|----------|----------|\\n| Cell 1   | Cell 2   | Cell 3   |\\n| Cell 4   | Cell 5   | Cell 6   |',\n            codeblock: '```javascript\\n// Your code here\\nconsole.log(\"Hello World!\");\\n```',\n            quote: '> This is a blockquote\\n> It can span multiple lines',\n            list: '- Item 1\\n- Item 2\\n- Item 3',\n            numberedList: '1. First item\\n2. Second item\\n3. Third item'\n        };\n        \n        const textarea = document.getElementById('content-editor');\n        if (!textarea) return;\n        \n        const start = textarea.selectionStart;\n        const newText = value.substring(0, start) + templates[template] + value.substring(start);\n        onChange(newText);\n        \n        setTimeout(() => {\n            textarea.focus();\n            textarea.setSelectionRange(start + templates[template].length, start + templates[template].length);\n        }, 0);\n    };\n\n    const searchMovies = async (query) => {\n        if (!query.trim()) return;\n        \n        setSearchingMovies(true);\n        try {\n            // Import API_BASE_URL at the top of the file\n            const { API_BASE_URL } = await import('../config.js');\n            const response = await fetch(`${API_BASE_URL}/tmdb/search/movie?query=${encodeURIComponent(query)}&language=en-US`);\n            const data = await response.json();\n            setMovieSearchResults(data.results || []);\n        } catch (error) {\n            console.error('Movie search error:', error);\n            setMovieSearchResults([]);\n        } finally {\n            setSearchingMovies(false);\n        }\n    };\n\n    const insertMovieLink = (movie) => {\n        const movieTitle = movie.title || movie.name;\n        const movieUrl = `/movie/${movie.id}`; // Remove the # to avoid duplication\n        const linkText = `[${movieTitle}](${movieUrl})`;\n        \n        const textarea = document.getElementById('content-editor');\n        if (!textarea) return;\n        \n        const start = textarea.selectionStart;\n        const newText = value.substring(0, start) + linkText + value.substring(start);\n        onChange(newText);\n        \n        // Close modal and reset\n        setShowMovieSearch(false);\n        setMovieSearchQuery('');\n        setMovieSearchResults([]);\n        \n        setTimeout(() => {\n            textarea.focus();\n            textarea.setSelectionRange(start + linkText.length, start + linkText.length);\n        }, 0);\n    };\n\n    const renderPreview = (content) => {\n        if (!content) return '';\n        \n        // Enhanced markdown rendering\n        return content\n            // Code blocks\n            .replace(/```([\\s\\S]*?)```/g, '<pre><code>$1</code></pre>')\n            // Inline code\n            .replace(/`([^`]+)`/g, '<code>$1</code>')\n            // Bold\n            .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n            // Italic\n            .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n            // Headings\n            .replace(/^#### (.*$)/gim, '<h4>$1</h4>')\n            .replace(/^### (.*$)/gim, '<h3>$1</h3>')\n            .replace(/^## (.*$)/gim, '<h2>$1</h2>')\n            .replace(/^# (.*$)/gim, '<h1>$1</h1>')\n            // Links\n            .replace(/\\[([^\\]]+)\\]\\(([^)]+)\\)/g, '<a href=\"$2\" target=\"_blank\" rel=\"noopener noreferrer\">$1</a>')\n            // Images\n            .replace(/!\\[([^\\]]*)\\]\\(([^)]+)\\)/g, '<img src=\"$2\" alt=\"$1\" style=\"max-width: 100%; height: auto;\" />')\n            // Blockquotes\n            .replace(/^> (.*$)/gim, '<blockquote>$1</blockquote>')\n            // Unordered lists\n            .replace(/^- (.*$)/gim, '<li>$1</li>')\n            .replace(/(<li>.*<\\/li>)/s, '<ul>$1</ul>')\n            // Ordered lists\n            .replace(/^\\d+\\. (.*$)/gim, '<li>$1</li>')\n            // Horizontal rule\n            .replace(/^---$/gim, '<hr>')\n            // Line breaks\n            .replace(/\\n/g, '<br>');\n    };\n\n    return (\n        <div className={`content-editor ${fullscreen ? 'fullscreen' : ''}`}>\n            <div className=\"editor-toolbar\">\n                <div className=\"toolbar-group\">\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertMarkdown('**', '**')} title=\"Bold\">\n                        <span>𝐁</span>\n                    </button>\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertMarkdown('*', '*')} title=\"Italic\">\n                        <span>𝐼</span>\n                    </button>\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertMarkdown('`', '`')} title=\"Inline Code\">\n                        <span>&lt;/&gt;</span>\n                    </button>\n                </div>\n                \n                <div className=\"toolbar-divider\"></div>\n                \n                <div className=\"toolbar-group\">\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertMarkdown('# ')} title=\"Heading 1\">\n                        <span>H1</span>\n                    </button>\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertMarkdown('## ')} title=\"Heading 2\">\n                        <span>H2</span>\n                    </button>\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertMarkdown('### ')} title=\"Heading 3\">\n                        <span>H3</span>\n                    </button>\n                </div>\n                \n                <div className=\"toolbar-divider\"></div>\n                \n                <div className=\"toolbar-group\">\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertMarkdown('[', '](url)')} title=\"Link\">\n                        <span>🔗</span>\n                    </button>\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => setShowMovieSearch(true)} title=\"Add Movie Link\">\n                        <span>🎬</span>\n                    </button>\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertMarkdown('![alt](', ')')} title=\"Image\">\n                        <span>🖼️</span>\n                    </button>\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertTemplate('quote')} title=\"Quote\">\n                        <span>❝</span>\n                    </button>\n                </div>\n                \n                <div className=\"toolbar-divider\"></div>\n                \n                <div className=\"toolbar-group\">\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertTemplate('list')} title=\"Bullet List\">\n                        <span>•</span>\n                    </button>\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertTemplate('numberedList')} title=\"Numbered List\">\n                        <span>1.</span>\n                    </button>\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertTemplate('table')} title=\"Table\">\n                        <span>⊞</span>\n                    </button>\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => insertTemplate('codeblock')} title=\"Code Block\">\n                        <span>{ }</span>\n                    </button>\n                </div>\n                \n                <div className=\"toolbar-divider\"></div>\n                \n                <div className=\"toolbar-group\">\n                    <button type=\"button\" className=\"toolbar-btn\" onClick={() => setFullscreen(!fullscreen)} title=\"Toggle Fullscreen\">\n                        <span>{fullscreen ? '⤓' : '⤢'}</span>\n                    </button>\n                </div>\n                \n                <div className=\"toolbar-divider\"></div>\n                \n                <button \n                    type=\"button\" \n                    className={`toolbar-btn ${isPreview ? 'active' : ''}`}\n                    onClick={() => setIsPreview(!isPreview)}\n                    title=\"Toggle Preview\"\n                >\n                    <span>{isPreview ? '✏️' : '👁️'}</span>\n                    <span>{isPreview ? 'Edit' : 'Preview'}</span>\n                </button>\n            </div>\n            \n            <div className=\"editor-content\">\n                {!isPreview ? (\n                    <textarea\n                        id=\"content-editor\"\n                        className=\"editor-textarea\"\n                        value={value}\n                        onChange={handleChange}\n                        disabled={disabled}\n                        placeholder=\"Write your blog post content in Markdown...\\n\\n# Example Heading\\n\\nThis is a paragraph with **bold** and *italic* text.\\n\\n- Bullet point 1\\n- Bullet point 2\\n\\n```javascript\\nconst example = 'code block';\\n```\\n\\n> This is a blockquote\"\n                    />\n                ) : (\n                    <div \n                        className=\"editor-preview\"\n                        dangerouslySetInnerHTML={{ __html: renderPreview(value) }}\n                    />\n                )}\n            </div>\n            \n            {/* Movie Search Modal */}\n            {showMovieSearch && (\n                <div className=\"movie-search-modal\">\n                    <div className=\"movie-search-content\">\n                        <div className=\"movie-search-header\">\n                            <h3>🎬 Search Movies</h3>\n                            <button \n                                className=\"close-btn\" \n                                onClick={() => {\n                                    setShowMovieSearch(false);\n                                    setMovieSearchQuery('');\n                                    setMovieSearchResults([]);\n                                }}\n                            >\n                                ×\n                            </button>\n                        </div>\n                        \n                        <div className=\"movie-search-form\">\n                            <input\n                                type=\"text\"\n                                placeholder=\"Search for a movie...\"\n                                value={movieSearchQuery}\n                                onChange={(e) => setMovieSearchQuery(e.target.value)}\n                                onKeyPress={(e) => {\n                                    if (e.key === 'Enter') {\n                                        searchMovies(movieSearchQuery);\n                                    }\n                                }}\n                                autoFocus\n                            />\n                            <button \n                                onClick={() => searchMovies(movieSearchQuery)}\n                                disabled={searchingMovies || !movieSearchQuery.trim()}\n                            >\n                                {searchingMovies ? 'Searching...' : 'Search'}\n                            </button>\n                        </div>\n                        \n                        <div className=\"movie-search-results\">\n                            {searchingMovies && (\n                                <div className=\"loading-message\">Searching movies...</div>\n                            )}\n                            \n                            {movieSearchResults.length > 0 && (\n                                <div className=\"movie-results-list\">\n                                    {movieSearchResults.map((movie) => (\n                                        <div \n                                            key={movie.id} \n                                            className=\"movie-result-item\"\n                                            onClick={() => insertMovieLink(movie)}\n                                        >\n                                            <div className=\"movie-poster\">\n                                                {movie.poster_path ? (\n                                                    <img \n                                                        src={`https://image.tmdb.org/t/p/w92${movie.poster_path}`} \n                                                        alt={movie.title}\n                                                    />\n                                                ) : (\n                                                    <div className=\"no-poster\">🎬</div>\n                                                )}\n                                            </div>\n                                            <div className=\"movie-info\">\n                                                <h4>{movie.title}</h4>\n                                                <p className=\"movie-year\">\n                                                    {movie.release_date ? new Date(movie.release_date).getFullYear() : 'Unknown'}\n                                                </p>\n                                                <p className=\"movie-overview\">\n                                                    {movie.overview ? movie.overview.substring(0, 150) + '...' : 'No description available'}\n                                                </p>\n                                            </div>\n                                        </div>\n                                    ))}\n                                </div>\n                            )}\n                            \n                            {!searchingMovies && movieSearchQuery && movieSearchResults.length === 0 && (\n                                <div className=\"no-results\">No movies found. Try a different search term.</div>\n                            )}\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\nconst MarkdownGuide = () => {\n    const [isOpen, setIsOpen] = useState(false);\n    \n    return (\n        <div className=\"markdown-guide\">\n            <button \n                type=\"button\" \n                className=\"guide-toggle\"\n                onClick={() => setIsOpen(!isOpen)}\n            >\n                📖 Markdown Guide\n            </button>\n            \n            {isOpen && (\n                <div className=\"guide-content\">\n                    <h3>Markdown Quick Reference</h3>\n                    <div className=\"guide-grid\">\n                        <div className=\"guide-item\">\n                            <strong>Headers:</strong>\n                            <code># H1 ## H2 ### H3</code>\n                        </div>\n                        <div className=\"guide-item\">\n                            <strong>Emphasis:</strong>\n                            <code>**bold** *italic*</code>\n                        </div>\n                        <div className=\"guide-item\">\n                            <strong>Links:</strong>\n                            <code>[text](url)</code>\n                        </div>\n                        <div className=\"guide-item\">\n                            <strong>Images:</strong>\n                            <code>![alt](url)</code>\n                        </div>\n                        <div className=\"guide-item\">\n                            <strong>Code:</strong>\n                            <code>`inline` ```block```</code>\n                        </div>\n                        <div className=\"guide-item\">\n                            <strong>Lists:</strong>\n                            <code>- item or 1. item</code>\n                        </div>\n                        <div className=\"guide-item\">\n                            <strong>Quote:</strong>\n                            <code>&gt; blockquote</code>\n                        </div>\n                        <div className=\"guide-item\">\n                            <strong>Table:</strong>\n                            <code>| col1 | col2 |</code>\n                        </div>\n                    </div>\n                </div>\n            )}\n        </div>\n    );\n};\n\n// Export functionality\nconst ExportModal = ({ isOpen, onClose, posts }) => {\n    const [exportFormat, setExportFormat] = useState('json');\n    const [selectedPosts, setSelectedPosts] = useState([]);\n    const [exporting, setExporting] = useState(false);\n    \n    // Reset state when modal opens\n    useEffect(() => {\n        if (isOpen) {\n            setSelectedPosts([]);\n            setExporting(false);\n        }\n    }, [isOpen]);\n    \n    const handleExport = async () => {\n        setExporting(true);\n        try {\n            const postsToExport = selectedPosts.length > 0 \n                ? posts.filter(post => selectedPosts.includes(post.id))\n                : posts;\n            \n            let content, filename, mimeType;\n            \n            switch (exportFormat) {\n                case 'json':\n                    content = JSON.stringify(postsToExport, null, 2);\n                    filename = `blog-posts-${new Date().toISOString().split('T')[0]}.json`;\n                    mimeType = 'application/json';\n                    break;\n                case 'csv':\n                    const headers = ['Title', 'Slug', 'Status', 'Category', 'Created', 'Updated'];\n                    const rows = postsToExport.map(post => [\n                        post.title || '',\n                        post.slug || '',\n                        post.status || '',\n                        post.category_name || 'Uncategorized',\n                        post.created_at || '',\n                        post.updated_at || ''\n                    ]);\n                    content = [headers, ...rows].map(row => row.map(cell => `\"${String(cell).replace(/\"/g, '\"\"')}\"`).join(',')).join('\\n');\n                    filename = `blog-posts-${new Date().toISOString().split('T')[0]}.csv`;\n                    mimeType = 'text/csv';\n                    break;\n                case 'markdown':\n                    content = postsToExport.map(post => \n                        `# ${post.title || 'Untitled'}\\n\\n**Status:** ${post.status || 'draft'}\\n**Created:** ${post.created_at || 'Unknown'}\\n**Category:** ${post.category_name || 'Uncategorized'}\\n\\n${post.excerpt ? `**Excerpt:** ${post.excerpt}\\n\\n` : ''}${post.content || 'No content'}\\n\\n---\\n\\n`\n                    ).join('');\n                    filename = `blog-posts-${new Date().toISOString().split('T')[0]}.md`;\n                    mimeType = 'text/markdown';\n                    break;\n            }\n            \n            const blob = new Blob([content], { type: mimeType });\n            const url = URL.createObjectURL(blob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = filename;\n            document.body.appendChild(a);\n            a.click();\n            document.body.removeChild(a);\n            URL.revokeObjectURL(url);\n            \n            onClose();\n        } catch (error) {\n            console.error('Export failed:', error);\n            alert('Export failed: ' + error.message);\n        } finally {\n            setExporting(false);\n        }\n    };\n    \n    if (!isOpen) return null;\n    \n    return (\n        <div className=\"export-modal\">\n            <div className=\"export-content\">\n                <div className=\"export-header\">\n                    <h3>Export Blog Posts</h3>\n                    <button className=\"close-btn\" onClick={onClose}>×</button>\n                </div>\n                \n                <div className=\"export-form\">\n                    <div className=\"form-group\">\n                        <label>Export Format:</label>\n                        <select \n                            value={exportFormat} \n                            onChange={(e) => setExportFormat(e.target.value)}\n                            className=\"form-select\"\n                        >\n                            <option value=\"json\">JSON</option>\n                            <option value=\"csv\">CSV</option>\n                            <option value=\"markdown\">Markdown</option>\n                        </select>\n                    </div>\n                    \n                    <div className=\"form-group\">\n                        <label>Posts to Export:</label>\n                        <div className=\"export-options\">\n                            <label className=\"checkbox-label\">\n                                <input \n                                    type=\"radio\" \n                                    name=\"exportSelection\" \n                                    checked={selectedPosts.length === 0}\n                                    onChange={() => setSelectedPosts([])}\n                                />\n                                All Posts ({posts.length})\n                            </label>\n                            <label className=\"checkbox-label\">\n                                <input \n                                    type=\"radio\" \n                                    name=\"exportSelection\" \n                                    checked={selectedPosts.length > 0}\n                                    onChange={() => setSelectedPosts(posts.map(p => p.id))}\n                                />\n                                Selected Posts\n                            </label>\n                        </div>\n                    </div>\n                    \n                    <div className=\"export-actions\">\n                        <button \n                            className=\"form-btn secondary\" \n                            onClick={onClose}\n                            disabled={exporting}\n                        >\n                            Cancel\n                        </button>\n                        <button \n                            className=\"form-btn primary\" \n                            onClick={handleExport}\n                            disabled={exporting}\n                        >\n                            {exporting ? 'Exporting...' : 'Export'}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n};\n\n// Updated toolbar with export functionality\nconst AdminToolbar = ({ onCreatePost, onRefresh, onExport, refreshing, stats }) => {\n    return (\n        <div className=\"admin-toolbar\">\n            <div className=\"toolbar-left\">\n                <div className=\"admin-stats\">\n                    {stats && (\n                        <>\n                            <div className=\"stat-item\">\n                                <span className=\"stat-number\">{stats.total || 0}</span>\n                                <span className=\"stat-label\">Total Posts</span>\n                            </div>\n                            <div className=\"stat-item\">\n                                <span className=\"stat-number\">{stats.published || 0}</span>\n                                <span className=\"stat-label\">Published</span>\n                            </div>\n                            <div className=\"stat-item\">\n                                <span className=\"stat-number\">{stats.drafts || 0}</span>\n                                <span className=\"stat-label\">Drafts</span>\n                            </div>\n                        </>\n                    )}\n                </div>\n            </div>\n            \n            <div className=\"toolbar-right\">\n                <button \n                    className=\"refresh-btn\"\n                    onClick={onRefresh}\n                    disabled={refreshing}\n                    title=\"Refresh Posts\"\n                >\n                    <span className={`icon ${refreshing ? 'spinning' : ''}`}>🔄</span>\n                    <span>Refresh</span>\n                </button>\n                \n                <button \n                    className=\"export-btn\"\n                    onClick={onExport}\n                    title=\"Export Posts\"\n                >\n                    <span className=\"icon\">📥</span>\n                    <span>Export</span>\n                </button>\n                \n                <button \n                    className=\"create-post-btn\"\n                    onClick={onCreatePost}\n                >\n                    <span className=\"icon\">✏️</span>\n                    <span>Create Post</span>\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default BlogAdmin;"],"file":"assets/BlogAdmin-RNCIa1Mu.js"}