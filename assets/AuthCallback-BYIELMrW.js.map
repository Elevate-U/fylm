{"version":3,"file":"AuthCallback-BYIELMrW.js","sources":["../../src/pages/AuthCallback.jsx"],"sourcesContent":["import { h } from 'preact';\nimport { useEffect, useState } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport { supabase } from '../supabase';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport toast from '../components/Toast';\nimport './AuthCallback.css';\n\nfunction AuthCallback() {\n  const [status, setStatus] = useState('processing'); // processing, success, error\n  const [message, setMessage] = useState('Processing authentication...');\n\n  useEffect(() => {\n    let timeoutId;\n    \n    const handleAuthCallback = async () => {\n      // Safety timeout - if callback takes more than 10 seconds, force error state\n      timeoutId = setTimeout(() => {\n        console.error('⚠️ Auth callback timeout');\n        setStatus('error');\n        setMessage('Authentication is taking too long. Please try again.');\n        toast.error('Authentication timeout. Redirecting...');\n        setTimeout(() => route('/login', true), 2000);\n      }, 10000);\n      \n      try {\n        // Get the current URL hash parameters\n        const hashParams = new URLSearchParams(window.location.hash.substring(1));\n        const accessToken = hashParams.get('access_token');\n        const refreshToken = hashParams.get('refresh_token');\n        const type = hashParams.get('type');\n        const error = hashParams.get('error');\n        const errorDescription = hashParams.get('error_description');\n\n        // Check for errors first\n        if (error) {\n          clearTimeout(timeoutId);\n          console.error('Auth callback error:', error, errorDescription);\n          setStatus('error');\n          setMessage(errorDescription || error);\n          toast.error(errorDescription || error);\n          setTimeout(() => route('/login', true), 3000);\n          return;\n        }\n\n        // Handle different auth types\n        if (type === 'signup' || type === 'email_confirmation') {\n          if (accessToken && refreshToken) {\n            console.log('📧 Setting session from email confirmation...');\n            \n            // Add timeout to setSession call\n            const sessionPromise = supabase.auth.setSession({\n              access_token: accessToken,\n              refresh_token: refreshToken\n            });\n            \n            const sessionTimeoutPromise = new Promise((_, reject) => {\n              setTimeout(() => reject(new Error('Session setup timeout')), 8000);\n            });\n            \n            const { data, error: sessionError } = await Promise.race([\n              sessionPromise,\n              sessionTimeoutPromise\n            ]);\n\n            if (sessionError) {\n              clearTimeout(timeoutId);\n              console.error('Session error:', sessionError);\n              setStatus('error');\n              setMessage('Failed to confirm email. Please try again.');\n              toast.error('Failed to confirm email. Please try again.');\n              setTimeout(() => route('/login', true), 3000);\n              return;\n            }\n\n            if (data.user) {\n              clearTimeout(timeoutId);\n              console.log('✅ Email confirmed successfully');\n              setStatus('success');\n              setMessage('Email confirmed successfully! Redirecting...');\n              toast.success('Email confirmed successfully!');\n              \n              // Clear the hash from URL\n              window.location.hash = '';\n              \n              // Give Auth context time to update before redirecting\n              await new Promise(resolve => setTimeout(resolve, 500));\n              \n              // Redirect to home page\n              setTimeout(() => route('/', true), 1500);\n            } else {\n              clearTimeout(timeoutId);\n              setStatus('error');\n              setMessage('Authentication failed. Please try logging in.');\n              setTimeout(() => route('/login', true), 3000);\n            }\n          } else {\n            clearTimeout(timeoutId);\n            setStatus('error');\n            setMessage('Invalid confirmation link. Please try again.');\n            setTimeout(() => route('/login', true), 3000);\n          }\n        } else if (type === 'recovery' || type === 'password_recovery') {\n          // Handle password recovery\n          if (accessToken && refreshToken) {\n            const sessionPromise = supabase.auth.setSession({\n              access_token: accessToken,\n              refresh_token: refreshToken\n            });\n            \n            const sessionTimeoutPromise = new Promise((_, reject) => {\n              setTimeout(() => reject(new Error('Recovery session timeout')), 8000);\n            });\n            \n            const { error: sessionError } = await Promise.race([\n              sessionPromise,\n              sessionTimeoutPromise\n            ]);\n\n            if (sessionError) {\n              clearTimeout(timeoutId);\n              console.error('Recovery session error:', sessionError);\n              setStatus('error');\n              setMessage('Invalid recovery link. Please try again.');\n              setTimeout(() => route('/forgot-password', true), 3000);\n              return;\n            }\n\n            clearTimeout(timeoutId);\n            setStatus('success');\n            setMessage('Recovery link verified! Redirecting to update password...');\n            setTimeout(() => route('/update-password', true), 2000);\n          } else {\n            clearTimeout(timeoutId);\n            setStatus('error');\n            setMessage('Invalid recovery link. Please try again.');\n            setTimeout(() => route('/forgot-password', true), 3000);\n          }\n        } else {\n          // Handle other auth types or fallback\n          const sessionPromise = supabase.auth.getSession();\n          const sessionTimeoutPromise = new Promise((_, reject) => {\n            setTimeout(() => reject(new Error('Session check timeout')), 5000);\n          });\n          \n          const { data, error: sessionError } = await Promise.race([\n            sessionPromise,\n            sessionTimeoutPromise\n          ]);\n          \n          if (sessionError) {\n            clearTimeout(timeoutId);\n            console.error('Session check error:', sessionError);\n            setStatus('error');\n            setMessage('Authentication failed. Please try logging in.');\n            setTimeout(() => route('/login', true), 3000);\n            return;\n          }\n\n          if (data.session) {\n            clearTimeout(timeoutId);\n            setStatus('success');\n            setMessage('Authentication successful! Redirecting...');\n            toast.success('Authentication successful!');\n            setTimeout(() => route('/', true), 2000);\n          } else {\n            clearTimeout(timeoutId);\n            setStatus('error');\n            setMessage('No active session found. Please try logging in.');\n            setTimeout(() => route('/login', true), 3000);\n          }\n        }\n      } catch (error) {\n        clearTimeout(timeoutId);\n        console.error('Auth callback error:', error);\n        setStatus('error');\n        setMessage(error.message.includes('timeout') \n          ? 'Authentication is taking too long. Please check your connection and try again.'\n          : 'An unexpected error occurred. Please try again.');\n        toast.error('Authentication failed. Please try again.');\n        setTimeout(() => route('/login', true), 3000);\n      }\n    };\n\n    handleAuthCallback();\n    \n    return () => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n      }\n    };\n  }, []);\n\n  return (\n    <div className=\"auth-callback-container\">\n      <div className=\"auth-callback-content\">\n        {status === 'processing' && (\n          <>\n            <LoadingSpinner />\n            <h2>Processing Authentication</h2>\n            <p>{message}</p>\n          </>\n        )}\n        \n        {status === 'success' && (\n          <>\n            <div className=\"success-icon\">✓</div>\n            <h2>Success!</h2>\n            <p>{message}</p>\n          </>\n        )}\n        \n        {status === 'error' && (\n          <>\n            <div className=\"error-icon\">✗</div>\n            <h2>Authentication Failed</h2>\n            <p>{message}</p>\n            <p className=\"redirect-note\">You will be redirected shortly...</p>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\n\nexport default AuthCallback;"],"names":["AuthCallback","status","setStatus","useState","message","setMessage","useEffect","timeoutId","toast","route","hashParams","accessToken","refreshToken","type","error","errorDescription","sessionPromise","supabase","sessionTimeoutPromise","_","reject","data","sessionError","resolve","jsxs","Fragment","jsx","LoadingSpinner"],"mappings":"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"}