{"version":3,"file":"movie-oz0LVctZ.js","sources":["../../src/script.js","../../src/movie.jsx"],"sourcesContent":["import { API_BASE_URL, ORIGINAL_IMAGE_BASE_URL } from \"./config\";\n\nexport async function fetchJson(url) {\n    try {\n        const response = await fetch(url);\n        if (!response.ok) {\n            throw new Error(`HTTP error! status: ${response.status}`);\n        }\n        return await response.json();\n    } catch (error) {\n        console.error('Fetch error:', error);\n        return null;\n    }\n}\n\nexport function createMovieCard(item, type) {\n    const isMovie = type === 'movie';\n    const title = isMovie ? item.title : item.name;\n    const releaseDate = isMovie ? item.release_date : item.first_air_date;\n    const itemType = item.media_type || type;\n\n    const card = document.createElement('div');\n    card.className = 'movie-card';\n    card.innerHTML = `\n        <a href=\"movie.html?id=${item.id}&type=${itemType}\">\n            <img src=\"${API_BASE_URL}${item.poster_path}\" alt=\"${title}\" loading=\"lazy\">\n            <div class=\"movie-card-info\">\n                <h3>${title}</h3>\n                <p>⭐ ${item.vote_average.toFixed(1)}</p>\n            </div>\n        </a>\n    `;\n    return card.innerHTML;\n}\n\nexport function setupUniversalSearch() {\n    const searchInput = document.getElementById('search-input');\n    const searchButton = document.getElementById('search-button');\n\n    const executeSearch = () => {\n        const query = searchInput.value.trim();\n        if (query) {\n            window.location.href = `search.html?q=${encodeURIComponent(query)}`;\n        }\n    };\n\n    if(searchButton) {\n        searchButton.addEventListener('click', executeSearch);\n    }\n\n    if(searchInput) {\n        searchInput.addEventListener('keypress', (e) => {\n            if (e.key === 'Enter') {\n                executeSearch();\n            }\n        });\n    }\n}\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    const app = {\n        // State\n        currentMediaType: 'movie',\n        heroSlideshowInterval: null,\n\n        // DOM Elements\n        elements: {\n            heroSection: document.getElementById('hero'),\n            contentDisplay: document.getElementById('content-display'),\n            genreResultsSection: document.getElementById('genre-results'),\n            navLinks: document.querySelectorAll('header nav a[data-type]'),\n            genreBar: document.getElementById('genre-bar'),\n            trendingMoviesGrid: document.querySelector('#trending-movies .movie-grid'),\n            topRatedMoviesGrid: document.querySelector('#top-rated-movies .movie-grid'),\n            trendingTvGrid: document.querySelector('#trending-tv .movie-grid'),\n            topRatedTvGrid: document.querySelector('#top-rated-tv .movie-grid'),\n            genreResultsGrid: document.getElementById('genre-results-grid'),\n            genreResultsTitle: document.getElementById('genre-results-title'),\n            paginationContainer: document.getElementById('pagination'),\n            continueWatchingSection: document.getElementById('continue-watching'),\n        },\n\n        // --- CORE METHODS ---\n\n        init() {\n            this.displayContinueWatching();\n            this.setupEventListeners();\n            this.switchView(this.currentMediaType);\n            this.elements.navLinks[0].classList.add('active'); // Default to movies\n            setupUniversalSearch();\n        },\n\n        setupEventListeners() {\n            this.elements.navLinks.forEach(link => {\n                link.addEventListener('click', (e) => {\n                    e.preventDefault();\n                    this.switchView(link.dataset.type);\n                });\n            });\n        },\n\n        // --- VIEW SWITCHING & CONTENT LOADING ---\n\n        switchView(mediaType) {\n            this.currentMediaType = mediaType;\n            this.elements.navLinks.forEach(link => {\n                link.classList.toggle('active', link.dataset.type === mediaType);\n            });\n            this.elements.contentDisplay.classList.remove('hidden');\n            this.elements.genreResultsSection.classList.add('hidden');\n            this.fetchAndDisplaySections(mediaType);\n            this.fetchAndDisplayGenres(mediaType);\n        },\n\n        async fetchAndDisplaySections(mediaType) {\n            this.toggleSectionVisibility(mediaType);\n            const trendingGrid = (mediaType === 'movie') ? this.elements.trendingMoviesGrid : this.elements.trendingTvGrid;\n            const topRatedGrid = (mediaType === 'movie') ? this.elements.topRatedMoviesGrid : this.elements.topRatedTvGrid;\n            \n            trendingGrid.innerHTML = '<p>Loading...</p>';\n            topRatedGrid.innerHTML = '<p>Loading...</p>';\n\n            const trendingUrl = `${API_BASE_URL}/trending/${mediaType}/week`;\n            const topRatedUrl = `${API_BASE_URL}/${mediaType}/top_rated?language=en-US&page=1`;\n\n            const [trendingData, topRatedData] = await Promise.all([\n                fetchJson(trendingUrl),\n                fetchJson(topRatedUrl)\n            ]);\n            \n            if (trendingData && trendingData.results) {\n                this.displayGrid(trendingData.results, trendingGrid, mediaType);\n                this.startHeroSlideshow(trendingData.results.slice(0, 5), mediaType);\n            }\n            if (topRatedData && topRatedData.results) {\n                this.displayGrid(topRatedData.results, topRatedGrid, mediaType);\n            }\n        },\n\n        displayGrid(items, gridElement, mediaType) {\n            if (!items || items.length === 0) {\n                gridElement.innerHTML = '<p>No items to display.</p>';\n                return;\n            }\n            gridElement.innerHTML = items.map(item => createMovieCard(item, mediaType)).join('');\n            attachFavoriteListeners();\n        },\n\n        toggleSectionVisibility(mediaType) {\n            const isMovie = mediaType === 'movie';\n            document.getElementById('trending-movies').style.display = isMovie ? 'block' : 'none';\n            document.getElementById('top-rated-movies').style.display = isMovie ? 'block' : 'none';\n            document.getElementById('trending-tv').style.display = !isMovie ? 'block' : 'none';\n            document.getElementById('top-rated-tv').style.display = !isMovie ? 'block' : 'none';\n        },\n        \n        // --- HERO SECTION ---\n\n        updateHeroContent(item, mediaType) {\n            this.elements.heroSection.style.backgroundImage = `linear-gradient(to right, rgba(0, 0, 0, 0.7) 30%, transparent), url(${ORIGINAL_IMAGE_BASE_URL}${item.backdrop_path})`;\n            const title = mediaType === 'movie' ? item.title : item.name;\n            const link = `movie.html?id=${item.id}&type=${mediaType}`;\n            this.elements.heroSection.innerHTML = `\n                <div class=\"hero-content\">\n                    <h1 class=\"hero-title\">${title}</h1>\n                    <p class=\"hero-overview\">${item.overview}</p>\n                    <a href=\"${link}\" class=\"btn btn-primary\">▶ Watch Now</a>\n                </div>\n            `;\n        },\n\n        startHeroSlideshow(items, mediaType) {\n            if (!items || items.length === 0) return;\n            let currentIndex = 0;\n            this.updateHeroContent(items[currentIndex], mediaType);\n\n            clearInterval(this.heroSlideshowInterval);\n            this.heroSlideshowInterval = setInterval(() => {\n                currentIndex = (currentIndex + 1) % items.length;\n                this.updateHeroContent(items[currentIndex], mediaType);\n            }, 7000);\n        },\n\n        // --- GENRE FILTERING ---\n\n        async fetchAndDisplayGenres(mediaType) {\n            const url = `${API_BASE_URL}/genre/${mediaType}/list?language=en-US`;\n            const data = await fetchJson(url);\n            if (!data || !data.genres) return;\n            \n            this.elements.genreBar.innerHTML = `<button class=\"genre-btn active\" data-genre-id=\"all\">All Genres</button>` +\n                data.genres.map(genre => `<button class=\"genre-btn\" data-genre-id=\"${genre.id}\">${genre.name}</button>`).join('');\n\n            this.elements.genreBar.querySelectorAll('.genre-btn').forEach(button => {\n                button.addEventListener('click', () => {\n                    this.elements.genreBar.querySelector('.genre-btn.active').classList.remove('active');\n                    button.classList.add('active');\n                    const genreId = button.dataset.genreId;\n                    const genreName = button.textContent;\n\n                    if (genreId === 'all') {\n                        this.elements.contentDisplay.classList.remove('hidden');\n                        this.elements.genreResultsSection.classList.add('hidden');\n                    } else {\n                        this.fetchAndDisplayByGenre(mediaType, genreId, genreName);\n                    }\n                });\n            });\n        },\n\n        async fetchAndDisplayByGenre(mediaType, genreId, genreName, page = 1) {\n            const url = `${API_BASE_URL}/discover/${mediaType}?with_genres=${genreId}&language=en-US&page=${page}`;\n            const data = await fetchJson(url);\n            if (!data) return;\n\n            this.elements.contentDisplay.classList.add('hidden');\n            this.elements.genreResultsSection.classList.remove('hidden');\n            this.elements.genreResultsTitle.textContent = `${genreName}`;\n\n            this.displayGrid(data.results, this.elements.genreResultsGrid, mediaType);\n            this.setupPagination(mediaType, genreId, genreName, page, data.total_pages);\n        },\n\n        setupPagination(mediaType, genreId, genreName, currentPage, totalPages) {\n            this.elements.paginationContainer.innerHTML = '';\n            if (totalPages <= 1) return;\n\n            const createButton = (page, text, isDisabled = false) => {\n                const button = document.createElement('button');\n                button.textContent = text;\n                button.disabled = isDisabled;\n                if (!isDisabled) {\n                    button.addEventListener('click', () => this.fetchAndDisplayByGenre(mediaType, genreId, genreName, page));\n                }\n                return button;\n            };\n\n            if (currentPage > 1) {\n                this.elements.paginationContainer.appendChild(createButton(currentPage - 1, '« Prev'));\n            }\n\n            const startPage = Math.max(1, currentPage - 2);\n            const endPage = Math.min(totalPages, currentPage + 2);\n\n            for (let i = startPage; i <= endPage; i++) {\n                const pageButton = createButton(i, i);\n                if (i === currentPage) {\n                    pageButton.classList.add('active');\n                    pageButton.disabled = true;\n                }\n                this.elements.paginationContainer.appendChild(pageButton);\n            }\n\n            if (currentPage < totalPages) {\n                this.elements.paginationContainer.appendChild(createButton(currentPage + 1, 'Next »'));\n            }\n        },\n\n        // --- CONTINUE WATCHING ---\n\n        displayContinueWatching() {\n            const history = getHistory();\n            if (!history || history.length === 0) {\n                this.elements.continueWatchingSection.classList.add('hidden');\n                return;\n            }\n            \n            this.elements.continueWatchingSection.classList.remove('hidden');\n            const recentlyWatched = history.slice(0, 10); // Show up to 10\n            \n            let gridHTML = recentlyWatched.map(item => {\n                // For history items, the type is stored on the item itself\n                const cardHTML = createMovieCard(item, item.type);\n                const cardElement = document.createElement('div');\n                cardElement.innerHTML = cardHTML;\n                const infoDiv = cardElement.querySelector('.movie-info');\n                \n                // Add progress bar\n                let progress = 0;\n                if (item.type === 'movie' && item.progress) {\n                    progress = item.progress;\n                } else if (item.type === 'tv' && item.watchedEpisodes) {\n                    const totalEpisodes = Object.keys(item.watchedEpisodes).length;\n                    const completedEpisodes = Object.values(item.watchedEpisodes).filter(ep => ep.status === 'completed').length;\n                    if (totalEpisodes > 0) {\n                        progress = (completedEpisodes / totalEpisodes) * 100;\n                    }\n                }\n                \n                if (infoDiv && progress > 0) {\n                     infoDiv.innerHTML += `<div class=\"progress-bar-container\"><div class=\"progress-bar\" style=\"width: ${progress}%;\"></div></div>`;\n                }\n                \n                return cardElement.innerHTML;\n            }).join('');\n\n            this.elements.continueWatchingSection.innerHTML = `\n                <h2>Continue Watching</h2>\n                <div class=\"movie-grid\">${gridHTML}</div>\n            `;\n            attachFavoriteListeners();\n        }\n    };\n\n    app.init();\n});","import { h, render } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { API_BASE_URL, IMAGE_BASE_URL, ORIGINAL_IMAGE_BASE_URL } from './config';\nimport { fetchJson, setupUniversalSearch, createMovieCard } from './script';\nimport { getWatchHistory, saveWatchProgress } from './utils/watchHistory';\nimport { addFavoriteShow, removeFavoriteShow } from './utils/favorites';\nimport { useStore } from './store';\nimport { useAuth } from './context/Auth';\nimport MovieCard from './components/MovieCard';\nimport './movie.css';\n\nconst MoviePage = () => {\n  const [mediaData, setMediaData] = useState(null);\n  const [videos, setVideos] = useState([]);\n  const [recommendations, setRecommendations] = useState([]);\n  const [mediaId, setMediaId] = useState(null);\n  const [mediaType, setMediaType] = useState(null);\n  const { isShowFavorited } = useStore();\n  const { user, session } = useAuth();\n  const [selectedSeason, setSelectedSeason] = useState(null);\n  const [watchHistory, setWatchHistory] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [isDubbed, setIsDubbed] = useState(false);\n  const [episodePage, setEpisodePage] = useState(1);\n  const [paginationPage, setPaginationPage] = useState(1);\n\n  useEffect(() => {\n    const pathParts = window.location.pathname.split('/');\n    const type = pathParts[1]; // 'movie' or 'tv'\n    const id = pathParts[2];   // the ID\n\n    setMediaId(id);\n    setMediaType(type);\n    \n    const history = getWatchHistory().find(item => item.id == id);\n    if(history) {\n      setWatchHistory(history);\n    }\n\n    if (id && type) {\n      fetchAndDisplayAll(id, type);\n    }\n    setupUniversalSearch();\n  }, [mediaId]);\n\n  const fetchAndDisplayAll = async (id, type) => {\n    setLoading(true);\n    const detailsUrl = `${API_BASE_URL}/tmdb/${type}/${id}?language=en-US`;\n    const videosUrl = `${API_BASE_URL}/tmdb/${type}/${id}/videos?language=en-US`;\n    const recommendationsUrl = `${API_BASE_URL}/tmdb/${type}/${id}/recommendations?language=en-US`;\n\n    try {\n      const [detailsData, videosData, recommendationsData] = await Promise.all([\n        fetchJson(detailsUrl, 'Error loading media details'),\n        fetchJson(videosUrl, 'Error loading videos'),\n        fetchJson(recommendationsUrl, 'Error loading recommendations')\n      ]);\n\n      setMediaData(detailsData);\n      setVideos(videosData?.results || []);\n      setRecommendations(recommendationsData?.results || []);\n\n      if (type === 'tv' && detailsData && detailsData.seasons) {\n        const seasonWithEpisodes = await fetchSeasonDetails(id, detailsData.seasons[0].season_number);\n        setSelectedSeason(seasonWithEpisodes);\n      }\n    } catch (error) {\n      console.error(\"Failed to fetch page data\", error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  \n  const fetchSeasonDetails = async (tvId, seasonNumber) => {\n      const seasonUrl = `${API_BASE_URL}/tmdb/tv/${tvId}/season/${seasonNumber}?language=en-US`;\n      return await fetchJson(seasonUrl, 'Error loading season details');\n  };\n\n  const handleSeasonClick = async (seasonNumber) => {\n    const seasonDetails = await fetchSeasonDetails(mediaId, seasonNumber);\n    setSelectedSeason(seasonDetails);\n    setEpisodePage(1);\n    setPaginationPage(1);\n  };\n  \n  const handleFavoriteClick = () => {\n    const mediaToSave = {\n        id: mediaData.id,\n        type: mediaType,\n        title: mediaData.name || mediaData.title,\n        poster_path: mediaData.poster_path,\n        vote_average: mediaData.vote_average\n    };\n\n    const favorited = isShowFavorited(mediaData.id, mediaType);\n    if (favorited) {\n        removeFavoriteShow(mediaToSave);\n    } else {\n        addFavoriteShow(mediaToSave);\n    }\n  };\n\n  const updatePlayback = (server, season = null, episode = null, isDubbed = false) => {\n    const videoPlayer = document.getElementById('video-player');\n    if (!videoPlayer) return;\n\n    const mediaToSave = {\n      id: mediaData.id,\n      type: mediaType,\n      title: mediaData.name || mediaData.title,\n      poster_path: mediaData.poster_path,\n      vote_average: mediaData.vote_average\n    };\n    \n    // Save watch progress with proper parameters\n    if (user?.id) {\n      saveWatchProgress(\n        user.id,\n        mediaToSave,\n        0, // progress (0 for just starting)\n        0, // duration (unknown at this point)\n        false, // forceHistoryEntry\n        session // Pass session from Auth context\n      );\n    }\n\n    let streamUrl = '';\n    if (mediaType === 'movie') {\n        streamUrl = `${API_BASE_URL}/stream-url?source=${server}&type=movie&id=${mediaId}`;\n    } else if (mediaType === 'tv') {\n        streamUrl = `${API_BASE_URL}/stream-url?source=${server}&type=tv&id=${mediaId}&season=${season}&episode=${episode}&dub=${isDubbed}`;\n    }\n    \n    fetch(streamUrl)\n        .then(res => res.json())\n        .then(data => {\n            if(data.url) videoPlayer.src = data.url;\n        });\n  };\n\n  const renderTrailerModal = () => {\n    const trailer = videos.find(video => video.type === 'Trailer' && video.site === 'YouTube');\n    if (!trailer) return null;\n\n    return (\n        <div id=\"trailer-modal\" class=\"modal\">\n            <div class=\"modal-content\">\n                <span class=\"close-button\" onClick={() => document.getElementById('trailer-modal').style.display = 'none'}>&times;</span>\n                <iframe width=\"560\" height=\"315\" src={`https://www.youtube.com/embed/${trailer.key}`} frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; fullscreen; picture-in-picture\" allowfullscreen></iframe>\n            </div>\n        </div>\n    );\n  };\n\n  if (loading) {\n    return <div class=\"loading-spinner\"></div>;\n  }\n\n  if (!mediaData) {\n    return <p class=\"container\">Could not load media details. Please try again later.</p>;\n  }\n  \n  const backdropUrl = mediaData.backdrop_path ? `${ORIGINAL_IMAGE_BASE_URL}${mediaData.backdrop_path}` : '';\n\n  return (\n    <div>\n      <div id=\"backdrop\" style={{ backgroundImage: `url(${backdropUrl})` }}></div>\n        <main class=\"container\" id=\"media-details-content\">\n            <section id=\"media-header\">\n                <div class=\"poster\">\n                    <img src={`${IMAGE_BASE_URL}${mediaData.poster_path}`} alt={mediaData.title || mediaData.name} />\n                </div>\n                <div class=\"info\">\n                    <div class=\"title-container\">\n                        <h1>{mediaData.title || mediaData.name}</h1>\n                        <button id=\"favorite-btn\" class={isShowFavorited(mediaData.id, mediaType) ? 'favorited' : ''} onClick={handleFavoriteClick}>\n                            {isShowFavorited(mediaData.id, mediaType) ? '♥ Favorited' : '♡ Add to Favorites'}\n                        </button>\n                    </div>\n                    <div class=\"meta\">\n                        <span>{mediaData.release_date || mediaData.first_air_date}</span>\n                        <span>{mediaData.genres.map(g => g.name).join(', ')}</span>\n                        {mediaData.runtime && <span>{mediaData.runtime} min</span>}\n                        <span class=\"rating\">★ {mediaData.vote_average.toFixed(1)}</span>\n                    </div>\n                    <p class=\"overview\">{mediaData.overview}</p>\n                    <div class=\"actions\">\n                         {videos.find(v => v.type === 'Trailer') &&\n                            <button id=\"watch-trailer-btn\" onClick={() => document.getElementById('trailer-modal').style.display = 'block'}>Watch Trailer</button>\n                         }\n                    </div>\n                </div>\n            </section>\n            \n            <section id=\"playback\">\n                <h2>Watch Now</h2>\n                <div class=\"server-selection\">\n                    <button class=\"server-btn active\" onClick={(e) => updatePlayback(e.target.dataset.server)} data-server=\"videasy\">Videasy</button>\n                    <button class=\"server-btn\" onClick={(e) => updatePlayback(e.target.dataset.server)} data-server=\"vidsrc\">VidSrc</button>\n                    <button class=\"server-btn\" onClick={(e) => updatePlayback(e.target.dataset.server)} data-server=\"embedsu\">Embeds.su</button>\n                </div>\n                <div class=\"video-container\">\n                    <iframe id=\"video-player\" allowfullscreen></iframe>\n                </div>\n                {mediaType === 'tv' && (\n                    <div class=\"select-container\">\n                        <label for=\"dub-select\">Audio:</label>\n                        <select\n                            id=\"dub-select\"\n                            value={isDubbed}\n                            onChange={(e) => {\n                                setIsDubbed(e.target.value === 'true');\n                                const activeServer = document.querySelector('.server-btn.active').dataset.server;\n                                const currentEpisode = selectedSeason?.episodes?.[0]?.episode_number || 1;\n                                updatePlayback(activeServer, selectedSeason?.season_number, currentEpisode, e.target.value === 'true');\n                            }}\n                        >\n                            <option value=\"false\">Subbed</option>\n                            <option value=\"true\">Dubbed</option>\n                        </select>\n                    </div>\n                )}\n            </section>\n\n            {mediaType === 'tv' && mediaData.seasons && (\n                <section id=\"seasons-episodes\">\n                    <h2>Seasons & Episodes</h2>\n                    <div class=\"seasons-container\">\n                        {mediaData.seasons.filter(s => s.season_number > 0).map(s => (\n                            <div class={`season-card ${selectedSeason?.season_number === s.season_number ? 'active' : ''}`} onClick={() => handleSeasonClick(s.season_number)}>\n                                <img src={s.poster_path ? `${IMAGE_BASE_URL}${s.poster_path}` : 'https://via.placeholder.com/130x200?text=No+Image'} alt={s.name} />\n                                <span>{s.name}</span>\n                            </div>\n                        ))}\n                    </div>\n                    {selectedSeason && (() => {\n                        const totalEpisodes = selectedSeason.episodes.length;\n                        const totalPages = Math.ceil(totalEpisodes / episodesPerPage);\n                        const totalPaginationPages = Math.ceil(totalPages / pagesPerPagination);\n\n                        const startEpisode = (episodePage - 1) * episodesPerPage;\n                        const endEpisode = startEpisode + episodesPerPage;\n                        const episodesOnPage = selectedSeason.episodes.slice(startEpisode, endEpisode);\n\n                        const startPagination = (paginationPage - 1) * pagesPerPagination;\n                        const endPagination = startPagination + pagesPerPagination;\n                        const pagesToShow = Array.from({ length: totalPages }, (_, i) => i + 1).slice(startPagination, endPagination);\n\n                        return (\n                            <div>\n                                <div class=\"episodes-container\">\n                                    <h3>{selectedSeason.name}</h3>\n                                    {episodesOnPage.map(ep => (\n                                        <div class=\"episode-card\" onClick={() => updatePlayback(document.querySelector('.server-btn.active').dataset.server, selectedSeason.season_number, ep.episode_number, isDubbed)}>\n                                            <div class=\"episode-thumbnail\">\n                                                <img src={ep.still_path ? `${IMAGE_BASE_URL}${ep.still_path}` : 'https://via.placeholder.com/150x84?text=No+Image'} alt={ep.name} />\n                                            </div>\n                                            <div class=\"episode-info\">\n                                                <h4>{ep.episode_number}. {ep.name}</h4>\n                                                <p>{ep.overview}</p>\n                                            </div>\n                                        </div>\n                                    ))}\n                                </div>\n                                {totalPages > 1 && (\n                                    <div class=\"pagination-controls\">\n                                        {paginationPage > 1 && (\n                                            <button onClick={() => setPaginationPage(paginationPage - 1)}>\n                                                <i class=\"fas fa-angle-double-left\"></i>\n                                            </button>\n                                        )}\n                                        {pagesToShow.map(page => (\n                                            <button\n                                                key={page}\n                                                class={episodePage === page ? 'active' : ''}\n                                                onClick={() => setEpisodePage(page)}\n                                            >\n                                                {page}\n                                            </button>\n                                        ))}\n                                        {paginationPage < totalPaginationPages && (\n                                            <button onClick={() => setPaginationPage(paginationPage + 1)}>\n                                                <i class=\"fas fa-angle-double-right\"></i>\n                                            </button>\n                                        )}\n                                    </div>\n                                )}\n                            </div>\n                        );\n                    })()}\n                </section>\n            )}\n\n            {recommendations.length > 0 && (\n                <section id=\"recommendations\">\n                    <h2>Recommendations</h2>\n                    <div class=\"movie-grid\">\n                        {recommendations.map(item => <MovieCard item={item} type={mediaType} />)}\n                    </div>\n                </section>\n            )}\n        </main>\n        {renderTrailerModal()}\n    </div>\n  );\n};\n\nrender(<MoviePage />, document.getElementById('app'));"],"names":["fetchJson","url","response","error","createMovieCard","item","type","isMovie","title","itemType","card","API_BASE_URL","setupUniversalSearch","searchInput","searchButton","executeSearch","query","e","link","mediaType","trendingGrid","topRatedGrid","trendingUrl","topRatedUrl","trendingData","topRatedData","items","gridElement","ORIGINAL_IMAGE_BASE_URL","currentIndex","data","genre","button","genreId","genreName","page","currentPage","totalPages","createButton","text","isDisabled","startPage","endPage","i","pageButton","history","gridHTML","cardHTML","cardElement","infoDiv","progress","totalEpisodes","completedEpisodes","ep","MoviePage","mediaData","setMediaData","useState","videos","setVideos","recommendations","setRecommendations","mediaId","setMediaId","setMediaType","isShowFavorited","useStore","user","session","useAuth","selectedSeason","setSelectedSeason","watchHistory","setWatchHistory","loading","setLoading","isDubbed","setIsDubbed","episodePage","setEpisodePage","paginationPage","setPaginationPage","useEffect","pathParts","id","getWatchHistory","fetchAndDisplayAll","detailsUrl","videosUrl","recommendationsUrl","detailsData","videosData","recommendationsData","seasonWithEpisodes","fetchSeasonDetails","tvId","seasonNumber","seasonUrl","handleSeasonClick","seasonDetails","handleFavoriteClick","mediaToSave","removeFavoriteShow","addFavoriteShow","updatePlayback","server","season","episode","videoPlayer","saveWatchProgress","streamUrl","res","renderTrailerModal","trailer","video","jsx","jsxs","backdropUrl","IMAGE_BASE_URL","g","v","activeServer","currentEpisode","totalPaginationPages","startEpisode","endEpisode","episodesOnPage","startPagination","endPagination","pagesToShow","_","MovieCard","render"],"mappings":"0RAEO,eAAeA,EAAUC,EAAK,CACjC,GAAI,CACA,MAAMC,EAAW,MAAM,MAAMD,CAAG,EAChC,GAAI,CAACC,EAAS,GACV,MAAM,IAAI,MAAM,uBAAuBA,EAAS,MAAM,EAAE,EAE5D,OAAO,MAAMA,EAAS,KAAI,CAC9B,OAASC,EAAO,CACZ,eAAQ,MAAM,eAAgBA,CAAK,EAC5B,IACX,CACJ,CAEO,SAASC,EAAgBC,EAAMC,EAAM,CACxC,MAAMC,EAAUD,IAAS,QACnBE,EAAQD,EAAUF,EAAK,MAAQA,EAAK,KACtBE,EAAUF,EAAK,aAAeA,EAAK,eACvD,MAAMI,EAAWJ,EAAK,YAAcC,EAE9BI,EAAO,SAAS,cAAc,KAAK,EACzC,OAAAA,EAAK,UAAY,aACjBA,EAAK,UAAY;AAAA,iCACYL,EAAK,EAAE,SAASI,CAAQ;AAAA,wBACjCE,CAAY,GAAGN,EAAK,WAAW,UAAUG,CAAK;AAAA;AAAA,sBAEhDA,CAAK;AAAA,uBACJH,EAAK,aAAa,QAAQ,CAAC,CAAC;AAAA;AAAA;AAAA,MAIxCK,EAAK,SAChB,CAEO,SAASE,GAAuB,CACnC,MAAMC,EAAc,SAAS,eAAe,cAAc,EACpDC,EAAe,SAAS,eAAe,eAAe,EAEtDC,EAAgB,IAAM,CACxB,MAAMC,EAAQH,EAAY,MAAM,KAAI,EAChCG,IACA,OAAO,SAAS,KAAO,iBAAiB,mBAAmBA,CAAK,CAAC,GAEzE,EAEGF,GACCA,EAAa,iBAAiB,QAASC,CAAa,EAGrDF,GACCA,EAAY,iBAAiB,WAAaI,GAAM,CACxCA,EAAE,MAAQ,SACVF,EAAa,CAErB,CAAC,CAET,CAEA,SAAS,iBAAiB,mBAAoB,IAAM,EACpC,CAER,iBAAkB,QAClB,sBAAuB,KAGvB,SAAU,CACN,YAAa,SAAS,eAAe,MAAM,EAC3C,eAAgB,SAAS,eAAe,iBAAiB,EACzD,oBAAqB,SAAS,eAAe,eAAe,EAC5D,SAAU,SAAS,iBAAiB,yBAAyB,EAC7D,SAAU,SAAS,eAAe,WAAW,EAC7C,mBAAoB,SAAS,cAAc,8BAA8B,EACzE,mBAAoB,SAAS,cAAc,+BAA+B,EAC1E,eAAgB,SAAS,cAAc,0BAA0B,EACjE,eAAgB,SAAS,cAAc,2BAA2B,EAClE,iBAAkB,SAAS,eAAe,oBAAoB,EAC9D,kBAAmB,SAAS,eAAe,qBAAqB,EAChE,oBAAqB,SAAS,eAAe,YAAY,EACzD,wBAAyB,SAAS,eAAe,mBAAmB,CAChF,EAIQ,MAAO,CACH,KAAK,wBAAuB,EAC5B,KAAK,oBAAmB,EACxB,KAAK,WAAW,KAAK,gBAAgB,EACrC,KAAK,SAAS,SAAS,CAAC,EAAE,UAAU,IAAI,QAAQ,EAChDH,EAAoB,CACxB,EAEA,qBAAsB,CAClB,KAAK,SAAS,SAAS,QAAQM,GAAQ,CACnCA,EAAK,iBAAiB,QAAUD,GAAM,CAClCA,EAAE,eAAc,EAChB,KAAK,WAAWC,EAAK,QAAQ,IAAI,CACrC,CAAC,CACL,CAAC,CACL,EAIA,WAAWC,EAAW,CAClB,KAAK,iBAAmBA,EACxB,KAAK,SAAS,SAAS,QAAQD,GAAQ,CACnCA,EAAK,UAAU,OAAO,SAAUA,EAAK,QAAQ,OAASC,CAAS,CACnE,CAAC,EACD,KAAK,SAAS,eAAe,UAAU,OAAO,QAAQ,EACtD,KAAK,SAAS,oBAAoB,UAAU,IAAI,QAAQ,EACxD,KAAK,wBAAwBA,CAAS,EACtC,KAAK,sBAAsBA,CAAS,CACxC,EAEA,MAAM,wBAAwBA,EAAW,CACrC,KAAK,wBAAwBA,CAAS,EACtC,MAAMC,EAAgBD,IAAc,QAAW,KAAK,SAAS,mBAAqB,KAAK,SAAS,eAC1FE,EAAgBF,IAAc,QAAW,KAAK,SAAS,mBAAqB,KAAK,SAAS,eAEhGC,EAAa,UAAY,oBACzBC,EAAa,UAAY,oBAEzB,MAAMC,EAAc,GAAGX,CAAY,aAAaQ,CAAS,QACnDI,EAAc,GAAGZ,CAAY,IAAIQ,CAAS,mCAE1C,CAACK,EAAcC,CAAY,EAAI,MAAM,QAAQ,IAAI,CACnDzB,EAAUsB,CAAW,EACrBtB,EAAUuB,CAAW,CACrC,CAAa,EAEGC,GAAgBA,EAAa,UAC7B,KAAK,YAAYA,EAAa,QAASJ,EAAcD,CAAS,EAC9D,KAAK,mBAAmBK,EAAa,QAAQ,MAAM,EAAG,CAAC,EAAGL,CAAS,GAEnEM,GAAgBA,EAAa,SAC7B,KAAK,YAAYA,EAAa,QAASJ,EAAcF,CAAS,CAEtE,EAEA,YAAYO,EAAOC,EAAaR,EAAW,CACvC,GAAI,CAACO,GAASA,EAAM,SAAW,EAAG,CAC9BC,EAAY,UAAY,8BACxB,MACJ,CACAA,EAAY,UAAYD,EAAM,IAAIrB,GAAQD,EAAgBC,EAAMc,CAAS,CAAC,EAAE,KAAK,EAAE,EACnF,wBAAuB,CAC3B,EAEA,wBAAwBA,EAAW,CAC/B,MAAMZ,EAAUY,IAAc,QAC9B,SAAS,eAAe,iBAAiB,EAAE,MAAM,QAAUZ,EAAU,QAAU,OAC/E,SAAS,eAAe,kBAAkB,EAAE,MAAM,QAAUA,EAAU,QAAU,OAChF,SAAS,eAAe,aAAa,EAAE,MAAM,QAAWA,EAAoB,OAAV,QAClE,SAAS,eAAe,cAAc,EAAE,MAAM,QAAWA,EAAoB,OAAV,OACvE,EAIA,kBAAkBF,EAAMc,EAAW,CAC/B,KAAK,SAAS,YAAY,MAAM,gBAAkB,uEAAuES,CAAuB,GAAGvB,EAAK,aAAa,IACrK,MAAMG,EAAQW,IAAc,QAAUd,EAAK,MAAQA,EAAK,KAClDa,EAAO,iBAAiBb,EAAK,EAAE,SAASc,CAAS,GACvD,KAAK,SAAS,YAAY,UAAY;AAAA;AAAA,6CAELX,CAAK;AAAA,+CACHH,EAAK,QAAQ;AAAA,+BAC7Ba,CAAI;AAAA;AAAA,aAG3B,EAEA,mBAAmBQ,EAAOP,EAAW,CACjC,GAAI,CAACO,GAASA,EAAM,SAAW,EAAG,OAClC,IAAIG,EAAe,EACnB,KAAK,kBAAkBH,EAAMG,CAAY,EAAGV,CAAS,EAErD,cAAc,KAAK,qBAAqB,EACxC,KAAK,sBAAwB,YAAY,IAAM,CAC3CU,GAAgBA,EAAe,GAAKH,EAAM,OAC1C,KAAK,kBAAkBA,EAAMG,CAAY,EAAGV,CAAS,CACzD,EAAG,GAAI,CACX,EAIA,MAAM,sBAAsBA,EAAW,CACnC,MAAMlB,EAAM,GAAGU,CAAY,UAAUQ,CAAS,uBACxCW,EAAO,MAAM9B,EAAUC,CAAG,EAC5B,CAAC6B,GAAQ,CAACA,EAAK,SAEnB,KAAK,SAAS,SAAS,UAAY,2EAC/BA,EAAK,OAAO,IAAIC,GAAS,4CAA4CA,EAAM,EAAE,KAAKA,EAAM,IAAI,WAAW,EAAE,KAAK,EAAE,EAEpH,KAAK,SAAS,SAAS,iBAAiB,YAAY,EAAE,QAAQC,GAAU,CACpEA,EAAO,iBAAiB,QAAS,IAAM,CACnC,KAAK,SAAS,SAAS,cAAc,mBAAmB,EAAE,UAAU,OAAO,QAAQ,EACnFA,EAAO,UAAU,IAAI,QAAQ,EAC7B,MAAMC,EAAUD,EAAO,QAAQ,QACzBE,EAAYF,EAAO,YAErBC,IAAY,OACZ,KAAK,SAAS,eAAe,UAAU,OAAO,QAAQ,EACtD,KAAK,SAAS,oBAAoB,UAAU,IAAI,QAAQ,GAExD,KAAK,uBAAuBd,EAAWc,EAASC,CAAS,CAEjE,CAAC,CACL,CAAC,EACL,EAEA,MAAM,uBAAuBf,EAAWc,EAASC,EAAWC,EAAO,EAAG,CAClE,MAAMlC,EAAM,GAAGU,CAAY,aAAaQ,CAAS,gBAAgBc,CAAO,wBAAwBE,CAAI,GAC9FL,EAAO,MAAM9B,EAAUC,CAAG,EAC3B6B,IAEL,KAAK,SAAS,eAAe,UAAU,IAAI,QAAQ,EACnD,KAAK,SAAS,oBAAoB,UAAU,OAAO,QAAQ,EAC3D,KAAK,SAAS,kBAAkB,YAAc,GAAGI,CAAS,GAE1D,KAAK,YAAYJ,EAAK,QAAS,KAAK,SAAS,iBAAkBX,CAAS,EACxE,KAAK,gBAAgBA,EAAWc,EAASC,EAAWC,EAAML,EAAK,WAAW,EAC9E,EAEA,gBAAgBX,EAAWc,EAASC,EAAWE,EAAaC,EAAY,CAEpE,GADA,KAAK,SAAS,oBAAoB,UAAY,GAC1CA,GAAc,EAAG,OAErB,MAAMC,EAAe,CAACH,EAAMI,EAAMC,EAAa,KAAU,CACrD,MAAMR,EAAS,SAAS,cAAc,QAAQ,EAC9C,OAAAA,EAAO,YAAcO,EACrBP,EAAO,SAAWQ,EACbA,GACDR,EAAO,iBAAiB,QAAS,IAAM,KAAK,uBAAuBb,EAAWc,EAASC,EAAWC,CAAI,CAAC,EAEpGH,CACX,EAEII,EAAc,GACd,KAAK,SAAS,oBAAoB,YAAYE,EAAaF,EAAc,EAAG,QAAQ,CAAC,EAGzF,MAAMK,EAAY,KAAK,IAAI,EAAGL,EAAc,CAAC,EACvCM,EAAU,KAAK,IAAIL,EAAYD,EAAc,CAAC,EAEpD,QAASO,EAAIF,EAAWE,GAAKD,EAASC,IAAK,CACvC,MAAMC,EAAaN,EAAaK,EAAGA,CAAC,EAChCA,IAAMP,IACNQ,EAAW,UAAU,IAAI,QAAQ,EACjCA,EAAW,SAAW,IAE1B,KAAK,SAAS,oBAAoB,YAAYA,CAAU,CAC5D,CAEIR,EAAcC,GACd,KAAK,SAAS,oBAAoB,YAAYC,EAAaF,EAAc,EAAG,QAAQ,CAAC,CAE7F,EAIA,yBAA0B,CACtB,MAAMS,EAAU,WAAU,EAC1B,GAAI,CAACA,GAAWA,EAAQ,SAAW,EAAG,CAClC,KAAK,SAAS,wBAAwB,UAAU,IAAI,QAAQ,EAC5D,MACJ,CAEA,KAAK,SAAS,wBAAwB,UAAU,OAAO,QAAQ,EAG/D,IAAIC,EAFoBD,EAAQ,MAAM,EAAG,EAAE,EAEZ,IAAIxC,GAAQ,CAEvC,MAAM0C,EAAW3C,EAAgBC,EAAMA,EAAK,IAAI,EAC1C2C,EAAc,SAAS,cAAc,KAAK,EAChDA,EAAY,UAAYD,EACxB,MAAME,EAAUD,EAAY,cAAc,aAAa,EAGvD,IAAIE,EAAW,EACf,GAAI7C,EAAK,OAAS,SAAWA,EAAK,SAC9B6C,EAAW7C,EAAK,iBACTA,EAAK,OAAS,MAAQA,EAAK,gBAAiB,CACnD,MAAM8C,EAAgB,OAAO,KAAK9C,EAAK,eAAe,EAAE,OAClD+C,EAAoB,OAAO,OAAO/C,EAAK,eAAe,EAAE,OAAOgD,GAAMA,EAAG,SAAW,WAAW,EAAE,OAClGF,EAAgB,IAChBD,EAAYE,EAAoBD,EAAiB,IAEzD,CAEA,OAAIF,GAAWC,EAAW,IACrBD,EAAQ,WAAa,+EAA+EC,CAAQ,oBAG1GF,EAAY,SACvB,CAAC,EAAE,KAAK,EAAE,EAEV,KAAK,SAAS,wBAAwB,UAAY;AAAA;AAAA,0CAEpBF,CAAQ;AAAA,cAEtC,wBAAuB,CAC3B,CACR,GAEQ,KAAI,CACZ,CAAC,ECtSD,MAAMQ,GAAY,IAAM,CACtB,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAS,IAAI,EACzC,CAACC,EAAQC,CAAS,EAAIF,EAAS,CAAA,CAAE,EACjC,CAACG,EAAiBC,CAAkB,EAAIJ,EAAS,CAAA,CAAE,EACnD,CAACK,EAASC,CAAU,EAAIN,EAAS,IAAI,EACrC,CAACtC,EAAW6C,CAAY,EAAIP,EAAS,IAAI,EACzC,CAAE,gBAAAQ,CAAA,EAAoBC,EAAA,EACtB,CAAE,KAAAC,EAAM,QAAAC,CAAA,EAAYC,EAAA,EACpB,CAACC,EAAgBC,CAAiB,EAAId,EAAS,IAAI,EACnD,CAACe,GAAcC,CAAe,EAAIhB,EAAS,IAAI,EAC/C,CAACiB,EAASC,CAAU,EAAIlB,EAAS,EAAI,EACrC,CAACmB,EAAUC,CAAW,EAAIpB,EAAS,EAAK,EACxC,CAACqB,EAAaC,CAAc,EAAItB,EAAS,CAAC,EAC1C,CAACuB,EAAgBC,CAAiB,EAAIxB,EAAS,CAAC,EAEtDyB,GAAU,IAAM,CACd,MAAMC,EAAY,OAAO,SAAS,SAAS,MAAM,GAAG,EAC9C7E,EAAO6E,EAAU,CAAC,EAClBC,EAAKD,EAAU,CAAC,EAEtBpB,EAAWqB,CAAE,EACbpB,EAAa1D,CAAI,EAEjB,MAAMuC,EAAUwC,EAAA,EAAkB,KAAKhF,GAAQA,EAAK,IAAM+E,CAAE,EACzDvC,GACD4B,EAAgB5B,CAAO,EAGrBuC,GAAM9E,GACRgF,EAAmBF,EAAI9E,CAAI,EAE7BM,EAAA,CACF,EAAG,CAACkD,CAAO,CAAC,EAEZ,MAAMwB,EAAqB,MAAOF,EAAI9E,IAAS,CAC7CqE,EAAW,EAAI,EACf,MAAMY,EAAa,GAAG5E,CAAY,SAASL,CAAI,IAAI8E,CAAE,kBAC/CI,EAAY,GAAG7E,CAAY,SAASL,CAAI,IAAI8E,CAAE,yBAC9CK,EAAqB,GAAG9E,CAAY,SAASL,CAAI,IAAI8E,CAAE,kCAE7D,GAAI,CACF,KAAM,CAACM,EAAaC,EAAYC,CAAmB,EAAI,MAAM,QAAQ,IAAI,CACvE5F,EAAUuF,EAAY,6BAA6B,EACnDvF,EAAUwF,EAAW,sBAAsB,EAC3CxF,EAAUyF,EAAoB,+BAA+B,CAAA,CAC9D,EAMD,GAJAjC,EAAakC,CAAW,EACxB/B,EAAUgC,GAAY,SAAW,EAAE,EACnC9B,EAAmB+B,GAAqB,SAAW,EAAE,EAEjDtF,IAAS,MAAQoF,GAAeA,EAAY,QAAS,CACvD,MAAMG,EAAqB,MAAMC,EAAmBV,EAAIM,EAAY,QAAQ,CAAC,EAAE,aAAa,EAC5FnB,EAAkBsB,CAAkB,CACtC,CACF,OAAS1F,EAAO,CACd,QAAQ,MAAM,4BAA6BA,CAAK,CAClD,QAAA,CACEwE,EAAW,EAAK,CAClB,CACF,EAEMmB,EAAqB,MAAOC,EAAMC,IAAiB,CACrD,MAAMC,EAAY,GAAGtF,CAAY,YAAYoF,CAAI,WAAWC,CAAY,kBACxE,OAAO,MAAMhG,EAAUiG,CAAyC,CACpE,EAEMC,EAAoB,MAAOF,GAAiB,CAChD,MAAMG,EAAgB,MAAML,EAAmBhC,EAASkC,CAAY,EACpEzB,EAAkB4B,CAAa,EAC/BpB,EAAe,CAAC,EAChBE,EAAkB,CAAC,CACrB,EAEMmB,EAAsB,IAAM,CAChC,MAAMC,EAAc,CAChB,GAAI9C,EAAU,GACd,KAAMpC,EACN,MAAOoC,EAAU,MAAQA,EAAU,MACnC,YAAaA,EAAU,YACvB,aAAcA,EAAU,YAAA,EAGVU,EAAgBV,EAAU,GAAIpC,CAAS,EAErDmF,GAAmBD,CAAW,EAE9BE,GAAgBF,CAAW,CAEjC,EAEMG,EAAiB,CAACC,EAAQC,EAAS,KAAMC,EAAU,KAAM/B,EAAW,KAAU,CAClF,MAAMgC,EAAc,SAAS,eAAe,cAAc,EAC1D,GAAI,CAACA,EAAa,OAElB,MAAMP,EAAc,CAClB,GAAI9C,EAAU,GACd,KAAMpC,EACN,MAAOoC,EAAU,MAAQA,EAAU,MACnC,YAAaA,EAAU,YACvB,aAAcA,EAAU,YAAA,EAItBY,GAAM,IACR0C,EACE1C,EAAK,GACLkC,EACA,EACA,EACA,GACAjC,CAAA,EAIJ,IAAI0C,EAAY,GACZ3F,IAAc,QACd2F,EAAY,GAAGnG,CAAY,sBAAsB8F,CAAM,kBAAkB3C,CAAO,GACzE3C,IAAc,OACrB2F,EAAY,GAAGnG,CAAY,sBAAsB8F,CAAM,eAAe3C,CAAO,WAAW4C,CAAM,YAAYC,CAAO,QAAQ/B,CAAQ,IAGrI,MAAMkC,CAAS,EACV,KAAKC,GAAOA,EAAI,MAAM,EACtB,KAAKjF,GAAQ,CACPA,EAAK,MAAK8E,EAAY,IAAM9E,EAAK,IACxC,CAAC,CACP,EAEMkF,EAAqB,IAAM,CAC/B,MAAMC,EAAUvD,EAAO,KAAKwD,GAASA,EAAM,OAAS,WAAaA,EAAM,OAAS,SAAS,EACzF,OAAKD,EAGDE,EAAC,OAAI,GAAG,gBAAgB,MAAM,QAC1B,SAAAC,EAAC,MAAA,CAAI,MAAM,gBACP,SAAA,CAAAD,EAAC,OAAA,CAAK,MAAM,eAAe,QAAS,IAAM,SAAS,eAAe,eAAe,EAAE,MAAM,QAAU,OAAQ,SAAA,IAAO,IACjH,SAAA,CAAO,MAAM,MAAM,OAAO,MAAM,IAAK,iCAAiCF,EAAQ,GAAG,GAAI,YAAY,IAAI,MAAM,uGAAuG,gBAAe,EAAA,CAAC,CAAA,CAAA,CACvO,CAAA,CACJ,EARiB,IAUvB,EAEA,GAAIvC,EACF,OAAOyC,EAAC,MAAA,CAAI,MAAM,iBAAA,CAAkB,EAGtC,GAAI,CAAC5D,EACH,OAAO4D,EAAC,IAAA,CAAE,MAAM,YAAY,SAAA,wDAAqD,EAGnF,MAAME,EAAc9D,EAAU,cAAgB,GAAG3B,CAAuB,GAAG2B,EAAU,aAAa,GAAK,GAEvG,SACG,MAAA,CACC,SAAA,CAAA4D,EAAC,MAAA,CAAI,GAAG,WAAW,MAAO,CAAE,gBAAiB,OAAOE,CAAW,GAAA,CAAI,CAAG,EACpED,EAAC,OAAA,CAAK,MAAM,YAAY,GAAG,wBACvB,SAAA,CAAAA,EAAC,UAAA,CAAQ,GAAG,eACR,SAAA,CAAAD,EAAC,OAAI,MAAM,SACP,SAAAA,EAAC,MAAA,CAAI,IAAK,GAAGG,CAAc,GAAG/D,EAAU,WAAW,GAAI,IAAKA,EAAU,OAASA,EAAU,KAAM,EACnG,EACA6D,EAAC,MAAA,CAAI,MAAM,OACP,SAAA,CAAAA,EAAC,MAAA,CAAI,MAAM,kBACP,SAAA,CAAAD,EAAC,KAAA,CAAI,SAAA5D,EAAU,OAASA,EAAU,KAAK,EACvC4D,EAAC,UAAO,GAAG,eAAe,MAAOlD,EAAgBV,EAAU,GAAIpC,CAAS,EAAI,YAAc,GAAI,QAASiF,EAClG,SAAAnC,EAAgBV,EAAU,GAAIpC,CAAS,EAAI,cAAgB,oBAAA,CAChE,CAAA,EACJ,EACAiG,EAAC,MAAA,CAAI,MAAM,OACP,SAAA,CAAAD,EAAC,OAAA,CAAM,SAAA5D,EAAU,cAAgBA,EAAU,eAAe,EAC1D4D,EAAC,OAAA,CAAM,SAAA5D,EAAU,OAAO,IAAIgE,GAAKA,EAAE,IAAI,EAAE,KAAK,IAAI,CAAA,CAAE,EACnDhE,EAAU,SAAW6D,EAAC,OAAA,CAAM,SAAA,CAAA7D,EAAU,QAAQ,MAAA,EAAI,EACnD6D,EAAC,OAAA,CAAK,MAAM,SAAS,SAAA,CAAA,KAAG7D,EAAU,aAAa,QAAQ,CAAC,CAAA,CAAA,CAAE,CAAA,EAC9D,EACA4D,EAAC,IAAA,CAAE,MAAM,WAAY,WAAU,SAAS,EACxCA,EAAC,MAAA,CAAI,MAAM,UACL,SAAAzD,EAAO,KAAK8D,GAAKA,EAAE,OAAS,SAAS,GACnCL,EAAC,UAAO,GAAG,oBAAoB,QAAS,IAAM,SAAS,eAAe,eAAe,EAAE,MAAM,QAAU,QAAS,SAAA,eAAA,CAAa,CAAA,CAErI,CAAA,CAAA,CACJ,CAAA,EACJ,EAEAC,EAAC,UAAA,CAAQ,GAAG,WACR,SAAA,CAAAD,EAAC,MAAG,SAAA,WAAA,CAAS,EACbC,EAAC,MAAA,CAAI,MAAM,mBACP,SAAA,CAAAD,EAAC,SAAA,CAAO,MAAM,oBAAoB,QAAUlG,GAAMuF,EAAevF,EAAE,OAAO,QAAQ,MAAM,EAAG,cAAY,UAAU,SAAA,UAAO,EACxHkG,EAAC,SAAA,CAAO,MAAM,aAAa,QAAUlG,GAAMuF,EAAevF,EAAE,OAAO,QAAQ,MAAM,EAAG,cAAY,SAAS,SAAA,SAAM,EAC/GkG,EAAC,SAAA,CAAO,MAAM,aAAa,QAAUlG,GAAMuF,EAAevF,EAAE,OAAO,QAAQ,MAAM,EAAG,cAAY,UAAU,SAAA,WAAA,CAAS,CAAA,EACvH,EACAkG,EAAC,MAAA,CAAI,MAAM,kBACP,SAAAA,EAAC,UAAO,GAAG,eAAe,gBAAe,EAAA,CAAC,CAAA,CAC9C,EACChG,IAAc,MACXiG,EAAC,MAAA,CAAI,MAAM,mBACP,SAAA,CAAAD,EAAC,QAAA,CAAM,IAAI,aAAa,SAAA,SAAM,EAC9BC,EAAC,SAAA,CACG,GAAG,aACH,MAAOxC,EACP,SAAW3D,GAAM,CACb4D,EAAY5D,EAAE,OAAO,QAAU,MAAM,EACrC,MAAMwG,EAAe,SAAS,cAAc,oBAAoB,EAAE,QAAQ,OACpEC,EAAiBpD,GAAgB,WAAW,CAAC,GAAG,gBAAkB,EACxEkC,EAAeiB,EAAcnD,GAAgB,cAAeoD,EAAgBzG,EAAE,OAAO,QAAU,MAAM,CACzG,EAEA,SAAA,CAAAkG,EAAC,SAAA,CAAO,MAAM,QAAQ,SAAA,SAAM,EAC5BA,EAAC,SAAA,CAAO,MAAM,OAAO,SAAA,QAAA,CAAM,CAAA,CAAA,CAAA,CAC/B,CAAA,CACJ,CAAA,EAER,EAEChG,IAAc,MAAQoC,EAAU,SAC7B6D,EAAC,UAAA,CAAQ,GAAG,mBACR,SAAA,CAAAD,EAAC,MAAG,SAAA,oBAAA,CAAkB,EACtBA,EAAC,MAAA,CAAI,MAAM,oBACN,SAAA5D,EAAU,QAAQ,OAAO,GAAK,EAAE,cAAgB,CAAC,EAAE,IAAI,GACpD6D,EAAC,MAAA,CAAI,MAAO,eAAe9C,GAAgB,gBAAkB,EAAE,cAAgB,SAAW,EAAE,GAAI,QAAS,IAAM4B,EAAkB,EAAE,aAAa,EAC5I,SAAA,CAAAiB,EAAC,MAAA,CAAI,IAAK,EAAE,YAAc,GAAGG,CAAc,GAAG,EAAE,WAAW,GAAK,oDAAqD,IAAK,EAAE,KAAM,EAClIH,EAAC,OAAA,CAAM,SAAA,EAAE,IAAA,CAAK,CAAA,CAAA,CAClB,CACH,CAAA,CACL,EACC7C,IAAmB,IAAM,CACtB,MAAMnB,EAAgBmB,EAAe,SAAS,OACxCjC,EAAa,KAAK,KAAKc,EAAgB,eAAe,EACtDwE,EAAuB,KAAK,KAAKtF,EAAa,kBAAkB,EAEhEuF,GAAgB9C,EAAc,GAAK,gBACnC+C,EAAaD,EAAe,gBAC5BE,EAAiBxD,EAAe,SAAS,MAAMsD,EAAcC,CAAU,EAEvEE,GAAmB/C,EAAiB,GAAK,mBACzCgD,EAAgBD,EAAkB,mBAClCE,EAAc,MAAM,KAAK,CAAE,OAAQ5F,CAAA,EAAc,CAAC6F,EAAGvF,IAAMA,EAAI,CAAC,EAAE,MAAMoF,EAAiBC,CAAa,EAE5G,SACK,MAAA,CACG,SAAA,CAAAZ,EAAC,MAAA,CAAI,MAAM,qBACP,SAAA,CAAAD,EAAC,KAAA,CAAI,WAAe,IAAA,CAAK,EACxBW,EAAe,IAAIzE,GAChB+D,EAAC,OAAI,MAAM,eAAe,QAAS,IAAMZ,EAAe,SAAS,cAAc,oBAAoB,EAAE,QAAQ,OAAQlC,EAAe,cAAejB,EAAG,eAAgBuB,CAAQ,EAC1K,SAAA,CAAAuC,EAAC,OAAI,MAAM,oBACP,WAAC,MAAA,CAAI,IAAK9D,EAAG,WAAa,GAAGiE,CAAc,GAAGjE,EAAG,UAAU,GAAK,mDAAoD,IAAKA,EAAG,KAAM,EACtI,EACA+D,EAAC,MAAA,CAAI,MAAM,eACP,SAAA,CAAAA,EAAC,KAAA,CAAI,SAAA,CAAA/D,EAAG,eAAe,KAAGA,EAAG,IAAA,EAAK,EAClC8D,EAAC,IAAA,CAAG,SAAA9D,EAAG,QAAA,CAAS,CAAA,CAAA,CACpB,CAAA,EACJ,CACH,CAAA,EACL,EACChB,EAAa,GACV+E,EAAC,MAAA,CAAI,MAAM,sBACN,SAAA,CAAApC,EAAiB,GACdmC,EAAC,SAAA,CAAO,QAAS,IAAMlC,EAAkBD,EAAiB,CAAC,EACvD,SAAAmC,EAAC,IAAA,CAAE,MAAM,2BAA2B,EACxC,EAEHc,EAAY,IAAI9F,GACbgF,EAAC,SAAA,CAEG,MAAOrC,IAAgB3C,EAAO,SAAW,GACzC,QAAS,IAAM4C,EAAe5C,CAAI,EAEjC,SAAAA,CAAA,EAJIA,CAAA,CAMZ,EACA6C,EAAiB2C,GACdR,EAAC,SAAA,CAAO,QAAS,IAAMlC,EAAkBD,EAAiB,CAAC,EACvD,SAAAmC,EAAC,IAAA,CAAE,MAAM,4BAA4B,CAAA,CACzC,CAAA,CAAA,CAER,CAAA,EAER,CAER,GAAA,CAAG,EACP,EAGHvD,EAAgB,OAAS,GACtBwD,EAAC,UAAA,CAAQ,GAAG,kBACR,SAAA,CAAAD,EAAC,MAAG,SAAA,iBAAA,CAAe,EACnBA,EAAC,MAAA,CAAI,MAAM,aACN,SAAAvD,EAAgB,IAAIvD,GAAQ8G,EAACgB,GAAA,CAAU,KAAA9H,EAAY,KAAMc,CAAA,CAAW,CAAE,CAAA,CAC3E,CAAA,CAAA,CACJ,CAAA,EAER,EACC6F,EAAA,CAAmB,EACxB,CAEJ,EAEAoB,KAAQ9E,GAAA,CAAA,CAAU,EAAI,SAAS,eAAe,KAAK,CAAC"}