{"version":3,"file":"Browse-DTcb_t5F.js","sources":["../../src/pages/Browse.jsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport MovieCard from '../components/MovieCard';\nimport AnimeCard from '../components/AnimeCard';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport SkeletonCard from '../components/SkeletonCard';\nimport { useAuth } from '../context/Auth';\nimport { API_BASE_URL } from '../config';\nimport './Browse.css';\n\nconst Browse = ({ type, category, filter }) => {\n    const [items, setItems] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [page, setPage] = useState(1);\n    const [hasMore, setHasMore] = useState(true);\n    const [genres, setGenres] = useState([]);\n    const [selectedGenre, setSelectedGenre] = useState(category === 'genres' && filter ? filter : (category === 'genres' ? '28' : ''));\n    const [selectedStreamingService, setSelectedStreamingService] = useState(category === 'streaming' && filter ? filter : 'netflix');\n    const [selectedMediaType, setSelectedMediaType] = useState(type || 'movie');\n    const { user } = useAuth();\n\n    const categoryTitles = {\n        'trending': 'Trending Now',\n        'popular': 'Popular',\n        'top-rated': 'Top Rated',\n        'upcoming': 'Upcoming',\n        'now-playing': 'Now Playing',\n        'on-the-air': 'On The Air',\n        'seasonal': 'This Season',\n        'continue-watching': 'Continue Watching',\n        'genres': 'Browse by Genre',\n        'streaming': 'Browse by Streaming Service'\n    };\n\n    const streamingServices = [\n        { id: 'netflix', name: 'Netflix', tmdbId: 8 },\n        { id: 'prime', name: 'Prime Video', tmdbId: 119 },\n        { id: 'hbo', name: 'Max', tmdbId: 384 },\n        { id: 'disney', name: 'Disney+', tmdbId: 337 },\n        { id: 'apple', name: 'Apple TV+', tmdbId: 350 },\n        { id: 'paramount', name: 'Paramount+', tmdbId: 531 }\n    ];\n\n    const fetchGenres = async () => {\n        try {\n            const currentType = type === 'anime' ? type : selectedMediaType;\n            const response = await fetch(`${API_BASE_URL}/tmdb/genre/${currentType}/list`);\n            if (response.ok) {\n                const data = await response.json();\n                setGenres(data.genres || []);\n            }\n        } catch (err) {\n            console.error('Error fetching genres:', err);\n        }\n    };\n\n    const fetchItems = async (pageNum = 1, append = false) => {\n        try {\n            setLoading(true);\n            let url;\n            // Use selectedMediaType for all categories except anime\n            const currentType = type === 'anime' ? type : selectedMediaType;\n            \n            if (category === 'genres' && selectedGenre) {\n                // Fetch by genre\n                url = `${API_BASE_URL}/tmdb/discover/${currentType}?with_genres=${selectedGenre}&page=${pageNum}`;\n            } else if (category === 'genres' && !selectedGenre) {\n                // Don't fetch anything if no genre is selected\n                setLoading(false);\n                return;\n            } else if (category === 'streaming' && selectedStreamingService) {\n                // Find the TMDB provider ID for the selected streaming service\n                const service = streamingServices.find(s => s.id === selectedStreamingService);\n                console.log(`[BROWSE] Streaming category - selectedStreamingService: ${selectedStreamingService}`);\n                console.log(`[BROWSE] Found service:`, service);\n                if (service) {\n                    url = `${API_BASE_URL}/tmdb/discover/${currentType}?with_watch_providers=${service.tmdbId}&watch_region=US&page=${pageNum}`;\n                    console.log(`[BROWSE] Fetching ${currentType} content for ${service.name} (ID: ${service.tmdbId}):`, url);\n                } else {\n                    // Fallback to popular if service not found\n                    console.log(`[BROWSE] Service not found, using fallback`);\n                    url = `${API_BASE_URL}/tmdb/${currentType}/popular?page=${pageNum}`;\n                }\n            } else if (category === 'streaming' && !selectedStreamingService) {\n                console.log(`[BROWSE] No streaming service selected`);\n                setLoading(false);\n                return;\n            } else if (type === 'anime') {\n                // Fetch anime data based on category\n                switch (category) {\n                    case 'trending':\n                        url = `${API_BASE_URL}/anime/anilist/trending?page=${pageNum}&perPage=20`;\n                        break;\n                    case 'popular':\n                        url = `${API_BASE_URL}/anime/anilist/popular?page=${pageNum}&perPage=20`;\n                        break;\n                    case 'top-rated':\n                        url = `${API_BASE_URL}/anime/anilist/top-rated?page=${pageNum}&perPage=20`;\n                        break;\n                    case 'seasonal':\n                        url = `${API_BASE_URL}/anime/anilist/seasonal?page=${pageNum}&perPage=20`;\n                        break;\n                    default:\n                        throw new Error('Invalid anime category');\n                }\n            } else {\n                // Fetch movie/TV data based on category using TMDB proxy\n                switch (category) {\n                    case 'trending':\n                        url = `${API_BASE_URL}/tmdb/trending/${type}/week?page=${pageNum}`;\n                        break;\n                    case 'popular':\n                        url = `${API_BASE_URL}/tmdb/${type}/popular?page=${pageNum}`;\n                        break;\n                    case 'top-rated':\n                        url = `${API_BASE_URL}/tmdb/${type}/top_rated?page=${pageNum}`;\n                        break;\n                    case 'upcoming':\n                        url = `${API_BASE_URL}/tmdb/${type}/upcoming?page=${pageNum}`;\n                        break;\n                    case 'now-playing':\n                        url = `${API_BASE_URL}/tmdb/${type}/now_playing?page=${pageNum}`;\n                        break;\n                    case 'on-the-air':\n                        url = `${API_BASE_URL}/tmdb/${type}/on_the_air?page=${pageNum}`;\n                        break;\n                    case 'airing-today':\n                        url = `${API_BASE_URL}/tmdb/${type}/airing_today?page=${pageNum}`;\n                        break;\n                    default:\n                        throw new Error('Invalid category');\n                }\n            }\n\n            const response = await fetch(url);\n            if (!response.ok) {\n                throw new Error(`Failed to fetch ${category} ${type}`);\n            }\n\n            const data = await response.json();\n            const newItems = data.results || data.data || [];\n            \n            if (append) {\n                setItems(prev => [...prev, ...newItems]);\n            } else {\n                setItems(newItems);\n            }\n            \n            // Check if there are more pages\n            setHasMore(newItems.length === 20 && pageNum < (data.total_pages || 50));\n            \n        } catch (err) {\n            console.error('Error fetching items:', err);\n            setError(err.message);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    useEffect(() => {\n        if (type && category) {\n            setItems([]);\n            setPage(1);\n            setError(null);\n            \n            if (category === 'genres') {\n                fetchGenres();\n                // Don't fetch items initially for genres - wait for user selection\n            } else {\n                fetchItems(1, false);\n            }\n        }\n    }, [type, category]);\n\n    useEffect(() => {\n        if (category === 'genres' && selectedGenre) {\n            setItems([]);\n            setPage(1);\n            fetchItems(1, false);\n        }\n    }, [selectedGenre]);\n\n    useEffect(() => {\n        console.log(`[BROWSE] Streaming service changed to: ${selectedStreamingService}`);\n        if (category === 'streaming') {\n            console.log(`[BROWSE] Resetting items and fetching for streaming service: ${selectedStreamingService}`);\n            setItems([]);\n            setPage(1);\n            fetchItems(1, false);\n        }\n    }, [selectedStreamingService]);\n\n    useEffect(() => {\n        console.log(`[BROWSE] Media type changed to: ${selectedMediaType}`);\n        if (category !== 'anime') {\n            console.log(`[BROWSE] Resetting items and fetching for media type: ${selectedMediaType}`);\n            setItems([]);\n            setPage(1);\n            if (category === 'genres' && selectedGenre) {\n                fetchItems(1, false);\n            } else if (category === 'streaming' && selectedStreamingService) {\n                fetchItems(1, false);\n            } else if (category !== 'genres') {\n                fetchItems(1, false);\n            }\n        }\n    }, [selectedMediaType]);\n\n    useEffect(() => {\n        if (type !== 'anime') {\n            setItems([]);\n            setPage(1);\n            setError(null);\n            \n            if (category === 'genres') {\n                fetchGenres();\n                if (selectedGenre) {\n                    fetchItems(1, false);\n                }\n            } else {\n                fetchItems(1, false);\n            }\n        }\n    }, [selectedMediaType]);\n\n    const loadMore = () => {\n        if (!loading && hasMore) {\n            const nextPage = page + 1;\n            setPage(nextPage);\n            fetchItems(nextPage, true);\n        }\n    };\n\n    const handleItemClick = (item) => {\n        if (type === 'anime') {\n            // Handle anime click\n            let mediaType, itemId, routePath;\n            \n            if (item.source === 'tmdb') {\n                mediaType = item.media_type || 'tv';\n                itemId = item.tmdb_id || item.id;\n                routePath = `/watch/${mediaType}/${itemId}`;\n                \n                if (mediaType === 'tv') {\n                    routePath += `/season/1/episode/1`;\n                }\n            } else {\n                mediaType = 'anime';\n                itemId = item.anilist_id || item.id;\n                routePath = `/watch/anime/${itemId}/season/1/episode/1`;\n            }\n            \n            route(routePath);\n        } else {\n            // Handle movie/TV click\n            const mediaId = item.id;\n            let link = `/watch/${type}/${mediaId}`;\n            \n            if (type === 'tv') {\n                link += `/season/1/episode/1`;\n            }\n            \n            route(link);\n        }\n    };\n\n    if (error) {\n        return (\n            <div className=\"browse-page\">\n                <div className=\"browse-header\">\n                    <button className=\"back-button\" onClick={() => window.history.back()}>\n                        <i className=\"fas fa-arrow-left\"></i> Back\n                    </button>\n                    <h1>Error</h1>\n                </div>\n                <div className=\"error-message\">\n                    <p>{error}</p>\n                    <button onClick={() => fetchItems(1, false)}>Try Again</button>\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"browse-page\">\n            <div className=\"browse-header\">\n                <button className=\"back-button\" onClick={() => window.history.back()}>\n                    <i className=\"fas fa-arrow-left\"></i> Back\n                </button>\n                <h1 className=\"page-title\">\n                    {categoryTitles[category] || category}\n                    {type !== 'anime' && (\n                        <span className=\"media-type-indicator\">\n                            {' - '}{selectedMediaType === 'movie' ? 'Movies' : 'TV Shows'}\n                        </span>\n                    )}\n                </h1>\n            </div>\n            \n            {/* Media Type Switcher for all non-anime categories */}\n            {type !== 'anime' && (\n                <div className=\"filter-section\">\n                    <h3>Content Type:</h3>\n                    <div className=\"media-type-switcher\">\n                        <button\n                            className={`media-type-btn ${selectedMediaType === 'movie' ? 'active' : ''}`}\n                            onClick={() => setSelectedMediaType('movie')}\n                        >\n                            Movies\n                        </button>\n                        <button\n                            className={`media-type-btn ${selectedMediaType === 'tv' ? 'active' : ''}`}\n                            onClick={() => setSelectedMediaType('tv')}\n                        >\n                            TV Shows\n                        </button>\n                    </div>\n                </div>\n            )}\n            \n            {/* Genre Selection */}\n            {category === 'genres' && (\n                <div className=\"filter-section\">\n                    <h3>Select Genre:</h3>\n                    <div className=\"genre-selector\">\n                        <select \n                            value={selectedGenre} \n                            onChange={(e) => setSelectedGenre(e.target.value)}\n                            className=\"genre-select\"\n                        >\n                            <option value=\"\">Choose a genre...</option>\n                            {genres.map(genre => (\n                                <option key={genre.id} value={genre.id}>\n                                    {genre.name}\n                                </option>\n                            ))}\n                        </select>\n                    </div>\n                </div>\n            )}\n            \n            {/* Streaming Service Selection */}\n            {category === 'streaming' && (\n                <div className=\"filter-section\">\n                    <h3>Select Streaming Service:</h3>\n                    <div className=\"streaming-selector\">\n                        {streamingServices.map(service => (\n                            <button\n                                key={service.id}\n                                className={`streaming-service-btn ${selectedStreamingService === service.id ? 'active' : ''}`}\n                                onClick={() => setSelectedStreamingService(service.id)}\n                            >\n                                {service.name}\n                            </button>\n                        ))}\n                    </div>\n                </div>\n            )}\n            \n            <div className=\"browse-content\">\n                {loading && items.length === 0 ? (\n                    <div className=\"items-grid\">\n                        {Array.from({ length: 20 }).map((_, index) => (\n                            <SkeletonCard key={`skeleton-${index}`} />\n                        ))}\n                    </div>\n                ) : (\n                    <>\n                        <div className=\"items-grid\">\n                            {items.map((item, index) => (\n                                type === 'anime' ? (\n                                    <AnimeCard\n                                        key={`${item.id}-${index}`}\n                                        item={item}\n                                        onClick={() => handleItemClick(item)}\n                                    />\n                                ) : (\n                                    <MovieCard\n                                        key={`${item.id}-${index}`}\n                                        item={item}\n                                        type={type === 'anime' ? type : selectedMediaType}\n                                        onClick={() => handleItemClick(item)}\n                                    />\n                                )\n                            ))}\n                        </div>\n                        \n                        {hasMore && (\n                            <div className=\"load-more-container\">\n                                <button \n                                    className=\"load-more-button\" \n                                    onClick={loadMore}\n                                    disabled={loading}\n                                >\n                                    {loading ? 'Loading...' : 'Load More'}\n                                </button>\n                            </div>\n                        )}\n                        \n                        {!hasMore && items.length > 0 && (\n                            <div className=\"end-message\">\n                                <p>You've reached the end!</p>\n                            </div>\n                        )}\n                    </>\n                )}\n                \n                {!loading && items.length === 0 && (\n                    <div className=\"no-content\">\n                        <h3>No content available</h3>\n                        <p>Please try again later.</p>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n};\n\nexport default Browse;"],"names":["Browse","type","category","filter","items","setItems","useState","loading","setLoading","error","setError","page","setPage","hasMore","setHasMore","genres","setGenres","selectedGenre","setSelectedGenre","selectedStreamingService","setSelectedStreamingService","selectedMediaType","setSelectedMediaType","user","useAuth","categoryTitles","streamingServices","fetchGenres","response","API_BASE_URL","data","err","fetchItems","pageNum","append","url","currentType","service","s","newItems","prev","useEffect","loadMore","nextPage","handleItemClick","item","mediaType","itemId","routePath","route","mediaId","link","jsxs","jsx","genre","_","index","SkeletonCard","Fragment","AnimeCard","MovieCard"],"mappings":"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"}