{"version":3,"file":"AnimeCard-DiEp6bkk.js","sources":["../../src/components/AnimeCard.jsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useCallback, useEffect, useRef } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport { useStore } from '../store';\nimport { useAuth } from '../context/Auth';\nimport './AnimeCard.css';\nimport { getProxiedImageUrl } from '../config';\n\nconst AnimeCard = ({ item, progress, duration, showDeleteButton, onDelete, onClick }) => {\n    const [isVisible, setIsVisible] = useState(false);\n    const cardRef = useRef(null);\n    \n    // Intersection Observer for lazy loading high-quality images\n    useEffect(() => {\n        const observer = new IntersectionObserver(\n            ([entry]) => {\n                setIsVisible(entry.isIntersecting);\n            },\n            {\n                rootMargin: '50px',\n                threshold: 0.1\n            }\n        );\n\n        if (cardRef.current) {\n            observer.observe(cardRef.current);\n        }\n\n        return () => {\n            if (cardRef.current) {\n                observer.unobserve(cardRef.current);\n            }\n        };\n    }, []);\n    \n    // Destructure anime-specific properties from AniList data\n    const {\n        id,\n        title,\n        poster_path,\n        overview,\n        vote_average,\n        first_air_date,\n        // Enhanced anime properties from AniList\n        status,\n        episodes,\n        format,\n        nextAiringEpisode,\n        studios,\n        genres,\n        season,\n        seasonYear,\n        source,\n        meanScore,\n        favourites,\n        tags,\n        trailer,\n        isAdult,\n        duration: episodeDuration,\n        // Continue watching properties\n        season_number,\n        episode_number,\n        episode_name\n    } = item;\n\n    const animeTitle = title?.english || title?.romaji || title || item.name || 'Unknown Anime';\n    \n    // Calculate progress percentage\n    const progressPercent = (progress && duration > 0) ? (progress / duration) * 100 : 0;\n\n    // Calculate year from release date\n    const year = first_air_date ? new Date(first_air_date).getFullYear() : seasonYear;\n\n    const { user } = useAuth();\n    const { addFavorite, removeFavorite, isShowFavorited, favoritesFetched } = useStore();\n    \n    const favorited = isShowFavorited(item.id || item.anilist_id, 'anime', item.season_number, item.episode_number);\n\n    const handleFavoriteClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!user) return;\n\n        if (favorited) {\n            removeFavorite(user.id, item.id || item.anilist_id, 'anime', item.season_number, item.episode_number);\n        } else {\n            addFavorite(user.id, { ...item, type: 'anime' });\n        }\n    };\n\n    // Enhanced click handler for anime with conditional routing\n    const handleCardClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        \n        console.log('AnimeCard clicked:', item);\n        \n        if (onClick) {\n            onClick(item);\n        } else {\n            // Determine the correct routing based on source\n            let link;\n            \n            if (item.source === 'tmdb') {\n                // For TMDB content, route to the appropriate media type\n                const mediaType = item.media_type || 'tv'; // Default to TV for anime\n                const tmdbId = item.tmdb_id || item.id;\n                link = `/watch/${mediaType}/${tmdbId}`;\n                \n                // For TV shows, add season/episode\n                if (mediaType === 'tv') {\n                    if (item.season_number && item.episode_number) {\n                        link += `/season/${item.season_number}/episode/${item.episode_number}`;\n                    } else {\n                        link += `/season/1/episode/1`;\n                    }\n                }\n            } else {\n                // For AniList content, use anime route with AniList ID\n                const animeId = item.anilist_id || item.id;\n                link = `/watch/anime/${animeId}`;\n                \n                // Deep linking support for specific episodes\n                if (item.season_number && item.episode_number) {\n                    link += `/season/${item.season_number}/episode/${item.episode_number}`;\n                } else {\n                    // Default to season 1, episode 1 for anime\n                    link += `/season/1/episode/1`;\n                }\n            }\n            \n            // Get audio preference for routing (only for anime)\n            if (item.source !== 'tmdb' || item.media_type === 'tv') {\n                const audioPreference = localStorage.getItem('anime-audio-preference') || 'subbed';\n                const urlParams = new URLSearchParams();\n                if (audioPreference === 'dubbed') {\n                    urlParams.set('dub', 'true');\n                }\n                \n                if (urlParams.toString()) {\n                    link += `?${urlParams.toString()}`;\n                }\n            }\n            \n            console.log('Routing to:', link);\n            route(link);\n        }\n    };\n\n    // Standardized subtitle text for anime (consistent with MovieCard)\n    const getSubtitleText = () => {\n        if (season_number && episode_number) {\n            // This is a specific episode (from continue watching)\n            return `S${season_number} E${episode_number}${episode_name ? `: ${episode_name}` : ''}`;\n        }\n        \n        // Build standardized subtitle: Year • Episode Count\n        const parts = [];\n        \n        // Add year (release year or start year)\n        if (year) {\n            parts.push(year.toString());\n        }\n        \n        // Add episode count for anime\n        if (episodes) {\n            parts.push(`${episodes} episodes`);\n        }\n        \n        return parts.length > 0 ? parts.join(' • ') : null;\n    };\n\n    const subtitleText = getSubtitleText();\n\n    // Get anime status badge with enhanced status mapping\n    const getStatusBadge = () => {\n        if (!status) return null;\n        \n        const statusMap = {\n            'RELEASING': { text: 'Airing', class: 'airing' },\n            'FINISHED': { text: 'Completed', class: 'completed' },\n            'NOT_YET_RELEASED': { text: 'Upcoming', class: 'upcoming' },\n            'CANCELLED': { text: 'Cancelled', class: 'cancelled' },\n            'HIATUS': { text: 'Hiatus', class: 'hiatus' }\n        };\n        \n        const statusInfo = statusMap[status];\n        if (!statusInfo) return null;\n        \n        return (\n            <div className={`anime-status-badge ${statusInfo.class}`}>\n                {statusInfo.text}\n            </div>\n        );\n    };\n\n    // Get next episode info for currently airing anime\n    const getNextEpisodeInfo = () => {\n        if (!nextAiringEpisode || status !== 'RELEASING') return null;\n        \n        const timeUntilAiring = nextAiringEpisode.timeUntilAiring;\n        if (timeUntilAiring <= 0) return null;\n        \n        const days = Math.floor(timeUntilAiring / (24 * 60 * 60));\n        const hours = Math.floor((timeUntilAiring % (24 * 60 * 60)) / (60 * 60));\n        const minutes = Math.floor((timeUntilAiring % (60 * 60)) / 60);\n        \n        let timeText = '';\n        if (days > 0) {\n            timeText = `${days}d ${hours}h`;\n        } else if (hours > 0) {\n            timeText = `${hours}h ${minutes}m`;\n        } else if (minutes > 0) {\n            timeText = `${minutes}m`;\n        } else {\n            timeText = 'Soon';\n        }\n        \n        return (\n            <div className=\"next-episode-info\">\n                <span className=\"next-ep-label\">Ep {nextAiringEpisode.episode}</span>\n                <span className=\"next-ep-time\">in {timeText}</span>\n            </div>\n        );\n    };\n\n    // Get studio information\n    const getStudioInfo = () => {\n        if (!studios || studios.length === 0) return null;\n        \n        // Find main studio or use first one\n        const mainStudio = studios.find(studio => studio.isMain) || studios[0];\n        return mainStudio?.name || mainStudio;\n    };\n\n    // Get genre tags (limit to 2 for space)\n    const getGenreTags = () => {\n        if (!genres || genres.length === 0) return null;\n        \n        return genres.slice(0, 2).map(genre => (\n            <span key={genre} className=\"genre-tag\">{genre}</span>\n        ));\n    };\n\n    // Enhanced image URL handling for AniList images with lazy loading\n    const getFullImageUrl = (path) => {\n        if (!path) {\n            return 'https://via.placeholder.com/500x750/1a1a1a/ffffff?text=No+Image';\n        }\n        \n        // For AniList images (which already have full URLs), send them directly to the image proxy\n        if (path.includes('anilist.co') || path.includes('anili.st') || path.includes('anilistcdn')) {\n            return getProxiedImageUrl(path);\n        }\n        \n        // For other full URLs, use the proxy directly\n        if (path.startsWith('http')) {\n            return getProxiedImageUrl(path);\n        }\n        \n        // For TMDB relative paths, add resolution based on visibility\n        if (path.startsWith('/')) {\n            const resolution = isVisible ? 'w500' : 'w200';\n            const IMAGE_BASE_URL = `https://image.tmdb.org/t/p/${resolution}`;\n            return getProxiedImageUrl(`${IMAGE_BASE_URL}${path}`);\n        }\n        \n        // For relative paths (TMDB), use the proxy with the base URL added\n        return getProxiedImageUrl(path);\n    };\n\n    // Get rating with enhanced scoring\n    const getRating = () => {\n        const score = meanScore || vote_average;\n        if (!score) return 'N/A';\n        \n        // Convert AniList score (0-100) to 0-10 scale if needed\n        const normalizedScore = score > 10 ? score / 10 : score;\n        return normalizedScore.toFixed(1);\n    };\n\n    return (\n        <div className=\"anime-card-container\" ref={cardRef}>\n            <div \n                className=\"anime-card\" \n                onClick={handleCardClick}\n                style={{ cursor: 'pointer' }}\n                role=\"button\"\n                tabIndex={0}\n                onKeyDown={(e) => {\n                    if (e.key === 'Enter' || e.key === ' ') {\n                        e.preventDefault();\n                        handleCardClick(e);\n                    }\n                }}\n            >\n                <div className=\"anime-poster-wrapper\">\n                    <img \n                        src={getFullImageUrl(poster_path)} \n                        alt={animeTitle} \n                        loading=\"lazy\" \n                        width=\"500\" \n                        height=\"750\"\n                    />\n                    \n                    {/* Enhanced gradient overlay */}\n                    <div className=\"anime-scrim\"></div>\n                    \n                    {/* Anime status badge */}\n                    {getStatusBadge()}\n                    \n                    {/* Progress bar for continue watching */}\n                    {progressPercent > 0.01 && (\n                        <div className=\"anime-progress-container\">\n                            <div className=\"anime-progress-bar\" style={{ width: `${Math.min(progressPercent, 100)}%` }}></div>\n                        </div>\n                    )}\n                    \n                    {/* Data source indicator */}\n                    <div className=\"streaming-indicator\">\n                        <span className={`source-badge ${(item.source || 'tmdb') === 'anilist' ? 'anilist' : 'tmdb'}`}>\n                            {(item.source || 'tmdb') === 'anilist' ? 'AniList' : 'TMDB'}\n                        </span>\n                    </div>\n                    \n                    <div className=\"anime-card-info\">\n                        {/* Title and favorite button */}\n                        <div className=\"anime-title-row\">\n                            <h3 className=\"anime-card-title\">{animeTitle}</h3>\n                            {user && (\n                                <button\n                                    className={`anime-favorite-btn ${favorited ? 'favorited' : ''}`}\n                                    onClick={handleFavoriteClick}\n                                    aria-label={favorited ? 'Remove from favorites' : 'Add to favorites'}\n                                    disabled={!favoritesFetched}\n                                >\n                                    ♥︎\n                                </button>\n                            )}\n                        </div>\n                        \n                        {/* Subtitle with episode/format info */}\n                        {subtitleText && (\n                            <p className=\"anime-card-subtitle\">{subtitleText}</p>\n                        )}\n                        \n                        {/* Next episode info for airing anime */}\n                        {getNextEpisodeInfo()}\n                        \n                        {/* Studio info */}\n                        {getStudioInfo() && (\n                            <p className=\"anime-studio-info\">\n                                {getStudioInfo()}\n                            </p>\n                        )}\n                        \n                        {/* Genre tags */}\n                        {genres && genres.length > 0 && (\n                            <div className=\"anime-genre-tags\">\n                                {getGenreTags()}\n                            </div>\n                        )}\n                        \n                        {/* Rating with AniList scoring */}\n                        <div className=\"anime-rating-row\">\n                            <span className=\"anime-rating\">★ {getRating()}</span>\n                            {favourites && (\n                                <span className=\"anime-favorites\">♥ {favourites.toLocaleString()}</span>\n                            )}\n                        </div>\n                    </div>\n                    \n                    {/* Delete button for continue watching */}\n                    {showDeleteButton && (\n                        <button\n                            className=\"anime-delete-btn\"\n                            onClick={(e) => {\n                                e.preventDefault();\n                                e.stopPropagation();\n                                if (onDelete) onDelete(item);\n                            }}\n                            aria-label=\"Remove from continue watching\"\n                        >\n                            &times;\n                        </button>\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default AnimeCard;"],"names":["AnimeCard","item","progress","duration","showDeleteButton","onDelete","onClick","isVisible","setIsVisible","useState","cardRef","useRef","useEffect","observer","entry","id","title","poster_path","overview","vote_average","first_air_date","status","episodes","format","nextAiringEpisode","studios","genres","season","seasonYear","source","meanScore","favourites","tags","trailer","isAdult","episodeDuration","season_number","episode_number","episode_name","animeTitle","progressPercent","year","user","useAuth","addFavorite","removeFavorite","isShowFavorited","favoritesFetched","useStore","favorited","handleFavoriteClick","handleCardClick","link","mediaType","tmdbId","audioPreference","urlParams","route","subtitleText","parts","getStatusBadge","statusInfo","jsx","getNextEpisodeInfo","timeUntilAiring","days","hours","minutes","timeText","jsxs","getStudioInfo","mainStudio","studio","getGenreTags","genre","getFullImageUrl","path","getProxiedImageUrl","getRating","score"],"mappings":"kIAQA,MAAMA,GAAY,CAAC,CAAE,KAAAC,EAAM,SAAAC,EAAU,SAAAC,EAAU,iBAAAC,EAAkB,SAAAC,EAAU,QAAAC,KAAc,CACrF,KAAM,CAACC,EAAWC,CAAY,EAAIC,EAAS,EAAK,EAC1CC,EAAUC,EAAO,IAAI,EAG3BC,GAAU,IAAM,CACZ,MAAMC,EAAW,IAAI,qBACjB,CAAC,CAACC,CAAK,IAAM,CACTN,EAAaM,EAAM,cAAc,CACrC,EACA,CACI,WAAY,OACZ,UAAW,EAAA,CACf,EAGJ,OAAIJ,EAAQ,SACRG,EAAS,QAAQH,EAAQ,OAAO,EAG7B,IAAM,CACLA,EAAQ,SACRG,EAAS,UAAUH,EAAQ,OAAO,CAE1C,CACJ,EAAG,CAAA,CAAE,EAGL,KAAM,CACF,GAAAK,GACA,MAAAC,EACA,YAAAC,EACA,SAAAC,GACA,aAAAC,EACA,eAAAC,EAEA,OAAAC,EACA,SAAAC,EACA,OAAAC,GACA,kBAAAC,EACA,QAAAC,EACA,OAAAC,EACA,OAAAC,GACA,WAAAC,EACA,OAAAC,GACA,UAAAC,EACA,WAAAC,EACA,KAAAC,GACA,QAAAC,GACA,QAAAC,GACA,SAAUC,GAEV,cAAAC,EACA,eAAAC,EACA,aAAAC,CAAA,EACArC,EAEEsC,EAAavB,GAAO,SAAWA,GAAO,QAAUA,GAASf,EAAK,MAAQ,gBAGtEuC,EAAmBtC,GAAYC,EAAW,EAAMD,EAAWC,EAAY,IAAM,EAG7EsC,EAAOrB,EAAiB,IAAI,KAAKA,CAAc,EAAE,cAAgBQ,EAEjE,CAAE,KAAAc,CAAA,EAASC,EAAA,EACX,CAAE,YAAAC,EAAa,eAAAC,EAAgB,gBAAAC,EAAiB,iBAAAC,CAAA,EAAqBC,EAAA,EAErEC,EAAYH,EAAgB7C,EAAK,IAAMA,EAAK,WAAY,QAASA,EAAK,cAAeA,EAAK,cAAc,EAExGiD,EAAuB,GAAM,CAC/B,EAAE,eAAA,EACF,EAAE,gBAAA,EAEGR,IAEDO,EACAJ,EAAeH,EAAK,GAAIzC,EAAK,IAAMA,EAAK,WAAY,QAASA,EAAK,cAAeA,EAAK,cAAc,EAEpG2C,EAAYF,EAAK,GAAI,CAAE,GAAGzC,EAAM,KAAM,QAAS,EAEvD,EAGMkD,EAAmB,GAAM,CAM3B,GALA,EAAE,eAAA,EACF,EAAE,gBAAA,EAEF,QAAQ,IAAI,qBAAsBlD,CAAI,EAElCK,EACAA,EAAQL,CAAI,MACT,CAEH,IAAImD,EAEJ,GAAInD,EAAK,SAAW,OAAQ,CAExB,MAAMoD,EAAYpD,EAAK,YAAc,KAC/BqD,EAASrD,EAAK,SAAWA,EAAK,GACpCmD,EAAO,UAAUC,CAAS,IAAIC,CAAM,GAGhCD,IAAc,OACVpD,EAAK,eAAiBA,EAAK,eAC3BmD,GAAQ,WAAWnD,EAAK,aAAa,YAAYA,EAAK,cAAc,GAEpEmD,GAAQ,sBAGpB,MAGIA,EAAO,gBADSnD,EAAK,YAAcA,EAAK,EACV,GAG1BA,EAAK,eAAiBA,EAAK,eAC3BmD,GAAQ,WAAWnD,EAAK,aAAa,YAAYA,EAAK,cAAc,GAGpEmD,GAAQ,sBAKhB,GAAInD,EAAK,SAAW,QAAUA,EAAK,aAAe,KAAM,CACpD,MAAMsD,EAAkB,aAAa,QAAQ,wBAAwB,GAAK,SACpEC,EAAY,IAAI,gBAClBD,IAAoB,UACpBC,EAAU,IAAI,MAAO,MAAM,EAG3BA,EAAU,aACVJ,GAAQ,IAAII,EAAU,SAAA,CAAU,GAExC,CAEA,QAAQ,IAAI,cAAeJ,CAAI,EAC/BK,EAAML,CAAI,CACd,CACJ,EAyBMM,GAtBkB,IAAM,CAC1B,GAAItB,GAAiBC,EAEjB,MAAO,IAAID,CAAa,KAAKC,CAAc,GAAGC,EAAe,KAAKA,CAAY,GAAK,EAAE,GAIzF,MAAMqB,EAAQ,CAAA,EAGd,OAAIlB,GACAkB,EAAM,KAAKlB,EAAK,UAAU,EAI1BnB,GACAqC,EAAM,KAAK,GAAGrC,CAAQ,WAAW,EAG9BqC,EAAM,OAAS,EAAIA,EAAM,KAAK,KAAK,EAAI,IAClD,GAEqB,EAGfC,EAAiB,IAAM,CACzB,GAAI,CAACvC,EAAQ,OAAO,KAUpB,MAAMwC,EARY,CACd,UAAa,CAAE,KAAM,SAAU,MAAO,QAAA,EACtC,SAAY,CAAE,KAAM,YAAa,MAAO,WAAA,EACxC,iBAAoB,CAAE,KAAM,WAAY,MAAO,UAAA,EAC/C,UAAa,CAAE,KAAM,YAAa,MAAO,WAAA,EACzC,OAAU,CAAE,KAAM,SAAU,MAAO,QAAA,CAAS,EAGnBxC,CAAM,EACnC,OAAKwC,EAGDC,EAAC,OAAI,UAAW,sBAAsBD,EAAW,KAAK,GACjD,WAAW,IAAA,CAChB,EALoB,IAO5B,EAGME,EAAqB,IAAM,CAC7B,GAAI,CAACvC,GAAqBH,IAAW,YAAa,OAAO,KAEzD,MAAM2C,EAAkBxC,EAAkB,gBAC1C,GAAIwC,GAAmB,EAAG,OAAO,KAEjC,MAAMC,EAAO,KAAK,MAAMD,GAAmB,GAAK,GAAK,GAAG,EAClDE,EAAQ,KAAK,MAAOF,GAAmB,GAAK,GAAK,KAAQ,GAAK,GAAG,EACjEG,EAAU,KAAK,MAAOH,GAAmB,GAAK,IAAO,EAAE,EAE7D,IAAII,EAAW,GACf,OAAIH,EAAO,EACPG,EAAW,GAAGH,CAAI,KAAKC,CAAK,IACrBA,EAAQ,EACfE,EAAW,GAAGF,CAAK,KAAKC,CAAO,IACxBA,EAAU,EACjBC,EAAW,GAAGD,CAAO,IAErBC,EAAW,OAIXC,EAAC,MAAA,CAAI,UAAU,oBACX,SAAA,CAAAA,EAAC,OAAA,CAAK,UAAU,gBAAgB,SAAA,CAAA,MAAI7C,EAAkB,OAAA,EAAQ,EAC9D6C,EAAC,OAAA,CAAK,UAAU,eAAe,SAAA,CAAA,MAAID,CAAA,CAAA,CAAS,CAAA,EAChD,CAER,EAGME,EAAgB,IAAM,CACxB,GAAI,CAAC7C,GAAWA,EAAQ,SAAW,EAAG,OAAO,KAG7C,MAAM8C,EAAa9C,EAAQ,KAAK+C,GAAUA,EAAO,MAAM,GAAK/C,EAAQ,CAAC,EACrE,OAAO8C,GAAY,MAAQA,CAC/B,EAGME,EAAe,IACb,CAAC/C,GAAUA,EAAO,SAAW,EAAU,KAEpCA,EAAO,MAAM,EAAG,CAAC,EAAE,IAAIgD,GAC1BZ,EAAC,OAAA,CAAiB,UAAU,YAAa,SAAAY,CAAA,EAA9BA,CAAoC,CAClD,EAICC,EAAmBC,GAChBA,EAKDA,EAAK,SAAS,YAAY,GAAKA,EAAK,SAAS,UAAU,GAAKA,EAAK,SAAS,YAAY,EAC/EC,EAAmBD,CAAI,EAI9BA,EAAK,WAAW,MAAM,EACfC,EAAmBD,CAAI,EAI9BA,EAAK,WAAW,GAAG,EAGZC,EAAmB,GADH,8BADJtE,EAAY,OAAS,MACuB,EACpB,GAAGqE,CAAI,EAAE,EAIjDC,EAAmBD,CAAI,EArBnB,kEAyBTE,EAAY,IAAM,CACpB,MAAMC,EAAQjD,GAAaX,EAC3B,OAAK4D,GAGmBA,EAAQ,GAAKA,EAAQ,GAAKA,GAC3B,QAAQ,CAAC,EAJb,KAKvB,EAEA,OACIjB,EAAC,MAAA,CAAI,UAAU,uBAAuB,IAAKpD,EACvC,SAAAoD,EAAC,MAAA,CACG,UAAU,aACV,QAASX,EACT,MAAO,CAAE,OAAQ,SAAA,EACjB,KAAK,SACL,SAAU,EACV,UAAY,GAAM,EACV,EAAE,MAAQ,SAAW,EAAE,MAAQ,OAC/B,EAAE,eAAA,EACFA,EAAgB,CAAC,EAEzB,EAEA,SAAAkB,EAAC,MAAA,CAAI,UAAU,uBACX,SAAA,CAAAP,EAAC,MAAA,CACG,IAAKa,EAAgB1D,CAAW,EAChC,IAAKsB,EACL,QAAQ,OACR,MAAM,MACN,OAAO,KAAA,CAAA,EAIXuB,EAAC,MAAA,CAAI,UAAU,aAAA,CAAc,EAG5BF,EAAA,EAGApB,EAAkB,KACfsB,EAAC,MAAA,CAAI,UAAU,2BACX,SAAAA,EAAC,OAAI,UAAU,qBAAqB,MAAO,CAAE,MAAO,GAAG,KAAK,IAAItB,EAAiB,GAAG,CAAC,GAAA,CAAI,CAAG,CAAA,CAChG,EAIJsB,EAAC,OAAI,UAAU,sBACX,WAAC,OAAA,CAAK,UAAW,iBAAiB7D,EAAK,QAAU,UAAY,UAAY,UAAY,MAAM,GACrF,UAAAA,EAAK,QAAU,UAAY,UAAY,UAAY,MAAA,CACzD,CAAA,CACJ,EAEAoE,EAAC,MAAA,CAAI,UAAU,kBAEX,SAAA,CAAAA,EAAC,MAAA,CAAI,UAAU,kBACX,SAAA,CAAAP,EAAC,KAAA,CAAG,UAAU,mBAAoB,SAAAvB,EAAW,EAC5CG,GACGoB,EAAC,SAAA,CACG,UAAW,sBAAsBb,EAAY,YAAc,EAAE,GAC7D,QAASC,EACT,aAAYD,EAAY,wBAA0B,mBAClD,SAAU,CAACF,EACd,SAAA,IAAA,CAAA,CAED,EAER,EAGCW,GACGI,EAAC,IAAA,CAAE,UAAU,sBAAuB,SAAAJ,EAAa,EAIpDK,EAAA,EAGAO,KACGR,EAAC,KAAE,UAAU,oBACR,aACL,EAIHpC,GAAUA,EAAO,OAAS,KACtB,MAAA,CAAI,UAAU,mBACV,SAAA+C,EAAA,CAAa,CAClB,EAIJJ,EAAC,MAAA,CAAI,UAAU,mBACX,SAAA,CAAAA,EAAC,OAAA,CAAK,UAAU,eAAe,SAAA,CAAA,KAAGS,EAAA,CAAU,EAAE,EAC7C/C,GACGsC,EAAC,OAAA,CAAK,UAAU,kBAAkB,SAAA,CAAA,KAAGtC,EAAW,eAAA,CAAe,CAAA,CAAE,CAAA,CAAA,CAEzE,CAAA,EACJ,EAGC3B,GACG0D,EAAC,SAAA,CACG,UAAU,mBACV,QAAU,GAAM,CACZ,EAAE,eAAA,EACF,EAAE,gBAAA,EACEzD,KAAmBJ,CAAI,CAC/B,EACA,aAAW,gCACd,SAAA,GAAA,CAAA,CAED,CAAA,CAER,CAAA,CAAA,EAER,CAER"}