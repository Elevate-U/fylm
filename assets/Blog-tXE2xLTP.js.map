{"version":3,"file":"Blog-tXE2xLTP.js","sources":["../../src/pages/Blog.jsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useEffect } from 'preact/hooks';\nimport { Link } from 'preact-router/match';\nimport { route } from 'preact-router';\nimport { BlogAPI } from '../utils/blogApi';\nimport { updatePageTitle, updateMetaDescription, updateOpenGraphTags } from '../utils/seoUtils';\nimport { useAuth } from '../context/Auth';\nimport Header from '../components/Header';\nimport './Blog.css';\n\nconst Blog = () => {\n    const [posts, setPosts] = useState([]);\n    const [categories, setCategories] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [totalPages, setTotalPages] = useState(1);\n    const [selectedCategory, setSelectedCategory] = useState('');\n    const [searchQuery, setSearchQuery] = useState('');\n    const [searchResults, setSearchResults] = useState([]);\n    const [isSearching, setIsSearching] = useState(false);\n    const [isAdmin, setIsAdmin] = useState(false);\n    const { user } = useAuth();\n\n    const postsPerPage = 12;\n\n    useEffect(() => {\n        // Update SEO\n        updatePageTitle('Blog - Latest Articles & Insights');\n        updateMetaDescription('Discover the latest articles, insights, and updates from our blog. Stay informed with our expert content.');\n        updateOpenGraphTags({\n            title: 'Blog - Latest Articles & Insights',\n            description: 'Discover the latest articles, insights, and updates from our blog.',\n            image: '/android-chrome-512x512.png',\n            url: window.location.href\n        });\n\n        loadInitialData();\n    }, []);\n\n    // Check admin status when user changes\n    useEffect(() => {\n        const checkAdminStatus = async () => {\n            if (user) {\n                try {\n                    const adminStatus = await BlogAPI.isAdmin();\n                    setIsAdmin(adminStatus);\n                } catch (error) {\n                    console.error('Error checking admin status:', error);\n                    setIsAdmin(false);\n                }\n            } else {\n                setIsAdmin(false);\n            }\n        };\n        \n        checkAdminStatus();\n    }, [user]);\n\n    const loadInitialData = async () => {\n        try {\n            setLoading(true);\n            const [postsData, categoriesData] = await Promise.all([\n                BlogAPI.getPublishedPosts({ limit: postsPerPage, offset: 0 }),\n                BlogAPI.getCategories()\n            ]);\n            \n            setPosts(postsData.posts);\n            setTotalPages(Math.ceil(postsData.total / postsPerPage));\n            setCategories(categoriesData);\n        } catch (err) {\n            setError('Failed to load blog content');\n            console.error('Error loading blog data:', err);\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handlePageChange = async (page) => {\n        try {\n            setLoading(true);\n            const offset = (page - 1) * postsPerPage;\n            const postsData = await BlogAPI.getPublishedPosts({ \n                limit: postsPerPage, \n                offset: offset, \n                categorySlug: selectedCategory \n            });\n            setPosts(postsData.posts);\n            setCurrentPage(page);\n            setTotalPages(Math.ceil(postsData.total / postsPerPage));\n        } catch (err) {\n            setError('Failed to load posts');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleCategoryFilter = async (categorySlug) => {\n        try {\n            setLoading(true);\n            setSelectedCategory(categorySlug);\n            setCurrentPage(1);\n            const postsData = await BlogAPI.getPublishedPosts({ \n                limit: postsPerPage, \n                offset: 0, \n                categorySlug: categorySlug \n            });\n            setPosts(postsData.posts);\n            setTotalPages(Math.ceil(postsData.total / postsPerPage));\n        } catch (err) {\n            setError('Failed to filter posts');\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const handleSearch = async (e) => {\n        e.preventDefault();\n        if (!searchQuery.trim()) return;\n\n        try {\n            setIsSearching(true);\n            const postsData = await BlogAPI.getPublishedPosts({ \n                limit: 50, \n                offset: 0, \n                searchTerm: searchQuery \n            });\n            setSearchResults(postsData.posts);\n        } catch (err) {\n            setError('Search failed');\n        } finally {\n            setIsSearching(false);\n        }\n    };\n\n    const clearSearch = () => {\n        setSearchQuery('');\n        setSearchResults([]);\n    };\n\n    const formatDate = (dateString) => {\n        return new Date(dateString).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        });\n    };\n\n    const renderPagination = () => {\n        if (totalPages <= 1) return null;\n\n        const pages = [];\n        const maxVisiblePages = 5;\n        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));\n        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);\n\n        if (endPage - startPage + 1 < maxVisiblePages) {\n            startPage = Math.max(1, endPage - maxVisiblePages + 1);\n        }\n\n        for (let i = startPage; i <= endPage; i++) {\n            pages.push(\n                <button\n                    key={i}\n                    onClick={() => handlePageChange(i)}\n                    className={`pagination-btn ${currentPage === i ? 'active' : ''}`}\n                    disabled={loading}\n                >\n                    {i}\n                </button>\n            );\n        }\n\n        return (\n            <div className=\"pagination\">\n                <button\n                    onClick={() => handlePageChange(currentPage - 1)}\n                    disabled={currentPage === 1 || loading}\n                    className=\"pagination-btn\"\n                >\n                    Previous\n                </button>\n                {pages}\n                <button\n                    onClick={() => handlePageChange(currentPage + 1)}\n                    disabled={currentPage === totalPages || loading}\n                    className=\"pagination-btn\"\n                >\n                    Next\n                </button>\n            </div>\n        );\n    };\n\n    const displayPosts = searchResults.length > 0 ? searchResults : posts;\n\n    if (loading && posts.length === 0) {\n        return (\n            <div className=\"app\">\n                <Header />\n                <main className=\"main-content\">\n                    <div className=\"container\">\n                        <div className=\"loading-container\">\n                            <div className=\"loading-spinner\"></div>\n                            <p>Loading blog posts...</p>\n                        </div>\n                    </div>\n                </main>\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div className=\"app\">\n                <Header />\n                <main className=\"main-content\">\n                    <div className=\"container\">\n                        <div className=\"error-container\">\n                            <h2>Oops! Something went wrong</h2>\n                            <p>{error}</p>\n                            <button onClick={loadInitialData} className=\"btn btn-primary\">\n                                Try Again\n                            </button>\n                        </div>\n                    </div>\n                </main>\n            </div>\n        );\n    }\n\n    return (\n        <div className=\"app\">\n            <Header />\n            <main className=\"main-content\">\n                <div className=\"container\">\n                    {/* Hero Section */}\n                    <div className=\"page-header\">\n                        <h1>Blog</h1>\n                        <p>Discover insights, updates, and stories from our team</p>\n                    </div>\n\n                    {/* Search and Filters */}\n                    <div className=\"blog-controls\">\n                        <form onSubmit={handleSearch} className=\"search-form\">\n                            <div className=\"search-input-group\">\n                                <input\n                                    type=\"text\"\n                                    placeholder=\"Search articles...\"\n                                    value={searchQuery}\n                                    onChange={(e) => setSearchQuery(e.target.value)}\n                                    className=\"search-input\"\n                                />\n                                <button type=\"submit\" disabled={isSearching} className=\"btn btn-primary\">\n                                    {isSearching ? 'Searching...' : 'Search'}\n                                </button>\n                                {searchResults.length > 0 && (\n                                    <button type=\"button\" onClick={clearSearch} className=\"btn btn-secondary\">\n                                        Clear\n                                    </button>\n                                )}\n                            </div>\n                        </form>\n\n                        <div className=\"category-filters\">\n                            <button\n                                onClick={() => handleCategoryFilter('')}\n                                className={`filter-btn ${selectedCategory === '' ? 'active' : ''}`}\n                            >\n                                All\n                            </button>\n                            {categories.map(category => (\n                                <button\n                                    key={category.id}\n                                    onClick={() => handleCategoryFilter(category.slug)}\n                                    className={`filter-btn ${selectedCategory === category.slug ? 'active' : ''}`}\n                                >\n                                    {category.name}\n                                </button>\n                            ))}\n                        </div>\n                    </div>\n\n                    {/* Posts Grid */}\n                    <div className=\"blog-content\">\n                        {displayPosts.length === 0 ? (\n                            <div className=\"empty-state\">\n                                <h3>No posts found</h3>\n                                <p>{searchResults.length === 0 && searchQuery ? 'Try a different search term.' : 'Check back later for new content.'}</p>\n                            </div>\n                        ) : (\n                            <div className=\"posts-grid\">\n                                {displayPosts.map(post => (\n                                    <article key={post.id} className=\"post-card\">\n                                        {post.featured_image && (\n                                            <div className=\"post-image\">\n                                                <img src={post.featured_image} alt={post.title} loading=\"lazy\" />\n                                            </div>\n                                        )}\n                                        <div className=\"post-content\">\n                                            <div className=\"post-meta\">\n                                                <span className=\"post-category\">{post.category_name}</span>\n                                                <span className=\"post-date\">{formatDate(post.created_at)}</span>\n                                            </div>\n                                            <h2 className=\"post-title\">\n                                                <Link href={`/blog/${post.slug}`}>{post.title}</Link>\n                                            </h2>\n                                            <p className=\"post-excerpt\">{post.excerpt}</p>\n                                            {post.tags && post.tags.length > 0 && (\n                                                <div className=\"post-tags\">\n                                                    {post.tags.map(tag => (\n                                                        <span key={tag} className=\"tag\">{tag}</span>\n                                                    ))}\n                                                </div>\n                                            )}\n                                            <div className=\"post-actions\">\n                                <Link href={`/blog/${post.slug}`} className=\"read-more\">\n                                    Read More →\n                                </Link>\n                                {isAdmin && (\n                                    <button \n                                        className=\"edit-btn\"\n                                        onClick={() => route(`/blog/admin?edit=${post.id}`)}\n                                        title=\"Edit this post\"\n                                    >\n                                        ✏️ Edit\n                                    </button>\n                                )}\n                            </div>\n                                        </div>\n                                    </article>\n                                ))}\n                            </div>\n                        )}\n\n                        {/* Pagination */}\n                        {searchResults.length === 0 && renderPagination()}\n                    </div>\n                </div>\n            </main>\n        </div>\n    );\n};\n\nexport default Blog;"],"names":["Blog","posts","setPosts","useState","categories","setCategories","loading","setLoading","error","setError","currentPage","setCurrentPage","totalPages","setTotalPages","selectedCategory","setSelectedCategory","searchQuery","setSearchQuery","searchResults","setSearchResults","isSearching","setIsSearching","isAdmin","setIsAdmin","user","useAuth","postsPerPage","useEffect","updatePageTitle","updateMetaDescription","updateOpenGraphTags","loadInitialData","adminStatus","BlogAPI","postsData","categoriesData","err","handlePageChange","page","offset","handleCategoryFilter","categorySlug","handleSearch","e","clearSearch","formatDate","dateString","renderPagination","pages","maxVisiblePages","startPage","endPage","i","jsx","jsxs","displayPosts","Header","category","post","Link","tag","route"],"mappings":"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"}