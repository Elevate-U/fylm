{"version":3,"file":"SignUp-CQjQMCHm.js","sources":["../../src/pages/SignUp.jsx"],"sourcesContent":["import { useState } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport { Link } from 'preact-router/match';\nimport { supabase } from '../supabase';\nimport toast from '../components/Toast';\nimport './Auth.css';\n\nexport default function SignUp() {\n  const [loading, setLoading] = useState(false);\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [agreeToTerms, setAgreeToTerms] = useState(false);\n  const [errors, setErrors] = useState({});\n\n\n  const handleSocialLogin = async (provider) => {\n    try {\n      const { error } = await supabase.auth.signInWithOAuth({\n        provider: provider,\n      });\n      if (error) throw error;\n    } catch (error) {\n      toast.error(error.error_description || error.message);\n    }\n  };\n\n  const validateForm = () => {\n    const newErrors = {};\n    \n    if (!email) {\n      newErrors.email = 'Email is required';\n    } else if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n      newErrors.email = 'Please enter a valid email';\n    }\n    \n    if (!password) {\n      newErrors.password = 'Password is required';\n    } else {\n      const passwordRequirements = getPasswordRequirements(password);\n      if (!passwordRequirements.isValid) {\n        newErrors.password = 'Password does not meet requirements';\n      }\n    }\n    \n    if (!confirmPassword) {\n      newErrors.confirmPassword = 'Please confirm your password';\n    } else if (password !== confirmPassword) {\n      newErrors.confirmPassword = 'Passwords do not match';\n    }\n    \n    if (!agreeToTerms) {\n      newErrors.terms = 'You must agree to the Terms of Service and Privacy Policy';\n    }\n    \n    setErrors(newErrors);\n    return Object.keys(newErrors).length === 0;\n  };\n\n  const getPasswordRequirements = (pwd) => {\n    const requirements = {\n      length: pwd.length >= 8,\n      uppercase: /[A-Z]/.test(pwd),\n      number: /\\d/.test(pwd),\n      special: /[!@#$%^&*(),.?\":{}|<>]/.test(pwd)\n    };\n    \n    const metCount = Object.values(requirements).filter(Boolean).length;\n    const isValid = requirements.length && requirements.uppercase && requirements.number;\n    \n    return {\n      ...requirements,\n      isValid,\n      strength: metCount <= 1 ? 'weak' : metCount <= 2 ? 'medium' : metCount <= 3 ? 'good' : 'strong'\n    };\n  };\n\n  const handleSignUp = async (e) => {\n    e.preventDefault();\n    \n    if (!validateForm()) {\n      return;\n    }\n\n    try {\n      setLoading(true);\n      setErrors({});\n      \n      // Try to sign up\n      const { data, error: signUpError } = await supabase.auth.signUp({\n        email: email.trim(),\n        password: password,\n      });\n      // If a user object is returned, try to log in immediately\n      if (data && data.user) {\n        const { error: loginError } = await supabase.auth.signInWithPassword({\n          email: email,\n          password: password,\n        });\n        if (!loginError) {\n          toast.success('Account created and logged in successfully!');\n          route('/', true);\n          return;\n        } else {\n          // User is unconfirmed or password is wrong, show confirmation message\n          toast.success('Check your email for the confirmation link!');\n          return;\n        }\n      }\n      // If error, check if it's because the user already exists\n      if (\n        signUpError &&\n        signUpError.message &&\n        (signUpError.message.toLowerCase().includes('user already registered') ||\n         signUpError.message.toLowerCase().includes('already registered') ||\n         signUpError.message.toLowerCase().includes('already exists'))\n      ) {\n        // Try to log in with the provided password\n        const { error: loginError } = await supabase.auth.signInWithPassword({\n          email: email,\n          password: password,\n        });\n        if (!loginError) {\n          toast.success('Logged in successfully!');\n          route('/', true);\n          return;\n        } else {\n          toast.error('You have already signed up with this email. Please log in.');\n          setTimeout(() => {\n            route('/login', true);\n          }, 1500);\n          return;\n        }\n      }\n      // Other errors\n      if (signUpError) {\n        if (signUpError.message.includes('Password should be at least 6 characters')) {\n          setErrors({ password: 'Password must be at least 8 characters long' });\n        } else {\n          setErrors({ general: signUpError.error_description || signUpError.message });\n        }\n      }\n    } catch (error) {\n      setErrors({ general: error.error_description || error.message });\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const isFormValid = () => {\n    return email && password && confirmPassword && password === confirmPassword && \n           getPasswordRequirements(password).isValid && agreeToTerms;\n  };\n\n  const passwordRequirements = getPasswordRequirements(password);\n\n  return (\n    <div className=\"auth-container\">\n      <div className=\"auth-form\">\n        <h1 className=\"auth-header\">Create an account</h1>\n        <p className=\"description\">Join us to get started.</p>\n        \n        {errors.general && (\n          <div className=\"error-message\">\n            {errors.general}\n          </div>\n        )}\n        \n        <form onSubmit={handleSignUp} noValidate>\n          <div className=\"input-group\">\n            <label htmlFor=\"email\">EMAIL</label>\n            <input\n              id=\"email\"\n              className={`input-field ${errors.email ? 'error' : ''}`}\n              type=\"email\"\n              placeholder=\"Enter your email\"\n              value={email}\n              onChange={(e) => {\n                setEmail(e.target.value);\n                if (errors.email) setErrors({ ...errors, email: null });\n              }}\n              required\n              aria-describedby={errors.email ? \"email-error\" : undefined}\n              aria-invalid={!!errors.email}\n            />\n            {errors.email && <span id=\"email-error\" className=\"field-error\" role=\"alert\">{errors.email}</span>}\n          </div>\n          \n          <div className=\"input-group\">\n            <label htmlFor=\"password\">PASSWORD</label>\n            <div className=\"password-input-container\">\n              <input\n                id=\"password\"\n                className={`input-field password-field ${errors.password ? 'error' : ''}`}\n                type={showPassword ? \"text\" : \"password\"}\n                placeholder=\"Create a password\"\n                value={password}\n                onChange={(e) => {\n                  setPassword(e.target.value);\n                  if (errors.password) setErrors({ ...errors, password: null });\n                }}\n                required\n                aria-describedby={errors.password ? \"password-error\" : undefined}\n                aria-invalid={!!errors.password}\n              />\n              <button\n                type=\"button\"\n                className=\"password-toggle-eye\"\n                onClick={() => setShowPassword(!showPassword)}\n                aria-label={showPassword ? \"Hide password\" : \"Show password\"}\n              >\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  {showPassword ? (\n                    <>\n                      <path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                      <path d=\"M1 1l22 22\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                    </>\n                  ) : (\n                    <>\n                      <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                      <circle cx=\"12\" cy=\"12\" r=\"3\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                    </>\n                  )}\n                </svg>\n              </button>\n            </div>\n            \n            {password && (\n              <div className=\"password-strength\">\n                <div className=\"password-strength-bar\">\n                  <div className={`password-strength-fill ${passwordRequirements.strength}`}></div>\n                </div>\n                <div className=\"password-requirements\">\n                  <div className={`requirement ${passwordRequirements.length ? 'met' : ''}`}>\n                    <span className=\"requirement-icon\">{passwordRequirements.length ? '✓' : '○'}</span>\n                    8+ characters\n                  </div>\n                  <div className={`requirement ${passwordRequirements.uppercase ? 'met' : ''}`}>\n                    <span className=\"requirement-icon\">{passwordRequirements.uppercase ? '✓' : '○'}</span>\n                    1 uppercase letter\n                  </div>\n                  <div className={`requirement ${passwordRequirements.number ? 'met' : ''}`}>\n                    <span className=\"requirement-icon\">{passwordRequirements.number ? '✓' : '○'}</span>\n                    1 number\n                  </div>\n                </div>\n              </div>\n            )}\n            \n            {errors.password && <span id=\"password-error\" className=\"field-error\" role=\"alert\">{errors.password}</span>}\n          </div>\n          \n          <div className=\"input-group\">\n            <label htmlFor=\"confirmPassword\">CONFIRM PASSWORD</label>\n            <div className=\"password-input-container\">\n              <input\n                id=\"confirmPassword\"\n                className={`input-field password-field ${errors.confirmPassword ? 'error' : ''}`}\n                type={showConfirmPassword ? \"text\" : \"password\"}\n                placeholder=\"Confirm your password\"\n                value={confirmPassword}\n                onChange={(e) => {\n                  setConfirmPassword(e.target.value);\n                  if (errors.confirmPassword) setErrors({ ...errors, confirmPassword: null });\n                }}\n                required\n                aria-describedby={errors.confirmPassword ? \"confirm-password-error\" : undefined}\n                aria-invalid={!!errors.confirmPassword}\n              />\n              <button\n                type=\"button\"\n                className=\"password-toggle-eye\"\n                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                aria-label={showConfirmPassword ? \"Hide password\" : \"Show password\"}\n              >\n                <svg width=\"20\" height=\"20\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                  {showConfirmPassword ? (\n                    <>\n                      <path d=\"M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                      <path d=\"M1 1l22 22\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                    </>\n                  ) : (\n                    <>\n                      <path d=\"M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                      <circle cx=\"12\" cy=\"12\" r=\"3\" stroke=\"currentColor\" strokeWidth=\"2\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\n                    </>\n                  )}\n                </svg>\n              </button>\n            </div>\n            {errors.confirmPassword && <span id=\"confirm-password-error\" className=\"field-error\" role=\"alert\">{errors.confirmPassword}</span>}\n          </div>\n          \n          <div className=\"terms-group\">\n            <label className=\"terms-checkbox\">\n              <input\n                type=\"checkbox\"\n                checked={agreeToTerms}\n                onChange={(e) => {\n                  setAgreeToTerms(e.target.checked);\n                  if (errors.terms) setErrors({ ...errors, terms: null });\n                }}\n                className={errors.terms ? 'error' : ''}\n              />\n              <span className=\"checkmark\"></span>\n              <span className=\"terms-text\">\n                I agree to the \n                <Link href=\"/terms-of-service\" className=\"terms-link\">\n                  Terms of Service\n                </Link>\n                {' and '}\n                <Link href=\"/privacy-policy\" className=\"terms-link\">\n                  Privacy Policy\n                </Link>\n              </span>\n            </label>\n            {errors.terms && <span className=\"field-error\" role=\"alert\">{errors.terms}</span>}\n          </div>\n          <div>\n            <button className=\"button\" disabled={loading || !isFormValid()}>\n              {loading ? <span>Creating Account...</span> : <span>Create Account</span>}\n            </button>\n          </div>\n        </form>\n\n        <div className=\"auth-divider\">\n          <span>or</span>\n        </div>\n\n        <div className=\"social-login-group\">\n          <button\n            type=\"button\"\n            className=\"social-button google\"\n            onClick={() => handleSocialLogin('google')}\n          >\n            Sign up with Google\n          </button>\n        </div>\n\n        <div className=\"auth-links\">\n          <p>\n            Already have an account?\n            <a href=\"/login\" className=\"button\"> Log in</a>\n          </p>\n        </div>\n      </div>\n\n    </div>\n  );\n}"],"names":["SignUp","loading","setLoading","useState","email","setEmail","password","setPassword","confirmPassword","setConfirmPassword","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","agreeToTerms","setAgreeToTerms","errors","setErrors","handleSocialLogin","provider","error","supabase","toast","validateForm","newErrors","getPasswordRequirements","pwd","requirements","metCount","isValid","handleSignUp","e","data","signUpError","loginError","route","isFormValid","passwordRequirements","jsxs","jsx","Fragment","Link"],"mappings":"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"}