import{b as ys,s as bs,a as _s,h as ws,$ as j,A,i as $s,j as Ss,k as Xe,l as Es,o as Ts,m as Ze,u as e,g as es,I as ss}from"./index-DJKKYvGv.js";import{d,A as v,y as w,T as Ps,q as ks,k as Is}from"./react-vendor-BYlzYzcd.js";import{H as As}from"./Helmet-Hq4EtTxH.js";import{M as Ls}from"./MovieCard-BNWtjiUN.js";import{r as Us,a as Rs}from"./favorites-7Q9RYkW7.js";/* empty css                  */const qs=rs=>{const[u,te]=d(null),[$e,Se]=d([]),[Ee,Te]=d([]),[E,q]=d(""),[ts,ne]=d(!0),[Cs,Ms]=d(!1);v(null);const[g,z]=d(null),[f,V]=d(null),[L,Pe]=d("videasy"),[ke,ns]=d(["videasy","vidsrc","embedsu"]),[B,Ie]=d(null),[os,Ae]=d(!1),[G,as]=d(!1),[C,N]=d(null),[Le,Ue]=d(!1),[Re,J]=d(!1),k=v(),[Ce,xs]=d(null),{id:c,type:r,season:U,episode:R}=rs.matches,[I,W]=d(r==="anime"?null:c),[M,oe]=d(r==="anime"?"anime":r),[is,ae]=d(!1),[O,ie]=d(!1),[Me,le]=d([]),ce=v(null),[ls,H]=d([]),[S,K]=d(null),[de,Q]=d(!1),[D,Ds]=d(0),[ue,X]=d(1),[me,xe]=d(1),[ge,De]=d(!1),x=10,Z=v(!1),he=v(null),fe=v(!1),pe=v(!1),cs=v(!1),ds=v(null),us=v(!1),ee=v(new Set),ms=v(0);v(0);const ve=v(null);v({});const se=v(0),F=v(null),{user:Fe,session:Ne}=ys(),y=Fe?.id,re="tv";w(()=>{(async()=>{const{data:{session:n},error:l}=await bs.auth.getSession();l?console.error("🔍 Auth check error:",l):n?console.log("🔍 Auth status: Authenticated user",n.user.id):console.log("🔍 Auth status: No active session")})()},[]);const{setCurrentMediaItem:ye,favoritesFetched:We,fetchContinueWatching:Oe,isShowFavorited:gs}=_s();w(()=>{if(r==="tv"||r==="anime")if(U&&R&&!isNaN(parseInt(U))&&!isNaN(parseInt(R))){const n=parseInt(U,10),l=parseInt(R,10);z(n),V(l)}else z(1),V(1);else z(null),V(null)},[r,U,R]);const He=Ps(()=>r!=="movie"||!S||!S.progress_seconds||S.progress_seconds<=0?0:S.duration_seconds>0?Math.min(100,S.progress_seconds/S.duration_seconds*100):S.progress_seconds>30?5:2,[r,S]),Ye=ks((s,n)=>{if(!s||!n)return 1;const l=Math.ceil(s/x);return Math.max(1,Math.min(l,Math.ceil(n/x)))},[x]),je=v(y);w(()=>{je.current=y},[y]);const hs=()=>{$e.find(n=>n.type==="Trailer"&&n.site==="YouTube")?ae(!0):alert("No trailer available for this movie.")};w(()=>()=>{ee.current.forEach(s=>clearTimeout(s)),ee.current.clear()},[g,f]),w(()=>{const s=async()=>{document.fullscreenElement||document.webkitFullscreenElement||document.mozFullScreenElement?console.log("📱 Entered fullscreen mode"):(console.log("📱 Exited fullscreen mode, syncing progress..."),[500,2e3,5e3].forEach((t,h)=>{setTimeout(()=>{y&&(console.log(`🔄 Sync attempt ${h+1} after fullscreen exit`),ws(y).then(i=>{i&&(console.log(`✅ Fullscreen sync attempt ${h+1} successful`),Oe())}).catch(i=>{console.error(`❌ Sync attempt ${h+1} failed:`,i)}))},t)}))};return document.addEventListener("fullscreenchange",s),document.addEventListener("webkitfullscreenchange",s),document.addEventListener("mozfullscreenchange",s),()=>{document.removeEventListener("fullscreenchange",s),document.removeEventListener("webkitfullscreenchange",s),document.removeEventListener("mozfullscreenchange",s)}},[y]),w(()=>(u&&ye({...u,type:r}),()=>{ye(null)}),[u,r,ye]),w(()=>{if(!c||!r){j("/");return}r==="anime"?(oe("anime"),W(null)):(W(c),oe(r))},[c,r]),w(()=>{if(r!=="anime"&&!I||r==="anime"&&!c)return;q(""),ie(!1),le([]),te(null),ne(!0),H([]),fe.current=!1,pe.current=!1,cs.current=!1,ds.current=null,us.current=!1,X(1),De(!1),ee.current.forEach(n=>clearTimeout(n)),ee.current.clear(),ms.current=0,ve.current=null,(async()=>{ne(!0);try{const n=new AbortController,l=setTimeout(()=>n.abort(),15e3),t=c,h=r==="anime"?`${A}/tmdb/anime/${t}/enhanced`:`${A}/tmdb/${M}/${I}`,i=r==="anime"?null:`${A}/tmdb/${M}/${I}/videos`,o=r==="anime"?`${A}/tmdb/anime/${t}/recommendations`:`${A}/tmdb/${M}/${I}/recommendations`,a=async(b,T)=>{if(!b)return null;try{const $=await fetch(b,{signal:n.signal});if(!$.ok)throw new Error(`HTTP ${$.status}: ${$.statusText}`);const P=await $.json();return r==="anime"&&P._conversion?.tmdbId&&W(P._conversion.tmdbId),r==="anime"&&P.tmdb_id&&W(P.tmdb_id),P}catch($){if(console.error(`${T}:`,$),T.includes("videos")||T.includes("recommendations"))return{results:[]};throw $}};let p,m,_;r==="anime"?(p=await a(h,"Error fetching anime details"),m={results:p?.videos?.results||[]},_=await a(o,"Error fetching recommendations")):[p,m,_]=await Promise.all([a(h,"Error fetching media details"),a(i,"Error fetching videos"),a(o,"Error fetching recommendations")]),clearTimeout(l),te(p),Se(m.results||[]),Te(_.results||[])}catch{te(null),Se([]),Te([])}finally{ne(!1)}})()},[I,M,U,R,y]),w(()=>{(async()=>{if(!y||!u||!c||!r){r==="movie"?K(null):(r==="tv"||r==="anime")&&H([]);return}try{if((r==="tv"||r==="anime")&&u.seasons&&u.seasons.length>0&&!(U&&R&&!isNaN(parseInt(U))&&!isNaN(parseInt(R)))&&!pe.current&&g!==null&&f!==null){console.log("🎬 Checking for continue watching episode...");const t=await $s(y,c,re);t&&t.season_number&&t.episode_number?(console.log(`🔄 Continue watching: S${t.season_number}E${t.episode_number}`),setTimeout(()=>{z(t.season_number),V(t.episode_number);const h=`/watch/${r}/${c}/season/${t.season_number}/episode/${t.episode_number}`;j(h,!0)},100)):console.log("📭 No continue watching data found, starting from beginning"),pe.current=!0}if(r==="tv"||r==="anime"){const l=await Ss(y,c,re);console.log(`📺 [Watch] Series history loaded for ${r} ${c}:`,l),H(l)}const n=await Xe(y,c,r);console.log("Progress data loaded:",n),K(n)}catch(n){console.error("Error loading user-specific data:",n)}})()},[y,u,c,r,U,R,re]),w(()=>{g!==null&&!ge&&X(1)},[g]),w(()=>{(async()=>{if(r!=="tv"&&r!=="anime"||!g||g===null)return;const n=r==="anime"?c:I;if(n){Ae(!0);try{const l=r==="anime"?`${A}/tmdb/anime/${n}/season/${g}`:`${A}/tmdb/${M}/${n}/season/${g}`,t=await fetch(l);if(!t.ok)throw new Error(`Failed to fetch season details: ${t.statusText}`);const h=await t.json();if(Ie(h),!ge){const i=h.episodes.length,o=Ye(f,i);X(o),De(!0)}}catch(l){console.error("Error fetching season details:",l),Ie(null)}finally{Ae(!1)}}})()},[c,r,re,g,f,ge,Ye]),w(()=>{const s=`${g}-${f}`,n=he.current&&he.current!==s;if(he.current=s,Z.current&&!n){Z.current=!1;return}n&&(Z.current=!1),(async()=>{if(!I||!M)return;const t=r==="anime"?c:I;if(!t)return;N(null),J(!1),k.current&&clearTimeout(k.current),k.current=setTimeout(()=>J(!0),1e4);const h=r==="anime"&&u&&(!u.seasons||u.seasons.length===0);if((r==="tv"||r==="anime")&&!h&&(g===null||f===null)){console.log("Season/episode not set, aborting stream URL fetch."),clearTimeout(k.current);return}try{let i=`${A}/stream-url?type=${r}&id=${t}&source=${L}`;(r==="tv"||r==="anime"&&!h)&&(i+=`&season=${g}&episode=${f}`),r==="anime"&&G&&(i+="&dub=true"),L==="videasy"&&(D>0&&(i+=`&progress=${Math.round(D)}`),(r==="tv"||r==="anime")&&(i+="&nextEpisode=true&episodeSelector=true&autoplayNextEpisode=true")),console.log(`Fetching stream URL: ${i}`);const o=await fetch(i);if(!o.ok)throw new Error(`Server responded with ${o.status}`);const a=await o.json();if(clearTimeout(k.current),a.url)console.log(`Stream URL generated: ${a.url}`),q(a.url),ie(a.isDirectSource||!1),le(a.qualities||[]),a.availableSources&&a.availableSources.length>0&&ns(a.availableSources),a.currentSource&&(Z.current=!0,Pe(a.currentSource)),N(null),Q(!0);else throw new Error(a.message||"No stream URL returned from API")}catch(i){clearTimeout(k.current),console.error("Error fetching stream URL:",i.message),N(`Failed to load video: ${i.message}. Try changing the source or refreshing.`),Q(!1)}})()},[I,M,g,f,L,G,u,D,y]),w(()=>{const s=je.current;if(s&&console.log("🔐 Progress tracking setup:",{hasUser:!0,userId:s,hasMediaDetails:!!u}),!s||!u){s&&!u&&console.log("⚠️ Progress tracking disabled - media details not yet available");return}const n=async(t,h)=>{console.log(`📊 Progress update received via ${h}: `,t);const i=t.season||g,o=t.episode||f;if(t&&t.progress>=0&&t.duration>0){const a=Date.now();if(a-se.current<2e3)return;F.current&&clearTimeout(F.current),se.current=a;try{console.log(`🎬 Attempting to save progress for ${r} ${c}:`,{progress:t.progress,duration:t.duration,season:i,episode:o});const p=await Ze(s,{...u,id:u.id,type:r,season:i,episode:o},t.progress,t.duration,!1,Ne).catch(m=>{if(console.error("❌ Progress save error caught:",m),m.message?.includes("timeout")||m.message?.includes("auth")){const _=`offline_progress_${r}_${c}_${i||0}_${o||0}`,b={media_id:c,media_type:r,season_number:i,episode_number:o,progress_seconds:t.progress,duration_seconds:t.duration,timestamp:new Date().toISOString()};return localStorage.setItem(_,JSON.stringify(b)),console.log("📱 Saved to localStorage after error"),!0}return!1});if(p){if(console.log("✅ Progress saved successfully"),Oe(),i===g&&o===f){const m=typeof p=="object"&&p.progress_seconds!==void 0?p:{progress_seconds:t.progress,duration_seconds:t.duration};console.log("📊 Using progress data for state update:",m),r==="movie"?K(m):(r==="tv"||r==="anime")&&H(_=>{const b=[..._],T=b.findIndex(P=>P.season_number===i&&P.episode_number===o),$={media_id:parseInt(c,10),media_type:r,season_number:i,episode_number:o,progress_seconds:m.progress_seconds,duration_seconds:m.duration_seconds};return T>-1?b[T]={...b[T],...$}:b.push($),b})}}else console.error("❌ Failed to save progress, will retry on next update")}catch(p){console.error("❌ An unexpected error occurred while saving progress:",p);try{const m=`offline_progress_${r}_${c}_${i||0}_${o||0}`,_={media_id:c,media_type:r,season_number:i,episode_number:o,progress_seconds:t.progress,duration_seconds:t.duration,timestamp:new Date().toISOString()};localStorage.setItem(m,JSON.stringify(_)),console.log("📱 Saved to localStorage after exception")}catch(m){console.error("💔 All save mechanisms failed:",m)}}}else console.log("⚠️ Progress update ignored (insufficient data):",{hasProgressData:!!t,progress:t?.progress,duration:t?.duration,meetsThreshold:t?.progress>=0&&t?.duration>0})};let l;if(O){const t=ce.current;if(!t)return;const h=async()=>{Es()&&Ts(t);const o=await Xe(y,c,r,g,f);o&&o.progress_seconds&&(t.currentTime=o.progress_seconds)},i=async()=>{if(t.currentTime>0){const o=Date.now();if(o-se.current<2e3)return;F.current&&clearTimeout(F.current),se.current=o;const a={progress:Math.round(t.currentTime),duration:Math.round(t.duration),percentage:t.duration>0?t.currentTime/t.duration*100:0};console.log("🎬 Direct video - saving progress:",a);const p=await Ze(y,{...u,id:u.id,type:r,season:g,episode:f},a.progress,a.duration,!1,Ne);if(p){console.log("✅ Direct video progress saved successfully");const m=typeof p=="object"&&p.progress_seconds!==void 0?p:{progress_seconds:a.progress,duration_seconds:a.duration};console.log("📊 Using direct video progress data for state update:",m),r==="movie"?K(m):(r==="tv"||r==="anime")&&H(_=>{const b=[..._],T=b.findIndex(P=>P.season_number===g&&P.episode_number===f),$={media_id:parseInt(c,10),media_type:r,season_number:g,episode_number:f,progress_seconds:m.progress_seconds,duration_seconds:m.duration_seconds};return T>-1?b[T]={...b[T],...$}:b.push($),b})}else console.error("❌ Failed to save direct video progress")}};return t.addEventListener("loadedmetadata",h),t.addEventListener("timeupdate",i),()=>{t.removeEventListener("loadedmetadata",h),t.removeEventListener("timeupdate",i)}}else return l=t=>{const h=["player.videasy.net","vidsrc.to","embed.su","vidsrc.xyz","vidsrc.in","vidsrc.pm"],i=new URL(t.origin);if(h.includes(i.hostname))try{const o=typeof t.data=="string"?JSON.parse(t.data):t.data;if(o&&o.type==="PROGRESS_UPDATE"&&o.data){const a={progress:o.data.progress?.watched,duration:o.data.progress?.duration,season:o.data.season||g,episode:o.data.episode||f};n(a,"PROGRESS_UPDATE");return}if(o.type==="MEDIA_DATA"&&o.data){let a=o.data;if(typeof a=="string")try{a=JSON.parse(a)}catch(_){console.error("Error parsing double-encoded MEDIA_DATA string:",_);return}const p=`${r}-${c}`,m=a[p];if(m&&m.progress){const _={progress:m.progress.watched,duration:m.progress.duration,season:m.last_season_watched,episode:m.last_episode_watched};n(_,"MEDIA_DATA")}return}if(o.type==="PLAYER_EVENT"&&o.data)if(o.data.event==="timeupdate"){const a={progress:o.data.time,duration:o.data.duration};a.progress&&a.duration&&n(a,"PLAYER_EVENT")}else o.data.event==="ended"&&(r==="tv"||r==="anime")?console.log('Player reported "ended" event - Videasy will handle next episode automatically.'):o.data.event==="player_ready"&&(console.log("Player is ready."),Q(!0))}catch(o){console.error("Error processing message from player:",{origin:t.origin,data:t.data,error:o.message})}},window.addEventListener("message",l),()=>{window.removeEventListener("message",l),F.current&&clearTimeout(F.current)}},[u,O,ce,g,f,y]),w(()=>{if(E&&!O&&!de){const s=setTimeout(()=>{de||(console.warn("Player ready timeout, starting fallback progress tracking."),fs())},1e4);return()=>clearTimeout(s)}},[E,O,de]);const fs=()=>{const s=setInterval(()=>{document.hasFocus()&&console.log("Fallback: Checking for progress...")},15e3);return()=>clearInterval(s)};if(w(()=>(J(!1),!E&&!C&&(k.current=setTimeout(()=>{J(!0),console.log("Stream timeout error")},25e3)),()=>{k.current&&clearTimeout(k.current)}),[E,C,g,f,L]),Ce)return e("div",{class:"container",style:{textAlign:"center",marginTop:"50px"},children:e("div",{class:"error-state",children:[e("h2",{children:"An Error Occurred"}),e("p",{children:Ce}),e("button",{onClick:()=>j("/"),class:"btn btn-primary",children:"Go Home"})]})});if(ts)return e("div",{class:"loading-state",children:[e("div",{class:"loading-spinner"}),e("p",{children:"Loading media details..."}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]});if(!u)return e("div",{class:"container",children:e("div",{class:"error-state",children:[e("h2",{children:"Unable to Load Media"}),e("p",{children:"We couldn't load the details for this content. This could be due to:"}),e("ul",{children:[e("li",{children:"Network connectivity issues"}),e("li",{children:"The content may no longer be available"}),e("li",{children:"Server maintenance"})]}),e("button",{onClick:()=>window.location.reload(),class:"btn btn-primary",style:{marginTop:"20px"},children:"Try Again"})]})});const{title:be,name:_e,overview:ps,vote_average:Fs,release_date:qe,first_air_date:Y,last_air_date:ze,runtime:Ve,number_of_seasons:Be,genres:Ge,poster_path:Je,status:Ke}=u,Qe=r==="anime"?c:u.id,we=gs(Qe,r);(qe||Y)&&new Date(qe||Y).getFullYear();const vs=()=>{const s={...u,id:Qe,type:r};we?Us(s):Rs(s)};return e("div",{children:[e(As,{children:e("title",{children:[be||_e," - Fovi"]})}),is&&e("div",{className:"trailer-modal",onClick:()=>ae(!1),children:e("div",{className:"trailer-content",onClick:s=>s.stopPropagation(),children:[e("span",{className:"close-trailer",onClick:()=>ae(!1),children:"×"}),e("iframe",{src:`https://www.youtube.com/embed/${$e.find(s=>s.type==="Trailer")?.key}?autoplay=1`,frameBorder:"0",allow:"autoplay; encrypted-media; fullscreen",allowFullScreen:!0,title:"Trailer"})]})}),e("div",{class:"player-container",children:[!E&&C&&e("div",{class:"stream-error-message",children:[e("p",{children:C.message}),C.canRetry&&e("div",{class:"error-actions",children:[e("button",{onClick:async()=>{Ue(!0),setTimeout(()=>{(async()=>{const n=`${A}/stream-url?type=${r}&id=${c}&source=${L}${r==="tv"||r==="anime"?`&season=${g}&episode=${f}`:""}${r==="anime"?`&dub=${G}`:""}`;try{const l=await fetch(n),t=await l.json();if(l.ok)q(t.url),ie(t.isDirectSource),le(t.qualities||[]),N(null);else throw new Error(t.message)}catch(l){console.error("Retry failed:",l),N({message:"Retry failed. Please try selecting a different source.",canRetry:!0})}Ue(!1)})()},1e3)},disabled:Le,class:"btn retry-btn",children:Le?"Retrying...":"Retry"}),e("p",{children:"Or try selecting a different source from the list below."})]})]}),!E&&!C&&!Re&&e("div",{class:"stream-loading",children:[e("p",{children:"Loading video stream... "}),e("p",{children:"If your video doesnt load refresh the page or pick a new server."})]}),!E&&!C&&Re&&e("div",{class:"stream-error-message",children:[e("p",{children:"Sorry, this episode failed to load. Please refresh the page."}),e("div",{class:"error-actions",children:[e("button",{onClick:()=>window.location.reload(),class:"btn retry-btn",children:"Refresh"}),e("p",{children:"Or try selecting a different source from the list below if refreshing doesn't work."})]})]}),O?e("video",{ref:ce,src:E,controls:!0,autoPlay:!0,playsInline:!0,preload:"metadata",width:"100%",style:{maxWidth:"100%",height:"auto"},"x-webkit-airplay":"allow","webkit-playsinline":"true"}):E&&e("iframe",{src:E,width:"100%",height:"100%",style:{position:"absolute",top:0,left:0,width:"100%",height:"100%"},frameBorder:"0",allowFullScreen:!0,allow:"autoplay; fullscreen; picture-in-picture; encrypted-media; accelerometer; gyroscope; web-share",title:"Video Player",loading:"eager",referrerPolicy:"no-referrer-when-downgrade",importance:"high",onLoad:()=>{console.log("🎬 Player iframe loaded"),Q(!0),L!=="videasy"&&D>30?setTimeout(()=>{const s=document.querySelector("iframe");if(s&&s.contentWindow)try{s.contentWindow.postMessage({type:"SEEK_TO",time:D},"*"),console.log(`📍 Sent seek command to restore progress: ${D}s`)}catch(n){console.log("Could not send seek command:",n)}},500):console.log(L==="videasy"?"📍 Videasy native resume - no seeking needed":"📍 No significant progress to resume, starting from beginning")}})]}),e("div",{class:"container",children:[e("div",{class:"media-details-layout",children:[e("div",{class:"poster",children:[e("img",{src:es(Je?`${ss}${Je}`:"https://via.placeholder.com/500x750.png?text=No+Image"),alt:be||_e}),He>0&&e("div",{class:"movie-progress-container",children:[e("div",{class:"movie-progress-bar",children:e("div",{class:"movie-progress",style:{width:`${Math.max(2,He)}%`}})}),e("div",{class:"movie-progress-text",children:S.duration_seconds>0?`${Math.floor(S.progress_seconds/60)}m / ${Math.floor(S.duration_seconds/60)}m watched`:`${Math.floor(S.progress_seconds/60)}m watched`})]})]}),e("div",{class:"details",children:[e("div",{class:"title-container",children:[e("h1",{children:be||_e}),e("button",{onClick:vs,class:`favorite-btn ${we?"favorited":""}`,disabled:!We,children:We?we?"♥ Favorited":"♡ Favorite":"..."}),e("button",{onClick:hs,class:"favorite-btn trailer-btn",children:[e("i",{class:"fas fa-film"})," Trailer"]}),!Fe&&e("span",{class:"login-hint",children:e("small",{children:[e("a",{href:"/login",style:{color:"#007bff",textDecoration:"none"},children:"Log in"})," to save favorites, track progress & continue watching"]})})]}),e("div",{class:"meta",children:[e("span",{class:"rating",children:["★ ",u.vote_average?u.vote_average.toFixed(1):"N/A"]}),(r==="tv"||r==="anime")&&Y&&e("span",{style:{marginLeft:8},children:(()=>{const s=Y?new Date(Y).getFullYear():null;let n=null;return ze?n=new Date(ze).getFullYear():Ke&&Ke.toLowerCase()==="ended"&&(n=s),s&&n&&s===n?`${s}`:s&&n&&n!==s?`${s} - ${n}`:s?`${s} -`:""})()}),Ve&&e("span",{children:[Ve," min"]}),Be&&e("span",{children:[Be," Seasons"]})]}),e("div",{class:"genres",children:Ge&&Ge.map(s=>e("span",{class:"genre-tag",children:s.name}))}),e("p",{class:"overview",children:ps}),Me.length>0&&e("div",{class:"quality-selector",children:[e("label",{children:"Quality:"}),Me.map(s=>e("button",{class:`quality-btn ${E===s.url?"active":""}`,onClick:()=>q(s.url),children:[s.quality,"p"]}))]})]})]}),r==="anime"&&e("div",{class:"select-container",children:[e("label",{for:"dub-select",children:"Audio:"}),e("select",{id:"dub-select",value:G,onChange:s=>as(s.target.value==="true"),children:[e("option",{value:"false",children:"Subbed"}),e("option",{value:"true",children:"Dubbed"})]})]}),e("div",{class:"selectors-container",children:[(r==="tv"||r==="anime")&&u&&u.seasons&&e("div",{class:"select-container",children:[e("label",{children:"Season:"}),e("div",{class:"selector-buttons",children:u.seasons.filter(s=>s.season_number>0).map(s=>e("button",{class:`selector-btn ${g===s.season_number?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected season ${s.season_number}`),fe.current=!0,ve.current=null;const n=`/watch/${r}/${c}/season/${s.season_number}/episode/1`;j(n,!0)},children:s.name},s.id))})]}),ke.length>1&&e("div",{class:"select-container",children:[e("label",{children:"Source:"}),e("div",{class:"selector-buttons",children:ke.map(s=>e("button",{class:`selector-btn ${L===s?"active":""}`,onClick:()=>Pe(s),children:s},s))})]})]}),(r==="tv"||r==="anime")&&g!==null&&f!==null&&e("div",{class:"episodes-container",children:[e("h3",{children:"Episodes"}),os?e("div",{class:"loading-spinner"}):e(Is,{children:[e("div",{class:"episode-list",children:B?.episodes?.slice((ue-1)*x,ue*x)?.map(s=>{const n=ls.find(t=>t.season_number===g&&t.episode_number===s.episode_number),l=n&&n.progress_seconds>0?n.duration_seconds&&n.duration_seconds>0?Math.min(100,n.progress_seconds/n.duration_seconds*100):n.progress_seconds>30?5:2:0;return n&&n.progress_seconds>0&&console.log(`📊 Episode ${s.episode_number} progress:`,{progress_seconds:n.progress_seconds,duration_seconds:n.duration_seconds,progressPercent:l}),e("div",{class:`episode-card ${s.episode_number===f?"active":""}`,onClick:()=>{console.log(`🎯 User manually selected episode ${s.episode_number}`),fe.current=!0,ve.current=null;const t=`/watch/${r}/${c}/season/${g}/episode/${s.episode_number}`;j(t,!0)},children:[e("div",{class:"episode-card-image",children:[e("img",{src:es(s.still_path?s.still_path.startsWith("/anilist_images/")||s.still_path.startsWith("http")?s.still_path:`${ss}${s.still_path}`:`https://via.placeholder.com/300x169.png?text=${encodeURIComponent(s.name)}`),alt:s.name}),e("div",{class:"episode-number-badge",children:s.episode_number}),l>0&&e("div",{class:"episode-progress-container",children:[e("div",{class:"episode-progress-bar",children:e("div",{class:"episode-progress",style:{width:`${Math.max(2,l)}%`}})}),e("div",{class:"episode-progress-text",children:n&&n.duration_seconds>0?`${Math.floor(n.progress_seconds/60)}m / ${Math.floor(n.duration_seconds/60)}m`:`${Math.floor(n.progress_seconds/60)}m watched`})]})]}),e("div",{class:"episode-card-content",children:[e("h4",{children:[s.name,s.air_date&&e("span",{style:{color:"#aaa",fontWeight:400,fontSize:"0.95em",marginLeft:8},children:["• ",(()=>{const t=new Date(s.air_date);return isNaN(t)?null:t.toLocaleDateString(void 0,{month:"short",day:"numeric",year:"numeric"})})()]})]}),e("p",{class:"episode-overview",children:s.overview})]})]},s.id)})}),B?.episodes&&B.episodes.length>x&&(()=>{const s=Math.ceil(B.episodes.length/x),n=10,l=Math.ceil(s/n),t=(me-1)*n+1,h=Math.min(t+n-1,s),i=Array.from({length:h-t+1},(o,a)=>t+a);return e("div",{class:"pagination-controls",children:[me>1&&e("button",{onClick:()=>xe(o=>o-1),children:e("i",{class:"fas fa-angle-double-left"})}),i.map(o=>e("button",{class:ue===o?"active":"",onClick:()=>X(o),children:o},o)),me<l&&e("button",{onClick:()=>xe(o=>o+1),children:e("i",{class:"fas fa-angle-double-right"})})]})})()]})]}),Ee.length>0&&e("div",{class:"recommendations",children:[e("h2",{children:"More Like This"}),e("div",{class:"movie-grid",children:Ee.map(s=>e(Ls,{item:s,type:r,progress:null,duration:null},`${s.media_type||r}-${s.id}`))})]})]})]})};export{qs as default};
//# sourceMappingURL=Watch-Bs-0kFy6.js.map
