{"version":3,"file":"MovieCard-BNWtjiUN.js","sources":["../../src/components/MovieCard.jsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useCallback, useEffect, useRef } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport { useStore } from '../store';\nimport { useAuth } from '../context/Auth';\nimport './MovieCard.css';\nimport { getProxiedImageUrl, IMAGE_BASE_URL } from '../config';\n\nconst MovieCard = ({ item, type, progress, duration, showDeleteButton, onDelete, onClick, useFullResolution = false }) => {\n    // Destructure all needed properties from item\n    const {\n        id,\n        title,\n        name,\n        poster_path,\n        still_path,\n        vote_average,\n        episode_name,\n        season_number,\n        episode_number,\n        first_air_date,\n        release_date,\n        number_of_seasons,\n        // Enhanced anime properties\n        status,\n        episodes,\n        format,\n        nextAiringEpisode,\n        studios,\n        genres\n    } = item;\n\n    // Use episode still_path first, fallback to series poster_path for the image\n    const imagePath = still_path || poster_path;\n    const rawTitle = name || title;\n    const seriesTitle = typeof rawTitle === 'object' && rawTitle !== null\n        ? rawTitle.english || rawTitle.romaji || rawTitle.native\n        : rawTitle;\n\n    // Calculate progress percentage\n    const progressPercent = (progress && duration > 0) ? (progress / duration) * 100 : 0;\n\n    // Calculate year from release date\n    const year = (release_date || first_air_date) ? new Date(release_date || first_air_date).getFullYear() : null;\n\n    const { user } = useAuth();\n    const { addFavorite, removeFavorite, isShowFavorited, favoritesFetched } = useStore();\n    \n    // Get favorited state - for anime, check using type 'anime'\n    const favorited = isShowFavorited(item.id, type, item.season_number, item.episode_number);\n\n    const handleFavoriteClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (!user) return; // Prevent action if user is not logged in\n\n        if (favorited) {\n            // For anime content, need to try removing with both tv and anime types\n            if (type === 'anime') {\n                // Try removing with both possible media types\n                removeFavorite(user.id, item.id, 'anime');\n                removeFavorite(user.id, item.id, 'tv');\n            } else {\n                removeFavorite(user.id, item.id, type, item.season_number, item.episode_number);\n            }\n        } else {\n            addFavorite(user.id, { ...item, type });\n        }\n    };\n\n    // Enhanced click handler for all cards\n    const handleCardClick = (e) => {\n        e.preventDefault();\n        e.stopPropagation();\n\n        if (onClick) {\n            // Use the custom onClick handler if provided (e.g., for the Anime page)\n            onClick(item);\n        } else {\n            // Default navigation logic for other pages\n            const mediaId = type === 'anime' && item.anilist_id ? item.anilist_id : item.id;\n            let link = `/watch/${type}/${mediaId}`;\n            \n            if ((type === 'tv' || type === 'anime') && item.season_number && item.episode_number) {\n                link += `/season/${item.season_number}/episode/${item.episode_number}`;\n            } else if (type === 'anime') {\n                // Default to season 1, episode 1 for anime with no specific episode info\n                link += `/season/1/episode/1`;\n            }\n            route(link);\n        }\n    };\n    \n    const handleImageError = useCallback((e) => {\n        // Replace broken image with placeholder\n        const element = e.target;\n        element.onerror = null; // Prevent infinite error loop\n        element.src = 'https://via.placeholder.com/400x600/1a1a1a/ffffff?text=No+Image';\n    }, []);\n\n    // Standardized subtitle text for all content types\n    const getSubtitleText = () => {\n        if ((type === 'tv' || type === 'anime') && season_number && episode_number) {\n            // This is a specific episode (from watch history/favorites)\n            return `S${season_number} E${episode_number}${episode_name ? `: ${episode_name}` : ''}`;\n        }\n        \n        // Build standardized subtitle: Year • Season/Episode Count • Rating\n        const parts = [];\n        \n        // Add year (release year or start year)\n        if (year) {\n            parts.push(year.toString());\n        }\n        \n        // Add season/episode count based on content type\n        if (type === 'anime' && episodes) {\n            parts.push(`${episodes} episodes`);\n        } else if (type === 'tv') {\n            // For TV shows, use number_of_seasons from discover API\n            // Note: last_episode_to_air and seasons are only available from detailed TV series endpoint\n            if (number_of_seasons) {\n                const seasonText = number_of_seasons === 1 ? 'season' : 'seasons';\n                parts.push(`${number_of_seasons} ${seasonText}`);\n            }\n        }\n        \n        return parts.length > 0 ? parts.join(' • ') : null;\n    };\n\n    const subtitleText = getSubtitleText();\n\n    // Get anime status badge\n    const getStatusBadge = () => {\n        if (type !== 'anime' || !status) return null;\n        \n        const statusMap = {\n            'RELEASING': { text: 'Airing', class: 'airing' },\n            'FINISHED': { text: 'Completed', class: 'completed' },\n            'NOT_YET_RELEASED': { text: 'Upcoming', class: 'upcoming' },\n            'CANCELLED': { text: 'Cancelled', class: 'cancelled' },\n            'HIATUS': { text: 'Hiatus', class: 'hiatus' }\n        };\n        \n        const statusInfo = statusMap[status];\n        if (!statusInfo) return null;\n        \n        return (\n            <div className={`anime-status-badge ${statusInfo.class}`}>\n                {statusInfo.text}\n            </div>\n        );\n    };\n\n    // Get next episode info for airing anime\n    const getNextEpisodeInfo = () => {\n        if (type !== 'anime' || !nextAiringEpisode) return null;\n        \n        const timeUntilAiring = nextAiringEpisode.timeUntilAiring;\n        if (timeUntilAiring <= 0) return null;\n        \n        const days = Math.floor(timeUntilAiring / (24 * 60 * 60));\n        const hours = Math.floor((timeUntilAiring % (24 * 60 * 60)) / (60 * 60));\n        \n        let timeText = '';\n        if (days > 0) {\n            timeText = `${days}d ${hours}h`;\n        } else if (hours > 0) {\n            timeText = `${hours}h`;\n        } else {\n            timeText = '<1h';\n        }\n        \n        return (\n            <div className=\"next-episode-info\">\n                Ep {nextAiringEpisode.episode} in {timeText}\n            </div>\n        );\n    };\n\n    const getFullImageUrl = useCallback((path, size = 'w500') => {\n        if (!path) {\n            return 'https://via.placeholder.com/500x750/1a1a1a/ffffff?text=No+Image';\n        }\n        if (path.startsWith('http')) {\n            return getProxiedImageUrl(path);\n        }\n        const baseUrl = IMAGE_BASE_URL.replace('w500', size);\n        return getProxiedImageUrl(`${baseUrl}${path}`);\n    }, []);\n\n    // State for visibility-based image quality\n    const [isVisible, setIsVisible] = useState(false);\n    const [imageUrl, setImageUrl] = useState(() => \n        getFullImageUrl(imagePath, useFullResolution ? 'w500' : 'w200')\n    );\n    const cardRef = useRef(null);\n\n    // Intersection Observer for lazy loading high quality images\n    useEffect(() => {\n        if (!cardRef.current || useFullResolution) return;\n\n        const observer = new IntersectionObserver(\n            (entries) => {\n                entries.forEach((entry) => {\n                    if (entry.isIntersecting && !isVisible) {\n                        setIsVisible(true);\n                        setImageUrl(getFullImageUrl(imagePath, 'w500'));\n                    }\n                });\n            },\n            {\n                rootMargin: '50px', // Start loading when card is 50px away from viewport\n                threshold: 0.1 // Trigger when 10% of the card is visible\n            }\n        );\n\n        observer.observe(cardRef.current);\n\n        return () => {\n            if (cardRef.current) {\n                observer.unobserve(cardRef.current);\n            }\n        };\n    }, [imagePath, getFullImageUrl, useFullResolution, isVisible]);\n\n    // Update image URL when imagePath changes\n    useEffect(() => {\n        if (useFullResolution) {\n            setImageUrl(getFullImageUrl(imagePath, 'w500'));\n        } else {\n            setImageUrl(getFullImageUrl(imagePath, isVisible ? 'w500' : 'w200'));\n        }\n    }, [imagePath, getFullImageUrl, useFullResolution, isVisible]);\n\n    // Enhanced card with anime-specific features\n    const cardContent = (\n        <div\n            className={`poster-wrapper ${type === 'anime' ? 'anime-card-enhanced' : ''}`}\n        >\n            <img\n                src={imageUrl}\n                alt={seriesTitle}\n                loading=\"lazy\"\n                width=\"400\"\n                height=\"600\"\n                onError={handleImageError}\n            />\n            {/* Gradient overlay for text readability */}\n            <div className=\"scrim\"></div>\n            \n            {/* Anime status badge */}\n            {getStatusBadge()}\n            \n            {/* Progress bar appears for all watched content */}\n            {progressPercent > 0.01 && (\n                <div className=\"progress-bar-container\">\n                    <div className=\"progress-bar\" style={{ width: `${Math.min(progressPercent, 100)}%` }}></div>\n                </div>\n            )}\n            \n            <div className=\"card-info\">\n                {/* Standardized Title Display */}\n                <div className=\"title-row\">\n                    <h3 className=\"card-title\">{seriesTitle}</h3>\n                    {user && (\n                        <button\n                            className={`favorite-btn ${favorited ? 'favorited' : ''}`}\n                            onClick={handleFavoriteClick}\n                            aria-label={favorited ? 'Remove from favorites' : 'Add to favorites'}\n                            disabled={!favoritesFetched}\n                            style={{\n                                color: favorited ? '#ff0000' : 'var(--text-secondary)'\n                            }}\n                        >\n                            ♥︎\n                        </button>\n                    )}\n                </div>\n                {subtitleText && (\n                    <p className=\"card-subtitle\">{subtitleText}</p>\n                )}\n                \n                {/* Next episode info for airing anime */}\n                {getNextEpisodeInfo()}\n                \n                {/* Studio info for anime */}\n                {type === 'anime' && studios && studios.length > 0 && (\n                    <p className=\"studio-info\">\n                        {studios[0].name}\n                    </p>\n                )}\n                \n                <span className=\"rating\">★ {vote_average ? vote_average.toFixed(1) : 'N/A'}</span>\n            </div>\n            {showDeleteButton && (\n                <button\n                    className=\"delete-btn\"\n                    onClick={(e) => {\n                        e.preventDefault();\n                        e.stopPropagation();\n                        if (onDelete) onDelete(item);\n                    }}\n                >\n                    &times;\n                </button>\n            )}\n        </div>\n    );\n\n    return (\n        <div className=\"movie-card-container\" ref={cardRef}>\n            <div className=\"movie-card clickable\" onClick={handleCardClick}>\n                {cardContent}\n            </div>\n        </div>\n    );\n};\n\nexport default MovieCard;"],"names":["MovieCard","item","type","progress","duration","showDeleteButton","onDelete","onClick","useFullResolution","id","title","name","poster_path","still_path","vote_average","episode_name","season_number","episode_number","first_air_date","release_date","number_of_seasons","status","episodes","format","nextAiringEpisode","studios","genres","imagePath","rawTitle","seriesTitle","progressPercent","year","user","useAuth","addFavorite","removeFavorite","isShowFavorited","favoritesFetched","useStore","favorited","handleFavoriteClick","handleCardClick","mediaId","link","route","handleImageError","useCallback","element","subtitleText","parts","seasonText","getStatusBadge","statusInfo","jsx","getNextEpisodeInfo","timeUntilAiring","days","hours","timeText","jsxs","getFullImageUrl","path","size","getProxiedImageUrl","baseUrl","IMAGE_BASE_URL","isVisible","setIsVisible","useState","imageUrl","setImageUrl","cardRef","useRef","useEffect","observer","entries","entry","cardContent"],"mappings":"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"}