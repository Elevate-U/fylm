{"version":3,"file":"Anime-z5B2KRzR.js","sources":["../../src/pages/Anime.jsx"],"sourcesContent":["import { h } from 'preact';\nimport { useState, useEffect, useCallback } from 'preact/hooks';\nimport { route } from 'preact-router';\nimport { useStore } from '../store';\nimport MovieCard from '../components/MovieCard';\nimport AnimeCard from '../components/AnimeCard';\nimport { getLastWatchedEpisodeWithProgress } from '../utils/watchHistory';\nimport { useAuth } from '../context/Auth';\nimport { API_BASE_URL } from '../config';\nimport LoadingSpinner from '../components/LoadingSpinner';\nimport './Home.css';\nimport './Anime.css';\n\nconst Anime = () => {\n    const [loading, setLoading] = useState(true);\n    const [trending, setTrending] = useState([]);\n    const [seasonal, setSeasonal] = useState([]);\n    const [popular, setPopular] = useState([]);\n    const [topRated, setTopRated] = useState([]);\n    const [error, setError] = useState(null);\n    const [videasyAvailable, setVideasyAvailable] = useState(true);\n\n    const { user } = useAuth();\n    const {\n        continueWatching,\n        continueWatchingFetched,\n        fetchContinueWatching\n    } = useStore();\n\n    useEffect(() => {\n        if (user && !continueWatchingFetched) {\n            fetchContinueWatching(user.id);\n        }\n    }, [user, continueWatchingFetched, fetchContinueWatching]);\n\n    const animeWatchHistory = continueWatching.filter(item => item.type === 'anime');\n\n    const fetchCombinedAnimeData = useCallback(async (retries = 3) => {\n\t    try {\n            const response = await fetch(`${API_BASE_URL}/trending/anime/combined`);\n\t        if (!response.ok) {\n                throw new Error(`API error: ${response.status}`);\n\t        }\n            return response.json();\n\t    } catch (error) {\n            console.error(`Error fetching combined anime data:`, error);\n\t        if (retries > 0) {\n\t            await new Promise(resolve => setTimeout(resolve, 1000 * (4 - retries)));\n                return fetchCombinedAnimeData(retries - 1);\n\t        }\n            return null; // Return null on failure\n\t    }\n\t}, []);\n\n\n    const handleAnimeClick = useCallback(async (animeItem) => {\n        // Determine the correct routing based on source\n        let mediaType, itemId, routePath;\n        \n        if (animeItem.source === 'tmdb') {\n            // For TMDB content, use the appropriate media type and TMDB ID\n            mediaType = animeItem.media_type || 'tv';\n            itemId = animeItem.tmdb_id || animeItem.id;\n            routePath = `/watch/${mediaType}/${itemId}`;\n            \n            // Only add season/episode for TV shows\n            if (mediaType === 'tv') {\n                if (user) {\n                    const nextEpisode = await getLastWatchedEpisodeWithProgress(user.id, itemId, mediaType);\n                    if (nextEpisode) {\n                        routePath += `/season/${nextEpisode.season}/episode/${nextEpisode.episode}`;\n                    } else {\n                        routePath += `/season/1/episode/1`;\n                    }\n                } else {\n                    routePath += `/season/1/episode/1`;\n                }\n            }\n        } else {\n            // For AniList content, use anime route with AniList ID\n            mediaType = 'anime';\n            itemId = animeItem.anilist_id || animeItem.id;\n            routePath = `/watch/anime/${itemId}`;\n            \n            if (user) {\n                const nextEpisode = await getLastWatchedEpisodeWithProgress(user.id, itemId, 'anime');\n                if (nextEpisode) {\n                    routePath += `/season/${nextEpisode.season}/episode/${nextEpisode.episode}`;\n                } else {\n                    routePath += `/season/1/episode/1`;\n                }\n            } else {\n                routePath += `/season/1/episode/1`;\n            }\n        }\n        \n        route(routePath);\n    }, [user]);\n\n    const checkServiceAvailability = useCallback(async () => {\n        try {\n            const videasyCheck = await fetch(`${API_BASE_URL}/health/videasy`, {\n                method: 'GET',\n                signal: AbortSignal.timeout(5000)\n            });\n            setVideasyAvailable(videasyCheck.ok);\n        } catch (error) {\n            console.warn('Videasy availability check failed:', error);\n            setVideasyAvailable(false);\n        }\n    }, []);\n\n    useEffect(() => {\n        checkServiceAvailability();\n    }, [checkServiceAvailability]);\n\n    useEffect(() => {\n        const fetchAllAnimeData = async () => {\n            setLoading(true);\n            setError(null);\n\n            try {\n                const combinedData = await fetchCombinedAnimeData();\n\n                if (combinedData) {\n                    // Filter out any items that don't have a poster\n                    const filterValidItems = (items) => items.filter(item => item.poster_path);\n\n                    setTrending(filterValidItems(combinedData.combined || []).slice(0, 20));\n                    setSeasonal(filterValidItems(combinedData.seasonal || []));\n\n                    // For popular and top-rated, we can sort the combined list\n                    const allAnime = filterValidItems(combinedData.combined || []);\n                    \n                    // Sort by popularity\n                    const popularAnime = [...allAnime].sort((a, b) => (b.popularity || 0) - (a.popularity || 0));\n                    setPopular(popularAnime.slice(0, 20)); // Take top 20 popular\n\n                    // Sort by vote average\n                    const topRatedAnime = [...allAnime].sort((a, b) => (b.vote_average || 0) - (a.vote_average || 0));\n                    setTopRated(topRatedAnime.slice(0, 20)); // Take top 20 rated\n                } else {\n                    throw new Error(\"Failed to fetch any anime data.\");\n                }\n\n            } catch (error) {\n                console.error('Error fetching anime data:', error);\n                setError('Failed to load anime data. Please refresh the page.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchAllAnimeData();\n    }, [fetchCombinedAnimeData]);\n\n    const getCategoryFromTitle = (title) => {\n        const titleMap = {\n            'Trending Now': 'trending',\n            'This Season': 'seasonal',\n            'Popular Anime': 'popular',\n            'Top Rated Anime': 'top-rated'\n        };\n        return titleMap[title] || 'popular';\n    };\n\n    const handleSectionClick = (title) => {\n        const category = getCategoryFromTitle(title);\n        route(`/browse/anime/${category}`);\n    };\n\n    const renderSection = (title, items) => {\n        if (!items || items.length === 0) {\n            return null;\n        }\n        \n        return (\n            <section class=\"home-section\">\n                <div \n                    class=\"section-header clickable-header\" \n                    onClick={() => handleSectionClick(title)}\n                >\n                    <h2>{title}</h2>\n                    <button \n                        class=\"view-all-btn\" \n                        onClick={(e) => {\n                            e.stopPropagation();\n                            handleSectionClick(title);\n                        }}\n                    >\n                        View All <i class=\"fas fa-arrow-right\"></i>\n                    </button>\n                </div>\n                <div class=\"scrolling-row\">\n                    {items.map(item => (\n                        <AnimeCard\n                            key={`${title}-${item.id}`}\n                            item={item}\n                            onClick={() => handleAnimeClick(item)}\n                        />\n                    ))}\n                </div>\n            </section>\n        );\n    };\n\n    const ServiceStatusIndicator = () => (\n        <div class=\"service-status\">\n            <div class={`status-indicator ${videasyAvailable ? 'online' : 'offline'}`}>\n                <span class=\"status-dot\"></span>\n                Videasy: {videasyAvailable ? 'Online' : 'Offline'}\n            </div>\n        </div>\n    );\n\n    const ErrorDisplay = ({ error, onRetry }) => (\n        <div class=\"error-container\">\n            <div class=\"error-message\">\n                <h3>Something went wrong</h3>\n                <p>{error}</p>\n                <button onClick={onRetry} class=\"retry-button\">Try Again</button>\n            </div>\n            <ServiceStatusIndicator />\n        </div>\n    );\n\n    if (loading) {\n        return (\n            <div class=\"container home-page anime-page\">\n                <h1 class=\"main-title\">Anime</h1>\n                <ServiceStatusIndicator />\n                <LoadingSpinner text={'Loading anime...'} />\n            </div>\n        );\n    }\n\n    if (error) {\n        return (\n            <div class=\"container home-page anime-page\">\n                <h1 class=\"main-title\">Anime</h1>\n                <ErrorDisplay\n                    error={error}\n                    onRetry={() => {\n                        setError(null);\n                        checkServiceAvailability();\n                        // re-fetch data\n                    }}\n                />\n            </div>\n        );\n    }\n\n    return (\n        <div class=\"container home-page anime-page\">\n            <h1 class=\"main-title\">Anime</h1>\n            \n            <div class=\"anime-controls\">\n                <ServiceStatusIndicator />\n            </div>\n            \n            {animeWatchHistory.length > 0 && (\n                <section class=\"home-section\">\n                    <h2>Continue Watching</h2>\n                    <div class=\"scrolling-row scrolling-row--compact\">\n                        {animeWatchHistory.map(item => (\n                            <AnimeCard\n                                key={`continue-watching-${item.id}`}\n                                item={item}\n                                progress={item.progress_seconds}\n                                duration={item.duration_seconds}\n                                onClick={() => handleAnimeClick(item)}\n                            />\n                        ))}\n                    </div>\n                </section>\n            )}\n            \n            {renderSection('Trending Now', trending)}\n            {renderSection('This Season', seasonal)}\n            {renderSection('Popular Anime', popular)}\n            {renderSection('Top Rated Anime', topRated)}\n            \n            {!loading &&\n             trending.length === 0 &&\n             popular.length === 0 &&\n             topRated.length === 0 && (\n                <div class=\"no-content\">\n                    <h3>No anime content available</h3>\n                    <p>Please check your connection and try again.</p>\n                </div>\n            )}\n        </div>\n    );\n};\n\nexport default Anime;"],"names":["Anime","loading","setLoading","useState","trending","setTrending","seasonal","setSeasonal","popular","setPopular","topRated","setTopRated","error","setError","videasyAvailable","setVideasyAvailable","user","useAuth","continueWatching","continueWatchingFetched","fetchContinueWatching","useStore","useEffect","animeWatchHistory","item","fetchCombinedAnimeData","useCallback","retries","response","API_BASE_URL","resolve","handleAnimeClick","animeItem","mediaType","itemId","routePath","nextEpisode","getLastWatchedEpisodeWithProgress","route","checkServiceAvailability","videasyCheck","combinedData","filterValidItems","items","allAnime","popularAnime","a","b","topRatedAnime","getCategoryFromTitle","title","handleSectionClick","category","renderSection","jsxs","jsx","e","AnimeCard","ServiceStatusIndicator","ErrorDisplay","onRetry","LoadingSpinner"],"mappings":"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"}